專案檔案架構：
./
├── backend/
│   ├── __init__.py
│   ├── main.py # backend/main.py
│   └── server.py
│   ├── material_management/
│   │   ├── constants.py # backend/material_management/constants.py
│   │   ├── routes.py # backend/material_management/routes.py
│   │   └── services.py # backend/material_management/services.py
│   │   ├── static/
│   │   │   └── logo.jpg
│   ├── migrations/
│   │   └── env.py
│   │   ├── versions/
│   │   │   ├── 0b5bdb10bee4_initial_schema_from_scratch.py
│   │   │   └── 21bfa265addc_add_job_number_and_contractor_columns.py
│   ├── project_management/
│   │   ├── models.py # backend/project_management/models.py
│   │   └── routes.py # backend/project_management/routes.py
│   ├── site_diary/
│   │   ├── models.py # backend/site_diary/models.py
│   │   ├── routes.py # backend/site_diary/routes.py
│   │   └── services.py # backend/site_diary/services.py
│   ├── staff_management/
│   │   ├── models.py # backend/staff_management/models.py
│   │   └── routes.py # backend/staff_management/routes.py
├── frontend/
│   └── index.html
│   ├── public/
│   ├── src/
│   │   ├── App.vue
│   │   └── style.css
│   │   ├── assets/
│   │   ├── components/
│   │   │   ├── HelloWorld.vue
│   │   │   ├── ProjectDetail.vue
│   │   │   ├── ProjectForm.vue
│   │   │   ├── ProjectList.vue
│   │   │   └── SiteDiaryForm.vue
│   │   ├── views/
│   │   │   ├── HomeView.vue
│   │   │   ├── MaterialFormView.vue
│   │   │   ├── ProjectsView.vue
│   │   │   ├── SiteDiaryListView.vue
│   │   │   └── StaffView.vue
================================================================================

backend/__init__.py

================================================================================

================================================================================

backend/main.py

================================================================================
# backend/main.py

from flask import Flask, send_from_directory
from flask_sqlalchemy import SQLAlchemy
import os

# 改用 project_management.models 來初始化 db
from backend.project_management.models import db
from backend.project_management.routes import projects_bp
from backend.material_management.routes import material_bp
from backend.site_diary.routes import site_diary_bp

# Flask-Migrate
from flask_migrate import Migrate

# staff_management 仍保留
from backend.staff_management.routes import staff_bp

# ★ 新增：引入我們在 server.py 裏定義的下載 Blueprint
from backend.server import download_bp


def create_app():
    app = Flask(__name__, static_folder="../frontend/dist", static_url_path="/")

    # 設定資料庫
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    db.init_app(app)
    
    # 使用 flask-migrate，指定 migrations 資料夾為 backend/migrations
    migrate = Migrate(app, db, directory="backend/migrations")

    # Blueprint 註冊
    app.register_blueprint(projects_bp, url_prefix='/api/projects')
    app.register_blueprint(material_bp, url_prefix='/api')
    app.register_blueprint(site_diary_bp, url_prefix='/api/projects')
    app.register_blueprint(staff_bp, url_prefix='/api/staff')

    # ★ 新增：註冊提供下載的 Blueprint（對應 /download-diary）
    app.register_blueprint(download_bp)

    # 提供前端打包後檔案 (SPA)
    @app.route('/', defaults={'path': ''})
    @app.route('/<path:path>')
    def serve_vue_app(path):
        dist_dir = os.path.abspath(app.static_folder)
        full_path = os.path.join(dist_dir, path)
        if path and os.path.exists(full_path):
            return send_from_directory(dist_dir, path)
        else:
            return send_from_directory(dist_dir, 'index.html')
    return app


if __name__ == "__main__":
    import os
    app = create_app()
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
================================================================================

backend/material_management/constants.py

================================================================================
# backend/material_management/constants.py

special_fields = {
    "工程編號": (6, 2, 4, "37/2024/DVPS"),
    "工程名稱": (7, 2, 4, "黑沙馬路行人道優化工程(第二期)"),
    "文件編號": (6, 8, 8, "")
}

regular_fields = [
    ("報批之材料", 11, 3),
    ("牌子(如有)", 12, 3),
    ("預算表之項目編號", 11, 7),
    ("型號", 12, 6),
    ("貨期", 13, 6),
    ("數量", 14, 6),
]

attachment_fields = [
    ("附件", 15, 6)
]

material_type_checkboxes = [
    ("結構", 7, 6),
    ("供水", 8, 6),
    ("建築", 7, 8),
    ("電氣", 8, 8),
    ("排水", 7, 10),
    ("其他", 8, 10)
]

material_status_checkboxes = [
    ("與設計相同", 13, 1),
    ("與標書相同", 14, 1),
    ("與後加工程建議書相同", 15, 1),
    ("同等質量", 16, 1),
    ("替換材料", 17, 1),
    ("原設計沒有指定", 18, 1)
]

attachment_type_checkboxes = [
    ("樣板", 16, 5),
    ("目錄", 17, 5),
    ("來源證", 16, 7),
    ("其他", 17, 7)
]

================================================================================

backend/material_management/routes.py

================================================================================
# backend/material_management/routes.py
from flask import Blueprint, request, send_file
from .services import generate_excel

material_bp = Blueprint('material_bp', __name__)

@material_bp.route('/material-submission', methods=['POST'])
def material_submission():
    """
    接收 JSON 表單資料，產生 Excel 並回傳。
    """
    data = request.json
    temp_file_path = generate_excel(data)
    file_name = data.get('檔案名稱', '材料報批表_filled.xlsx')
    if not file_name.endswith('.xlsx'):
        file_name += '.xlsx'
    return send_file(temp_file_path, as_attachment=True, download_name=file_name)

================================================================================

backend/material_management/services.py

================================================================================
# backend/material_management/services.py
import os
import tempfile
import shutil
from datetime import datetime

from openpyxl import load_workbook
from openpyxl.styles import Font
from openpyxl.drawing.image import Image
from openpyxl.drawing.spreadsheet_drawing import OneCellAnchor, AnchorMarker
from openpyxl.drawing.xdr import XDRPositiveSize2D
from flask import current_app

from .constants import (
    special_fields,
    regular_fields,
    attachment_fields,
    material_type_checkboxes,
    material_status_checkboxes,
    attachment_type_checkboxes
)

def generate_excel(form_data):
    """
    依照使用者表單資料，填入並產生材料報批的 Excel 檔。
    回傳產生之暫存檔路徑。
    """
    # 複製模板到暫存檔
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx')
    temp_file.close()

    # 模板路徑
    template_path = os.path.join(
        current_app.root_path, 
        'material_management', 
        'templates', 
        'material_template.xlsx'
    )
    shutil.copy(template_path, temp_file.name)

    wb = load_workbook(temp_file.name)
    wb._external_links = []
    ws = wb.active

    # 加入 logo
    img_path = os.path.join(
        current_app.root_path,
        'material_management',
        'static',
        'logo.jpg'
    )
    img = Image(img_path)
    width_emu = int(4.09 * 360000)   # 4.09 cm
    height_emu = int(1.62 * 360000) # 1.62 cm
    marker = AnchorMarker(col=0, colOff=133350, row=1, rowOff=38100)
    size = XDRPositiveSize2D(cx=width_emu, cy=height_emu)
    img.anchor = OneCellAnchor(_from=marker, ext=size)
    ws.add_image(img)

    # 填入 special_fields
    for field, (row, start_col, end_col, default_val) in special_fields.items():
        merged_cell = ws.cell(row=row, column=start_col)
        merged_cell.value = form_data.get(field, default_val)
        if field == "工程名稱":
            merged_cell.font = Font(size=10)

    # 填入 regular_fields
    for field, row, col in regular_fields:
        ws.cell(row=row, column=col, value=form_data.get(field, ''))

    # 填入附件欄位
    for field, row, col in attachment_fields:
        ws.cell(row=row, column=col, value=form_data.get(field, ''))

    # 處理 checkbox
    for checkboxes in [
        material_type_checkboxes,
        material_status_checkboxes,
        attachment_type_checkboxes
    ]:
        for (fld, r, c) in checkboxes:
            if form_data.get(fld):  # 若有值則勾選
                ws.cell(row=r, column=c, value="☑" + fld)
            else:
                ws.cell(row=r, column=c, value="□" + fld)

    # 填入日期
    default_date = datetime.now().strftime("%Y/%m/%d")
    ws.cell(row=21, column=7, value=form_data.get('日期', default_date))

    wb.save(temp_file.name)
    return temp_file.name

================================================================================

backend/material_management/static/logo.jpg

================================================================================

backend/migrations/env.py

================================================================================
import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

================================================================================

backend/migrations/versions/0b5bdb10bee4_initial_schema_from_scratch.py

================================================================================
"""Initial schema from scratch

Revision ID: 0b5bdb10bee4
Revises: 
Create Date: 2025-02-04 17:10:58.507798

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0b5bdb10bee4'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('projects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('owner', sa.String(length=100), nullable=True),
    sa.Column('objective', sa.Text(), nullable=True),
    sa.Column('duration_type', sa.String(length=20), nullable=True),
    sa.Column('duration_days', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('staff',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('role', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('site_diaries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('report_date', sa.Date(), nullable=True),
    sa.Column('weather_morning', sa.String(length=50), nullable=True),
    sa.Column('weather_noon', sa.String(length=50), nullable=True),
    sa.Column('day_count', sa.Integer(), nullable=True),
    sa.Column('summary', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('site_diary_machines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('site_diary_id', sa.Integer(), nullable=False),
    sa.Column('machine_type', sa.String(length=50), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['site_diary_id'], ['site_diaries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('site_diary_staff',
    sa.Column('site_diary_id', sa.Integer(), nullable=False),
    sa.Column('staff_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['site_diary_id'], ['site_diaries.id'], ),
    sa.ForeignKeyConstraint(['staff_id'], ['staff.id'], ),
    sa.PrimaryKeyConstraint('site_diary_id', 'staff_id')
    )
    op.create_table('site_diary_workers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('site_diary_id', sa.Integer(), nullable=False),
    sa.Column('worker_type', sa.String(length=50), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['site_diary_id'], ['site_diaries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('site_diary_workers')
    op.drop_table('site_diary_staff')
    op.drop_table('site_diary_machines')
    op.drop_table('site_diaries')
    op.drop_table('staff')
    op.drop_table('projects')
    # ### end Alembic commands ###

================================================================================

backend/migrations/versions/21bfa265addc_add_job_number_and_contractor_columns.py

================================================================================
"""Add job_number and contractor columns to projects

Revision ID: 21bfa265addc
Revises: 0b5bdb10bee4
Create Date: 2025-02-05 10:00:00
"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '21bfa265addc'
down_revision = '0b5bdb10bee4'
branch_labels = None
depends_on = None

def upgrade():
    op.add_column('projects', sa.Column('job_number', sa.String(length=50), nullable=True))
    op.add_column('projects', sa.Column('contractor', sa.String(length=200), nullable=True))

def downgrade():
    op.drop_column('projects', 'contractor')
    op.drop_column('projects', 'job_number')

================================================================================

backend/project_management/models.py

================================================================================
# backend/project_management/models.py

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Project(db.Model):
    """
    專案 (Project) Model
    """
    __tablename__ = 'projects'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text, nullable=True)
    start_date = db.Column(db.Date, nullable=True)
    end_date = db.Column(db.Date, nullable=True)

    # 既有欄位
    owner = db.Column(db.String(100), nullable=True)           # 專案業主
    objective = db.Column(db.Text, nullable=True)              # 專案整體目標
    duration_type = db.Column(db.String(20), nullable=True)    # 'business' or 'calendar'
    duration_days = db.Column(db.Integer, nullable=True)

    # === 新增欄位: 工作編號 & 承建商 ===
    job_number = db.Column(db.String(50), nullable=True)  # 工作編號
    contractor = db.Column(db.String(200), nullable=True) # 承建商

================================================================================

backend/project_management/routes.py

================================================================================
# backend/project_management/routes.py
from flask import Blueprint, request, jsonify
from datetime import datetime
from .models import db, Project

projects_bp = Blueprint('projects_bp', __name__)

@projects_bp.route('/', methods=['GET'])
def get_projects():
    """
    取得所有專案列表
    """
    projects = Project.query.all()
    result = []
    for p in projects:
        result.append({
            "id": p.id,
            "name": p.name,
            "description": p.description,
            "start_date": p.start_date.isoformat() if p.start_date else None,
            "end_date": p.end_date.isoformat() if p.end_date else None,
            "owner": p.owner,
            "objective": p.objective,
            "duration_type": p.duration_type,
            "duration_days": p.duration_days,
            # 新增回傳
            "job_number": p.job_number,
            "contractor": p.contractor
        })
    return jsonify(result), 200


@projects_bp.route('/', methods=['POST'])
def create_project():
    """
    建立新專案
    """
    data = request.json
    name = data.get('name')
    description = data.get('description')
    start_date_str = data.get('start_date')
    end_date_str = data.get('end_date')
    owner = data.get('owner')
    objective = data.get('objective')
    duration_type = data.get('duration_type')
    duration_days_str = data.get('duration_days')

    # 新增接收欄位
    job_number = data.get('job_number')
    contractor = data.get('contractor')

    start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date() if start_date_str else None
    end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date() if end_date_str else None
    duration_days = int(duration_days_str) if duration_days_str else None

    project = Project(
        name=name,
        description=description,
        start_date=start_date,
        end_date=end_date,
        owner=owner,
        objective=objective,
        duration_type=duration_type,
        duration_days=duration_days,
        job_number=job_number,
        contractor=contractor
    )
    db.session.add(project)
    db.session.commit()

    return jsonify({"message": "Project created", "project_id": project.id}), 201


@projects_bp.route('/<int:project_id>', methods=['GET'])
def get_project_detail(project_id):
    """
    取得單一專案詳細資訊
    """
    project = Project.query.get_or_404(project_id)
    return jsonify({
        "id": project.id,
        "name": project.name,
        "description": project.description,
        "start_date": project.start_date.isoformat() if project.start_date else None,
        "end_date": project.end_date.isoformat() if project.end_date else None,
        "owner": project.owner,
        "objective": project.objective,
        "duration_type": project.duration_type,
        "duration_days": project.duration_days,
        # 新增回傳
        "job_number": project.job_number,
        "contractor": project.contractor
    }), 200


@projects_bp.route('/<int:project_id>', methods=['PUT'])
def update_project(project_id):
    """
    更新專案
    """
    project = Project.query.get_or_404(project_id)
    data = request.json

    project.name = data.get('name', project.name)
    project.description = data.get('description', project.description)
    project.owner = data.get('owner', project.owner)
    project.objective = data.get('objective', project.objective)
    project.duration_type = data.get('duration_type', project.duration_type)
    project.duration_days = data.get('duration_days', project.duration_days)

    # 新增更新
    project.job_number = data.get('job_number', project.job_number)
    project.contractor = data.get('contractor', project.contractor)

    start_date_str = data.get('start_date')
    end_date_str = data.get('end_date')
    if start_date_str:
        project.start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
    if end_date_str:
        project.end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()

    db.session.commit()
    return jsonify({"message": "Project updated"}), 200


@projects_bp.route('/<int:project_id>', methods=['DELETE'])
def delete_project(project_id):
    """
    刪除專案
    """
    project = Project.query.get_or_404(project_id)
    db.session.delete(project)
    db.session.commit()
    return jsonify({"message": "Project deleted"}), 200

================================================================================

backend/server.py

================================================================================
import os
from flask import Blueprint, send_file, jsonify

download_bp = Blueprint('download_bp', __name__)

def generate_tree(startpath, ignore_dirs=None, ignore_files=None, files_to_show=None):
    if ignore_dirs is None:
        ignore_dirs = {'.git', '__pycache__', '.pytest_cache', '.vscode', 'venv', 'env', 'node_modules'}
    if ignore_files is None:
        ignore_files = {'.gitignore', '.env', '*.pyc', '*.pyo', '*.pyd', '.DS_Store'}
    
    tree_str = []
    
    def should_ignore(path, name):
        # 檢查是否應該忽略該目錄或檔案
        if os.path.isdir(os.path.join(path, name)):
            return name in ignore_dirs
        # 檢查副檔名是否為允許的類型
        allowed_extensions = {'.py', '.jpg', '.jpeg', '.html', '.css','.vue','ts','js','json','svg'}
        file_ext = os.path.splitext(name)[1].lower()
        if file_ext not in allowed_extensions:
            return True
        return any(name.endswith(f[1:]) if f.startswith('*') else name == f for f in ignore_files)
    
    def get_description(filepath):
        # 讀取檔案前幾行來尋找註解描述
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                first_lines = ''.join([next(f, '') for _ in range(5)])
                desc = ''
                for line in first_lines.split('\n'):
                    if line.strip().startswith('#'):
                        desc = line.strip('# ').strip()
                        break
                return f" # {desc}" if desc else ''
        except:
            return ''

    def should_show(filepath):
        if files_to_show is None:
            return True
        # 將檔案路徑標準化以進行比較
        filepath = filepath.replace('\\', '/').replace('./', '')
        return filepath in files_to_show

    for root, dirs, files in os.walk(startpath):
        # 過濾掉要忽略的目錄
        dirs[:] = sorted([d for d in dirs if not should_ignore(root, d)])
        
        level = root.replace(startpath, '').count(os.sep)
        indent = '│   ' * level
        
        # 檢查此目錄是否包含要顯示的文件
        has_files_to_show = False
        if files_to_show is not None:
            for file in files:
                if should_show(os.path.join(root, file)):
                    has_files_to_show = True
                    break
        
        # 只有當目錄包含要顯示的文件時才添加目錄名
        if has_files_to_show or files_to_show is None:
            if level > 0:
                tree_str.append(f'{indent[:-4]}├── {os.path.basename(root)}/')
            else:
                tree_str.append(os.path.basename(root) + '/')
        
        # 添加檔案
        files = sorted([f for f in files if not should_ignore(root, f) and should_show(os.path.join(root, f))])
        for i, file in enumerate(files):
            file_indent = indent + ('├── ' if i < len(files) - 1 else '└── ')
            filepath = os.path.join(root, file)
            description = get_description(filepath) if file.endswith('.py') else ''
            tree_str.append(f'{file_indent}{file}{description}')
    
    return '\n'.join(tree_str)


def combine_python_files():
    """
    執行後會在本地目錄下生成/覆蓋一份 combined_code.txt，
    內容包含指定類型檔案的合併，以及專案的目錄結構。
    """
    # 指定要包含的日誌檔案（若有）
    log_files = [
        # 在此可加入如 logs/xxx.log 之類的路徑
    ]
    
    # 自動搜尋所有指定類型的檔案
    files_to_read = []
    allowed_extensions = ('.py', '.jpg', '.jpeg', '.html', '.css','.vue','ts','js','json','svg')
    for root, _, files in os.walk('.'):
        for file in files:
            if file.lower().endswith(allowed_extensions) and file != 'chaintext.py':
                file_path = os.path.join(root, file)
                file_path = file_path.replace('\\', '/')
                if file_path.startswith('./'):
                    file_path = file_path[2:]
                skip = False
                for ignore_dir in {'.git', '__pycache__', '.pytest_cache', '.vscode', 'venv', 'env', 'node_modules'}:
                    if ignore_dir in file_path.split('/'):
                        skip = True
                        break
                if not skip:
                    files_to_read.append(file_path)
    
    # 排序檔案列表
    files_to_read.sort()

    # 分隔線
    separator = "\n" + "="*80 + "\n"
    
    # 打開輸出文件
    with open('combined_code.txt', 'w', encoding='utf-8') as output_file:
        # 首先寫入日誌檔案
        for log_file in log_files:
            try:
                with open(log_file, 'r', encoding='utf-8') as input_file:
                    output_file.write(f"\n{log_file}\n")
                    output_file.write(separator)
                    output_file.write(input_file.read())
                    output_file.write(separator)
            except FileNotFoundError:
                print(f"警告：找不到日誌檔案 {log_file}")
            except Exception as e:
                print(f"處理日誌檔案 {log_file} 時發生錯誤：{str(e)}")
        
        # 接著寫入專案檔案架構
        project_structure = generate_tree('.', files_to_show=files_to_read)
        output_file.write("專案檔案架構：\n")
        output_file.write(project_structure)
        output_file.write(separator)
        
        # 遍歷每個文件
        for i, file_name in enumerate(files_to_read):
            try:
                with open(file_name, 'r', encoding='utf-8') as input_file:
                    # 寫入文件名作為標題
                    output_file.write(f"\n{file_name}\n")
                    # 寫入分隔線
                    output_file.write(separator)
                    # 寫入文件內容
                    output_file.write(input_file.read())
                    # 如果不是最後一個文件，再加一個分隔線
                    if i < len(files_to_read) - 1:
                        output_file.write(separator)
                        
            except FileNotFoundError:
                print(f"警告：找不到文件 {file_name}")
            except Exception as e:
                print(f"處理文件 {file_name} 時發生錯誤：{str(e)}")


@download_bp.route('/download-diary', methods=['GET'])
def download_diary():
    """
    產生(或更新) combined_code.txt 後，將其以檔案下載回傳給前端。
    若下載失敗（程式發生問題），則回傳 JSON 錯誤訊息並帶有 500 狀態碼。
    """
    try:
        combine_python_files()
        return send_file(
            'combined_code.txt',
            as_attachment=True,
            download_name='combined_code.txt'  # Flask 2.0+ 用參數 download_name
        )
    except Exception as e:
        return jsonify({'error': str(e)}), 500

================================================================================

backend/site_diary/models.py

================================================================================
# backend/site_diary/models.py

from datetime import datetime
# 注意：這裡我們只需要引用 db 自 backend.project_management.models
from backend.project_management.models import db
# 如果有需要使用 Staff，可引用 (但示範通常在關聯那裡再做)
from backend.staff_management.models import Staff

class SiteDiary(db.Model):
    """
    替代原本的 DailyReport：日報 (SiteDiary) 主表
    """
    __tablename__ = 'site_diaries'

    id = db.Column(db.Integer, primary_key=True)
    # 與 Project 的外鍵關係
    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)

    # 報表日期
    report_date = db.Column(db.Date, default=datetime.utcnow)

    # 天氣
    weather_morning = db.Column(db.String(50), nullable=True)  # 早上天氣
    weather_noon = db.Column(db.String(50), nullable=True)     # 中午天氣

    # 開工日數
    # （若不想手動填，可在 services.py 裏做自動計算）
    day_count = db.Column(db.Integer, nullable=True)

    # 本日工作概述
    summary = db.Column(db.Text, nullable=False)

    # 一對多: SiteDiaryWorker
    workers = db.relationship('SiteDiaryWorker', 
                              backref='site_diary', 
                              cascade='all, delete-orphan', 
                              lazy=True)

    # 一對多: SiteDiaryMachine
    machines = db.relationship('SiteDiaryMachine', 
                               backref='site_diary', 
                               cascade='all, delete-orphan', 
                               lazy=True)

    # 多對多: Staff (through site_diary_staff)
    staffs = db.relationship('Staff',
                             secondary='site_diary_staff',
                             back_populates='site_diaries',
                             lazy=True)


class SiteDiaryWorker(db.Model):
    """
    替代原本的 DailyReportWorker
    """
    __tablename__ = 'site_diary_workers'

    id = db.Column(db.Integer, primary_key=True)
    site_diary_id = db.Column(db.Integer, db.ForeignKey('site_diaries.id'), nullable=False)
    worker_type = db.Column(db.String(50), nullable=False)
    quantity = db.Column(db.Integer, nullable=False, default=0)


class SiteDiaryMachine(db.Model):
    """
    替代原本的 DailyReportMachine
    """
    __tablename__ = 'site_diary_machines'

    id = db.Column(db.Integer, primary_key=True)
    site_diary_id = db.Column(db.Integer, db.ForeignKey('site_diaries.id'), nullable=False)
    machine_type = db.Column(db.String(50), nullable=False)
    quantity = db.Column(db.Integer, nullable=False, default=0)

================================================================================

backend/site_diary/routes.py

================================================================================
# backend/site_diary/routes.py

import traceback
from flask import Blueprint, request, jsonify, send_file, Response
from datetime import datetime
from urllib.parse import quote

from backend.project_management.models import db, Project
from backend.staff_management.models import Staff
from backend.site_diary.models import (
    SiteDiary,
    SiteDiaryWorker,
    SiteDiaryMachine
)
from backend.site_diary.services import (
    auto_compute_day_count_if_needed,
    generate_diary_xlsx_only,
    generate_diary_pdf_sheet
)

site_diary_bp = Blueprint('site_diary_bp', __name__)


@site_diary_bp.route('/<int:project_id>/site_diaries', methods=['POST'])
def create_site_diary(project_id):
    project = Project.query.get_or_404(project_id)
    data = request.json

    report_date_str = data.get('report_date')
    if report_date_str:
        report_date = datetime.strptime(report_date_str, '%Y-%m-%d').date()
    else:
        report_date = datetime.utcnow().date()

    site_diary = SiteDiary(
        project_id=project.id,
        report_date=report_date,
        weather_morning=data.get('weather_morning', ''),
        weather_noon=data.get('weather_noon', ''),
        day_count=data.get('day_count', None),
        summary=data.get('summary', '')
    )
    db.session.add(site_diary)
    db.session.flush()

    auto_compute_day_count_if_needed(site_diary)
    db.session.flush()

    workers_dict = data.get('workers', {})
    for worker_type, quantity in workers_dict.items():
        db.session.add(SiteDiaryWorker(
            site_diary_id=site_diary.id,
            worker_type=worker_type,
            quantity=quantity
        ))

    machines_dict = data.get('machines', {})
    for machine_type, quantity in machines_dict.items():
        db.session.add(SiteDiaryMachine(
            site_diary_id=site_diary.id,
            machine_type=machine_type,
            quantity=quantity
        ))

    staff_ids = data.get('staff_ids', [])
    for sid in staff_ids:
        staff_obj = Staff.query.get(sid)
        if staff_obj:
            site_diary.staffs.append(staff_obj)

    db.session.commit()

    return jsonify({
        "message": "Site diary created",
        "site_diary_id": site_diary.id,
        "day_count": site_diary.day_count
    }), 201


@site_diary_bp.route('/<int:project_id>/site_diaries', methods=['GET'])
def get_site_diaries(project_id):
    project = Project.query.get_or_404(project_id)
    diaries = SiteDiary.query.filter_by(project_id=project.id).all()

    results = []
    for sd in diaries:
        worker_list = [{
            "id": w.id,
            "type": w.worker_type,
            "quantity": w.quantity
        } for w in sd.workers]

        machine_list = [{
            "id": m.id,
            "type": m.machine_type,
            "quantity": m.quantity
        } for m in sd.machines]

        staff_list = [{
            "id": st.id,
            "name": st.name,
            "role": st.role
        } for st in sd.staffs]

        results.append({
            "id": sd.id,
            "report_date": sd.report_date.isoformat() if sd.report_date else None,
            "weather_morning": sd.weather_morning,
            "weather_noon": sd.weather_noon,
            "day_count": sd.day_count,
            "summary": sd.summary,
            "workers": worker_list,
            "machines": machine_list,
            "staffs": staff_list
        })

    return jsonify(results), 200


@site_diary_bp.route('/<int:project_id>/site_diaries/<int:diary_id>', methods=['PUT'])
def update_site_diary(project_id, diary_id):
    site_diary = SiteDiary.query.filter_by(project_id=project_id, id=diary_id).first_or_404()
    data = request.json

    report_date_str = data.get('report_date')
    if report_date_str:
        site_diary.report_date = datetime.strptime(report_date_str, '%Y-%m-%d').date()
    else:
        site_diary.report_date = None

    site_diary.weather_morning = data.get('weather_morning', '')
    site_diary.weather_noon = data.get('weather_noon', '')
    site_diary.day_count = data.get('day_count') or None
    site_diary.summary = data.get('summary', '')

    SiteDiaryWorker.query.filter_by(site_diary_id=site_diary.id).delete()
    for worker_type, quantity in data.get('workers', {}).items():
        db.session.add(SiteDiaryWorker(
            site_diary_id=site_diary.id,
            worker_type=worker_type,
            quantity=quantity
        ))

    SiteDiaryMachine.query.filter_by(site_diary_id=site_diary.id).delete()
    for machine_type, quantity in data.get('machines', {}).items():
        db.session.add(SiteDiaryMachine(
            site_diary_id=site_diary.id,
            machine_type=machine_type,
            quantity=quantity
        ))

    site_diary.staffs.clear()
    for sid in data.get('staff_ids', []):
        staff_obj = Staff.query.get(sid)
        if staff_obj:
            site_diary.staffs.append(staff_obj)

    auto_compute_day_count_if_needed(site_diary)
    db.session.commit()

    return jsonify({
        "message": "Site diary updated",
        "day_count": site_diary.day_count
    }), 200


@site_diary_bp.route('/<int:project_id>/site_diaries/<int:diary_id>', methods=['DELETE'])
def delete_site_diary(project_id, diary_id):
    site_diary = SiteDiary.query.filter_by(project_id=project_id, id=diary_id).first_or_404()
    db.session.delete(site_diary)
    db.session.commit()
    return jsonify({"message": "Site diary deleted"}), 200


@site_diary_bp.route('/<int:project_id>/site_diaries/<int:diary_id>/download_report', methods=['GET'])
def download_site_diary_report(project_id, diary_id):
    """
    依照 ?file= 參數決定下載哪個檔案：
      - xlsx   => "YYYYMMDD_daily_report.xlsx"
      - sheet1 => "YYYYMMDD每日施工進度報告表.pdf"
      - sheet2 => "YYYYMMDD施工人員紀錄表.pdf"
    """
    site_diary = SiteDiary.query.filter_by(project_id=project_id, id=diary_id).first_or_404()
    file_type = request.args.get('file', 'xlsx')

    date_str = site_diary.report_date.strftime("%Y%m%d") if site_diary.report_date else "noDate"

    try:
        if file_type == 'xlsx':
            xlsx_path = generate_diary_xlsx_only(site_diary)
            download_name = f"{date_str}_daily_report.xlsx"
            return _send_file_with_utf8_filename(xlsx_path, download_name)

        elif file_type in ('sheet1', 'sheet2'):
            pdf_path = generate_diary_pdf_sheet(site_diary, sheet_name=file_type)
            if file_type == 'sheet1':
                # 假設想要英文化 fallback
                download_name = f"{date_str}每日施工進度報告表.pdf"  # 中文
                ascii_fallback = f"{date_str}_daily_report.pdf"     # 英文
            else:
                download_name = f"{date_str}施工人員紀錄表.pdf"      # 中文
                ascii_fallback = f"{date_str}_worker_log.pdf"       # 英文

            return _send_file_with_utf8_filename(pdf_path, download_name, ascii_fallback)
        else:
            return jsonify({"error": f"Unknown file type '{file_type}'"}), 400

    except FileNotFoundError as e:
        return jsonify({"error": f"FileNotFoundError: {e}"}), 404
    except PermissionError as e:
        return jsonify({"error": f"PermissionError: {e}"}), 403
    except Exception as e:
        tb = traceback.format_exc()
        return jsonify({"error": str(e), "traceback": tb}), 500


def _send_file_with_utf8_filename(
    file_path: str,
    full_chinese_name: str,
    ascii_fallback: str = None
) -> Response:
    """
    改良後: 若有指定 ascii_fallback，則 filename="ascii_fallback";
    否則就自動做個 fallback(全部非 ASCII 改成 '_').
    而 filename*=UTF-8''... 用 full_chinese_name (URL-encoded)。
    """
    response = send_file(file_path, as_attachment=True)

    if not ascii_fallback:
        # 若沒傳入 fallback => 將所有非 ASCII 改成 _
        # (含中文皆視為非 ASCII)
        ascii_fallback = "".join(ch if ch.isalnum() or ch in ("-", "_", ".") else "_" 
                                 for ch in full_chinese_name)

    # quote() 後只包含 ASCII 範圍字元
    utf8_quoted = quote(full_chinese_name, encoding="utf-8")

    disposition_value = (
        f'attachment; filename="{ascii_fallback}"; '
        f'filename*=UTF-8\'\'{utf8_quoted}'
    )
    # encode+decode 防止任何潛在的超 ASCII 字元
    safe_disposition = disposition_value.encode('latin-1', 'replace').decode('latin-1')
    response.headers["Content-Disposition"] = safe_disposition

    return response


@site_diary_bp.route('/<int:project_id>/site_diaries/last', methods=['GET'])
def get_last_site_diary(project_id):
    project = Project.query.get_or_404(project_id)
    last_diary = (SiteDiary.query
                  .filter_by(project_id=project.id)
                  .order_by(SiteDiary.report_date.desc(), SiteDiary.id.desc())
                  .first())
    if not last_diary:
        return jsonify({}), 200

    worker_list = [{
        "id": w.id,
        "type": w.worker_type,
        "quantity": w.quantity
    } for w in last_diary.workers]

    machine_list = [{
        "id": m.id,
        "type": m.machine_type,
        "quantity": m.quantity
    } for m in last_diary.machines]

    staff_list = [{
        "id": st.id,
        "name": st.name,
        "role": st.role
    } for st in last_diary.staffs]

    result = {
        "id": last_diary.id,
        "report_date": last_diary.report_date.isoformat() if last_diary.report_date else None,
        "weather_morning": last_diary.weather_morning,
        "weather_noon": last_diary.weather_noon,
        "day_count": last_diary.day_count,
        "summary": last_diary.summary,
        "workers": worker_list,
        "machines": machine_list,
        "staffs": staff_list
    }
    return jsonify(result), 200

================================================================================

backend/site_diary/services.py

================================================================================
# backend/site_diary/services.py

import os
import tempfile
import shutil
import subprocess
from datetime import datetime
from typing import Dict
import platform
from shutil import which

from flask import current_app
from openpyxl import load_workbook
from openpyxl.styles import Alignment

from backend.project_management.models import Project, db
from backend.site_diary.models import SiteDiary


def auto_compute_day_count_if_needed(site_diary: SiteDiary):
    """
    若使用者未手動指定 day_count，則自動計算為該專案已存在的最大 day_count + 1。
    若尚無任何紀錄則從 1 開始。
    """
    if site_diary.day_count is not None:
        return

    max_day_count = db.session.query(db.func.max(SiteDiary.day_count)) \
                              .filter_by(project_id=site_diary.project_id).scalar()
    if max_day_count:
        site_diary.day_count = max_day_count + 1
    else:
        site_diary.day_count = 1


def generate_diary_xlsx_only(site_diary: SiteDiary) -> str:
    """
    產生/填寫 daily_report.xlsx 後，回傳填好的暫存 XLSX 檔路徑。
    同時依需求設定各 Sheet 之列印範圍（整份工作簿都會包含）。
    """
    project = Project.query.get(site_diary.project_id)
    if not project:
        raise ValueError("Project not found.")

    # 找到 daily_report.xlsx 模板位置 (不寫死路徑)
    template_path = os.path.join(
        current_app.root_path,
        'site_diary',
        'templates',
        'daily_report.xlsx'
    )
    if not os.path.isfile(template_path):
        raise FileNotFoundError(
            f"daily_report.xlsx not found at: {template_path}"
        )

    # 在系統臨時資料夾中建立子資料夾
    temp_dir = tempfile.mkdtemp(prefix="diary_xlsx_")

    # 以報表日期組出檔名
    date_str_for_filename = "noDate"
    if site_diary.report_date:
        date_str_for_filename = site_diary.report_date.strftime("%Y%m%d")

    filled_xlsx_path = os.path.join(
        temp_dir,
        f"{date_str_for_filename}_daily_report.xlsx"
    )

    # 先把模板拷貝到暫存檔
    shutil.copy(template_path, filled_xlsx_path)

    # 打開並填寫
    wb = load_workbook(filled_xlsx_path)

    # 準備填入之資料
    date_str = (site_diary.report_date.strftime("%Y-%m-%d")
                if site_diary.report_date else "")
    project_name = project.name or ""
    project_job_number = project.job_number or ""
    contractor_name = project.contractor or ""
    day_count_str = str(site_diary.day_count) if site_diary.day_count else ""
    summary_str = site_diary.summary or ""
    weather_morning = site_diary.weather_morning or ""
    weather_noon = site_diary.weather_noon or ""

    if project.start_date:
        start_date_str = project.start_date.strftime("%Y-%m-%d")
    else:
        start_date_str = ""

    if project.duration_days:
        if project.duration_type == 'business':
            duration_str = f"{project.duration_days}工作天"
        else:
            duration_str = f"{project.duration_days}天"
    else:
        duration_str = ""

    # 映射工人/機器到對應的儲存格
    worker_map = {
        "地盤總管": "D19",
        "工程師":  "D20",
        "管工":    "D21",
        "平水員":  "D22",
        "燒焊焊工": "D23",
        "機手":    "D24",
        "泥水工":  "D25",
        "紮鐵工":  "D26",
        "木板工":  "D27",
        "電工":    "D28",
        "水喉工":  "D29",
        "雜工":    "D30",
    }
    machine_map = {
        "挖掘機": "G19",
        "發電機": "G20",
        "風機":   "G21",
        "泥頭車": "G22",
        "吊機":   "G23",
        "機炮":   "G24",
        "屈鐵機": "G25",
        "風車鋸": "G26",
    }

    # Sheet1: "每日施工進度報告表"
    if "每日施工進度報告表" in wb.sheetnames:
        sh1 = wb["每日施工進度報告表"]

        # 基本欄位
        sh1["C2"].value = date_str
        sh1["C2"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["K2"].value = start_date_str
        sh1["K2"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["D4"].value = project_name
        sh1["D4"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["D5"].value = project_job_number
        sh1["D5"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["D6"].value = contractor_name
        sh1["D6"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["E7"].value = weather_morning
        sh1["E7"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["H7"].value = weather_noon
        sh1["H7"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["D8"].value = duration_str
        sh1["D8"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["J8"].value = day_count_str
        sh1["J8"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["B10"].value = summary_str
        sh1["B10"].alignment = Alignment(horizontal='center', vertical='center')

        # 工人數量
        worker_dict = {w.worker_type: w.quantity for w in site_diary.workers}
        for w_type, cell_ref in worker_map.items():
            qty = worker_dict.get(w_type, 0)
            cell_obj = sh1[cell_ref]
            cell_obj.value = str(qty) if qty else ""
            cell_obj.alignment = Alignment(horizontal='center', vertical='center')

        # 機器數量
        machine_dict = {m.machine_type: m.quantity for m in site_diary.machines}
        for m_type, cell_ref in machine_map.items():
            qty = machine_dict.get(m_type, 0)
            cell_obj = sh1[cell_ref]
            cell_obj.value = str(qty) if qty else ""
            cell_obj.alignment = Alignment(horizontal='center', vertical='center')

        # 列印範圍
        sh1.print_area = "A1:L46"

    # Sheet2: "每日本地工人及外地勞工施工人員紀錄表"
    if "每日本地工人及外地勞工施工人員紀錄表" in wb.sheetnames:
        sh2 = wb["每日本地工人及外地勞工施工人員紀錄表"]
        b3_date = (site_diary.report_date.strftime("%Y/%m/%d")
                   if site_diary.report_date else "")
        sh2["B3"].value = b3_date
        sh2["B3"].alignment = Alignment(horizontal='center', vertical='center')

        sh2["B6"].value = project_name
        sh2["B6"].alignment = Alignment(horizontal='center', vertical='center')

        sh2["B7"].value = project_job_number
        sh2["B7"].alignment = Alignment(horizontal='center', vertical='center')

        sh2["B8"].value = contractor_name
        sh2["B8"].alignment = Alignment(horizontal='center', vertical='center')

        # 列印範圍
        sh2.print_area = "A1:E40"

    wb.save(filled_xlsx_path)
    wb.close()

    return filled_xlsx_path


def generate_diary_pdf_sheet(site_diary: SiteDiary, sheet_name: str) -> str:
    """
    依照 sheet_name ('sheet1' or 'sheet2')，只輸出對應工作表的 PDF：
      - sheet1 => "每日施工進度報告表.pdf"
      - sheet2 => "每日本地工人及外地勞工施工人員紀錄表.pdf"
    並以 --convert-to pdf:calc_pdf_Export + --infilter="Calc Office Open XML"
    匯出。若子程序執行失敗，印出 debug log 以便排查。

    ★ 轉檔完成後，我們會將 LibreOffice 輸出的檔名改為程式預期的 pdf_path，
      避免 "找不到輸出檔" 的狀況。
    """
    project = Project.query.get(site_diary.project_id)
    if not project:
        raise ValueError("Project not found.")

    # 先用 XLSX 產生整本工作簿
    xlsx_path = generate_diary_xlsx_only(site_diary)
    temp_dir = os.path.dirname(xlsx_path)

    date_str = "noDate"
    if site_diary.report_date:
        date_str = site_diary.report_date.strftime("%Y%m%d")

    if sheet_name == 'sheet1':
        pdf_filename = f"{date_str}每日施工進度報告表.pdf"
        target_sheet_name = "每日施工進度報告表"
    else:
        pdf_filename = f"{date_str}施工人員紀錄表.pdf"
        target_sheet_name = "每日本地工人及外地勞工施工人員紀錄表"

    # 程式想要最終回傳的 PDF 路徑
    pdf_path = os.path.join(temp_dir, pdf_filename)

    # 另存一份只保留指定工作表的 XLSX
    single_sheet_xlsx = os.path.join(temp_dir, f"{date_str}_{sheet_name}_only.xlsx")
    shutil.copy(xlsx_path, single_sheet_xlsx)

    wb = load_workbook(single_sheet_xlsx)
    if target_sheet_name not in wb.sheetnames:
        wb.close()
        raise RuntimeError(f"目標工作表 '{target_sheet_name}' 不存在")

    for sn in wb.sheetnames:
        if sn != target_sheet_name:
            wb.remove(wb[sn])
    wb.save(single_sheet_xlsx)
    wb.close()

    lo_exec = get_libreoffice_cmd()

    # 設定輸入 & 輸出 filter
    input_filter = "Calc Office Open XML"
    output_filter = "pdf:calc_pdf_Export"

    # 根據作業系統，組合子程序指令
    if platform.system().lower().startswith("win"):
        cmd = (
            f'"{lo_exec}" --headless --convert-to "{output_filter}" '
            f'--infilter="{input_filter}" "{single_sheet_xlsx}" --outdir "{temp_dir}"'
        )
        print("==== DEBUG => LibreOffice command (Windows) ====")
        print(cmd)
        try:
            result = subprocess.run(cmd, shell=True, check=True, capture_output=True)
            print("==== DEBUG => LibreOffice stdout ====")
            print(result.stdout.decode('utf-8', errors='replace'))
            print("==== DEBUG => LibreOffice stderr ====")
            print(result.stderr.decode('utf-8', errors='replace'))
        except subprocess.CalledProcessError as e:
            print("==== DEBUG => LibreOffice ERROR return code:", e.returncode)
            print("==== DEBUG => LibreOffice ERROR output ====")
            if e.stderr:
                print(e.stderr.decode('utf-8', errors='replace'))
            raise RuntimeError(f"LibreOffice PDF conversion failed: {e}") from e
    else:
        cmd_list = [
            lo_exec, "--headless",
            "--convert-to", output_filter,
            f'--infilter={input_filter}',
            single_sheet_xlsx,
            "--outdir", temp_dir
        ]
        print("==== DEBUG => LibreOffice command (Non-Windows) ====")
        print(cmd_list)
        try:
            result = subprocess.run(cmd_list, shell=False, check=True, capture_output=True)
            print("==== DEBUG => LibreOffice stdout ====")
            print(result.stdout.decode('utf-8', errors='replace'))
            print("==== DEBUG => LibreOffice stderr ====")
            print(result.stderr.decode('utf-8', errors='replace'))
        except subprocess.CalledProcessError as e:
            print("==== DEBUG => LibreOffice ERROR return code:", e.returncode)
            print("==== DEBUG => LibreOffice ERROR output ====")
            if e.stderr:
                print(e.stderr.decode('utf-8', errors='replace'))
            raise RuntimeError(f"LibreOffice PDF conversion failed: {e}") from e

    # ★ LibreOffice 轉檔後實際產生的檔案，預設會以 XLSX 同名但副檔名 .pdf
    #   例如 single_sheet_xlsx = C:\...\20250204_sheet1_only.xlsx
    #   則輸出多半是 C:\...\20250204_sheet1_only.pdf
    generated_pdf_name = os.path.splitext(single_sheet_xlsx)[0] + ".pdf"

    # 檔案若確實存在，就將它改名成我們想要的 pdf_path
    if os.path.isfile(generated_pdf_name):
        os.rename(generated_pdf_name, pdf_path)
    else:
        raise RuntimeError(f"PDF 轉檔失敗：找不到 {generated_pdf_name}")

    # 檢查改名後的新檔名是否存在
    if not os.path.isfile(pdf_path):
        raise RuntimeError(f"PDF 轉檔失敗：找不到 {pdf_path}")

    return pdf_path


def get_libreoffice_cmd() -> str:
    """
    智能取得 LibreOffice 執行檔：
      1) 若有環境變數 LIBREOFFICE_PATH（指向檔案或資料夾）則使用
      2) 否則嘗試於 PATH 搜尋 'soffice' 或 'libreoffice'
      3) 全部找不到則拋錯
    """
    custom_path = os.environ.get("LIBREOFFICE_PATH")
    if custom_path:
        # 如果是檔案 => 直接用
        if os.path.isfile(custom_path):
            return custom_path
        # 若只是資料夾，嘗試補上 soffice / libreoffice
        soffice_path = os.path.join(custom_path, "soffice")
        libreoffice_path = os.path.join(custom_path, "libreoffice")
        if os.path.isfile(soffice_path):
            return soffice_path
        if os.path.isfile(libreoffice_path):
            return libreoffice_path
        raise RuntimeError(f"LIBREOFFICE_PATH 無效: {custom_path}")

    # 無自定義 => 從 PATH 中找 soffice / libreoffice
    for candidate in ("soffice", "libreoffice"):
        exe_path = which(candidate)
        if exe_path:
            return exe_path

    raise RuntimeError(
        "系統上找不到 soffice 或 libreoffice，可執行檔未安裝或未加入 PATH。"
        "請安裝 LibreOffice 或於環境變數 LIBREOFFICE_PATH 指定執行檔路徑。"
    )

================================================================================

backend/staff_management/models.py

================================================================================
# backend/staff_management/models.py
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

from backend.project_management.models import db

class Staff(db.Model):
    """
    施工人員 (Staff)，用來全域管理可用人員
    """
    __tablename__ = 'staff'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)  # 人員姓名
    role = db.Column(db.String(100), nullable=True)    # 角色、職稱(可選)

    # 與 SiteDiary 的多對多關係
    site_diaries = db.relationship('SiteDiary',
                                   secondary='site_diary_staff',
                                   back_populates='staffs',
                                   lazy=True)


class SiteDiaryStaff(db.Model):
    """
    替代原本 DailyReportStaff：中介表 (site_diary_staff)
    """
    __tablename__ = 'site_diary_staff'

    site_diary_id = db.Column(db.Integer, db.ForeignKey('site_diaries.id'), primary_key=True)
    staff_id = db.Column(db.Integer, db.ForeignKey('staff.id'), primary_key=True)

================================================================================

backend/staff_management/routes.py

================================================================================
# backend/staff_management/routes.py
from flask import Blueprint, request, jsonify

# 改用 from backend.project_management.models
from backend.project_management.models import db
from .models import Staff

staff_bp = Blueprint('staff_bp', __name__)

@staff_bp.route('', methods=['GET'])
def list_staff():
    staff_list = Staff.query.all()
    results = []
    for s in staff_list:
        results.append({
            "id": s.id,
            "name": s.name,
            "role": s.role
        })
    return jsonify(results), 200

@staff_bp.route('', methods=['POST'])
def create_staff():
    data = request.json
    staff = Staff(
        name=data['name'],
        role=data.get('role', '')
    )
    db.session.add(staff)
    db.session.commit()
    return jsonify({
        "message": "Staff created",
        "staff_id": staff.id
    }), 201

# ★ 新增：刪除人員
@staff_bp.route('/<int:staff_id>', methods=['DELETE'])
def delete_staff(staff_id):
    staff = Staff.query.get_or_404(staff_id)
    db.session.delete(staff)
    db.session.commit()
    return jsonify({"message": "Staff deleted"}), 200

================================================================================

frontend/index.html

================================================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Project Management System</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- 
      已移除原本的 <script src="https://unpkg.com/vue@3/..."> 
      及所有對 PrimeVue 的 CDN 引用，改為讓 Vite + node_modules 管理。
    -->
  </head>
  <body>
    <div id="app"></div>
    <!-- 透過 Vite 啟動的入口 -->
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>

================================================================================

frontend/package-lock.json

================================================================================
{
  "name": "frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "frontend",
      "version": "0.0.0",
      "dependencies": {
        "axios": "^1.7.9",
        "sass": "^1.83.4",
        "vue": "^3.5.13",
        "vue-router": "^4.5.0",
        "vuetify": "^3.7.11"
      },
      "devDependencies": {
        "@types/node": "^22.13.0",
        "@vitejs/plugin-vue": "^5.2.1",
        "@vue/tsconfig": "^0.7.0",
        "typescript": "~5.6.2",
        "vite": "^6.0.5",
        "vue-tsc": "^2.2.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
      "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
      "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.26.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.26.7.tgz",
      "integrity": "sha512-kEvgGGgEjRUutvdVvZhbn/BxVt+5VSpwXz1j3WYXQbXDo8KzFOPNG2GQbdAiNq8g6wn1yKk7C/qrke03a84V+w==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.26.7"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.26.7",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.26.7.tgz",
      "integrity": "sha512-t8kDRGrKXyp6+tjUh7hw2RLyclsW4TRoRvRHtSyAX9Bb5ldlFh+90YAYY6awRXrlB4G5G2izNeGySpATlFzmOg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.25.9",
        "@babel/helper-validator-identifier": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.24.2.tgz",
      "integrity": "sha512-thpVCb/rhxE/BnMLQ7GReQLLN8q9qbHmI55F4489/ByVg2aQaQ6kbcLb6FHkocZzQhxc4gx0sCk0tJkKBFzDhA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.24.2.tgz",
      "integrity": "sha512-tmwl4hJkCfNHwFB3nBa8z1Uy3ypZpxqxfTQOcHX+xRByyYgunVbZ9MzUUfb0RxaHIMnbHagwAxuTL+tnNM+1/Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.24.2.tgz",
      "integrity": "sha512-cNLgeqCqV8WxfcTIOeL4OAtSmL8JjcN6m09XIgro1Wi7cF4t/THaWEa7eL5CMoMBdjoHOTh/vwTO/o2TRXIyzg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.24.2.tgz",
      "integrity": "sha512-B6Q0YQDqMx9D7rvIcsXfmJfvUYLoP722bgfBlO5cGvNVb5V/+Y7nhBE3mHV9OpxBf4eAS2S68KZztiPaWq4XYw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.24.2.tgz",
      "integrity": "sha512-kj3AnYWc+CekmZnS5IPu9D+HWtUI49hbnyqk0FLEJDbzCIQt7hg7ucF1SQAilhtYpIujfaHr6O0UHlzzSPdOeA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.24.2.tgz",
      "integrity": "sha512-WeSrmwwHaPkNR5H3yYfowhZcbriGqooyu3zI/3GGpF8AyUdsrrP0X6KumITGA9WOyiJavnGZUwPGvxvwfWPHIA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.24.2.tgz",
      "integrity": "sha512-UN8HXjtJ0k/Mj6a9+5u6+2eZ2ERD7Edt1Q9IZiB5UZAIdPnVKDoG7mdTVGhHJIeEml60JteamR3qhsr1r8gXvg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.24.2.tgz",
      "integrity": "sha512-TvW7wE/89PYW+IevEJXZ5sF6gJRDY/14hyIGFXdIucxCsbRmLUcjseQu1SyTko+2idmCw94TgyaEZi9HUSOe3Q==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.24.2.tgz",
      "integrity": "sha512-n0WRM/gWIdU29J57hJyUdIsk0WarGd6To0s+Y+LwvlC55wt+GT/OgkwoXCXvIue1i1sSNWblHEig00GBWiJgfA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.24.2.tgz",
      "integrity": "sha512-7HnAD6074BW43YvvUmE/35Id9/NB7BeX5EoNkK9obndmZBUk8xmJJeU7DwmUeN7tkysslb2eSl6CTrYz6oEMQg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.24.2.tgz",
      "integrity": "sha512-sfv0tGPQhcZOgTKO3oBE9xpHuUqguHvSo4jl+wjnKwFpapx+vUDcawbwPNuBIAYdRAvIDBfZVvXprIj3HA+Ugw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.24.2.tgz",
      "integrity": "sha512-CN9AZr8kEndGooS35ntToZLTQLHEjtVB5n7dl8ZcTZMonJ7CCfStrYhrzF97eAecqVbVJ7APOEe18RPI4KLhwQ==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.24.2.tgz",
      "integrity": "sha512-iMkk7qr/wl3exJATwkISxI7kTcmHKE+BlymIAbHO8xanq/TjHaaVThFF6ipWzPHryoFsesNQJPE/3wFJw4+huw==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.24.2.tgz",
      "integrity": "sha512-shsVrgCZ57Vr2L8mm39kO5PPIb+843FStGt7sGGoqiiWYconSxwTiuswC1VJZLCjNiMLAMh34jg4VSEQb+iEbw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.24.2.tgz",
      "integrity": "sha512-4eSFWnU9Hhd68fW16GD0TINewo1L6dRrB+oLNNbYyMUAeOD2yCK5KXGK1GH4qD/kT+bTEXjsyTCiJGHPZ3eM9Q==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.24.2.tgz",
      "integrity": "sha512-S0Bh0A53b0YHL2XEXC20bHLuGMOhFDO6GN4b3YjRLK//Ep3ql3erpNcPlEFed93hsQAjAQDNsvcK+hV90FubSw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.24.2.tgz",
      "integrity": "sha512-8Qi4nQcCTbLnK9WoMjdC9NiTG6/E38RNICU6sUNqK0QFxCYgoARqVqxdFmWkdonVsvGqWhmm7MO0jyTqLqwj0Q==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.24.2.tgz",
      "integrity": "sha512-wuLK/VztRRpMt9zyHSazyCVdCXlpHkKm34WUyinD2lzK07FAHTq0KQvZZlXikNWkDGoT6x3TD51jKQ7gMVpopw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.24.2.tgz",
      "integrity": "sha512-VefFaQUc4FMmJuAxmIHgUmfNiLXY438XrL4GDNV1Y1H/RW3qow68xTwjZKfj/+Plp9NANmzbH5R40Meudu8mmw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.24.2.tgz",
      "integrity": "sha512-YQbi46SBct6iKnszhSvdluqDmxCJA+Pu280Av9WICNwQmMxV7nLRHZfjQzwbPs3jeWnuAhE9Jy0NrnJ12Oz+0A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.24.2.tgz",
      "integrity": "sha512-+iDS6zpNM6EnJyWv0bMGLWSWeXGN/HTaF/LXHXHwejGsVi+ooqDfMCCTerNFxEkM3wYVcExkeGXNqshc9iMaOA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.24.2.tgz",
      "integrity": "sha512-hTdsW27jcktEvpwNHJU4ZwWFGkz2zRJUz8pvddmXPtXDzVKTTINmlmga3ZzwcuMpUvLw7JkLy9QLKyGpD2Yxig==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.24.2.tgz",
      "integrity": "sha512-LihEQ2BBKVFLOC9ZItT9iFprsE9tqjDjnbulhHoFxYQtQfai7qfluVODIYxt1PgdoyQkz23+01rzwNwYfutxUQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.24.2.tgz",
      "integrity": "sha512-q+iGUwfs8tncmFC9pcnD5IvRHAzmbwQ3GPS5/ceCyHdjXubwQWI12MKWSNSMYLJMq23/IUCvJMS76PDqXe1fxA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.24.2.tgz",
      "integrity": "sha512-7VTgWzgMGvup6aSqDPLiW5zHaxYJGTO4OokMjIlrCtf+VpEL+cXKtCvg723iguPYI5oaUNdS+/V7OU2gvXVWEg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "license": "MIT"
    },
    "node_modules/@parcel/watcher": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher/-/watcher-2.5.1.tgz",
      "integrity": "sha512-dfUnCxiN9H4ap84DvD2ubjw+3vUNpstxa0TneY/Paat8a3R4uQZDLSvWjmznAY/DoahqTHl9V46HF/Zs3F29pg==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "detect-libc": "^1.0.3",
        "is-glob": "^4.0.3",
        "micromatch": "^4.0.5",
        "node-addon-api": "^7.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      },
      "optionalDependencies": {
        "@parcel/watcher-android-arm64": "2.5.1",
        "@parcel/watcher-darwin-arm64": "2.5.1",
        "@parcel/watcher-darwin-x64": "2.5.1",
        "@parcel/watcher-freebsd-x64": "2.5.1",
        "@parcel/watcher-linux-arm-glibc": "2.5.1",
        "@parcel/watcher-linux-arm-musl": "2.5.1",
        "@parcel/watcher-linux-arm64-glibc": "2.5.1",
        "@parcel/watcher-linux-arm64-musl": "2.5.1",
        "@parcel/watcher-linux-x64-glibc": "2.5.1",
        "@parcel/watcher-linux-x64-musl": "2.5.1",
        "@parcel/watcher-win32-arm64": "2.5.1",
        "@parcel/watcher-win32-ia32": "2.5.1",
        "@parcel/watcher-win32-x64": "2.5.1"
      }
    },
    "node_modules/@parcel/watcher-android-arm64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-android-arm64/-/watcher-android-arm64-2.5.1.tgz",
      "integrity": "sha512-KF8+j9nNbUN8vzOFDpRMsaKBHZ/mcjEjMToVMJOhTozkDonQFFrRcfdLWn6yWKCmJKmdVxSgHiYvTCef4/qcBA==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-darwin-arm64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-darwin-arm64/-/watcher-darwin-arm64-2.5.1.tgz",
      "integrity": "sha512-eAzPv5osDmZyBhou8PoF4i6RQXAfeKL9tjb3QzYuccXFMQU0ruIc/POh30ePnaOyD1UXdlKguHBmsTs53tVoPw==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-darwin-x64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-darwin-x64/-/watcher-darwin-x64-2.5.1.tgz",
      "integrity": "sha512-1ZXDthrnNmwv10A0/3AJNZ9JGlzrF82i3gNQcWOzd7nJ8aj+ILyW1MTxVk35Db0u91oD5Nlk9MBiujMlwmeXZg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-freebsd-x64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-freebsd-x64/-/watcher-freebsd-x64-2.5.1.tgz",
      "integrity": "sha512-SI4eljM7Flp9yPuKi8W0ird8TI/JK6CSxju3NojVI6BjHsTyK7zxA9urjVjEKJ5MBYC+bLmMcbAWlZ+rFkLpJQ==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-arm-glibc": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-arm-glibc/-/watcher-linux-arm-glibc-2.5.1.tgz",
      "integrity": "sha512-RCdZlEyTs8geyBkkcnPWvtXLY44BCeZKmGYRtSgtwwnHR4dxfHRG3gR99XdMEdQ7KeiDdasJwwvNSF5jKtDwdA==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-arm-musl": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-arm-musl/-/watcher-linux-arm-musl-2.5.1.tgz",
      "integrity": "sha512-6E+m/Mm1t1yhB8X412stiKFG3XykmgdIOqhjWj+VL8oHkKABfu/gjFj8DvLrYVHSBNC+/u5PeNrujiSQ1zwd1Q==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-arm64-glibc": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-arm64-glibc/-/watcher-linux-arm64-glibc-2.5.1.tgz",
      "integrity": "sha512-LrGp+f02yU3BN9A+DGuY3v3bmnFUggAITBGriZHUREfNEzZh/GO06FF5u2kx8x+GBEUYfyTGamol4j3m9ANe8w==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-arm64-musl": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-arm64-musl/-/watcher-linux-arm64-musl-2.5.1.tgz",
      "integrity": "sha512-cFOjABi92pMYRXS7AcQv9/M1YuKRw8SZniCDw0ssQb/noPkRzA+HBDkwmyOJYp5wXcsTrhxO0zq1U11cK9jsFg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-x64-glibc": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-x64-glibc/-/watcher-linux-x64-glibc-2.5.1.tgz",
      "integrity": "sha512-GcESn8NZySmfwlTsIur+49yDqSny2IhPeZfXunQi48DMugKeZ7uy1FX83pO0X22sHntJ4Ub+9k34XQCX+oHt2A==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-x64-musl": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-x64-musl/-/watcher-linux-x64-musl-2.5.1.tgz",
      "integrity": "sha512-n0E2EQbatQ3bXhcH2D1XIAANAcTZkQICBPVaxMeaCVBtOpBZpWJuf7LwyWPSBDITb7In8mqQgJ7gH8CILCURXg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-win32-arm64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-win32-arm64/-/watcher-win32-arm64-2.5.1.tgz",
      "integrity": "sha512-RFzklRvmc3PkjKjry3hLF9wD7ppR4AKcWNzH7kXR7GUe0Igb3Nz8fyPwtZCSquGrhU5HhUNDr/mKBqj7tqA2Vw==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-win32-ia32": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-win32-ia32/-/watcher-win32-ia32-2.5.1.tgz",
      "integrity": "sha512-c2KkcVN+NJmuA7CGlaGD1qJh1cLfDnQsHjE89E60vUEMlqduHGCdCLJCID5geFVM0dOtA3ZiIO8BoEQmzQVfpQ==",
      "cpu": [
        "ia32"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-win32-x64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-win32-x64/-/watcher-win32-x64-2.5.1.tgz",
      "integrity": "sha512-9lHBdJITeNR++EvSQVUcaZoWupyHfXe1jZvGZ06O/5MflPcuPLtEphScIBL+AiCWBO46tDSHzWyD0uDmmZqsgA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.34.0.tgz",
      "integrity": "sha512-Eeao7ewDq79jVEsrtWIj5RNqB8p2knlm9fhR6uJ2gqP7UfbLrTrxevudVrEPDM7Wkpn/HpRC2QfazH7MXLz3vQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.34.0.tgz",
      "integrity": "sha512-yVh0Kf1f0Fq4tWNf6mWcbQBCLDpDrDEl88lzPgKhrgTcDrTtlmun92ywEF9dCjmYO3EFiSuJeeo9cYRxl2FswA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.34.0.tgz",
      "integrity": "sha512-gCs0ErAZ9s0Osejpc3qahTsqIPUDjSKIyxK/0BGKvL+Tn0n3Kwvj8BrCv7Y5sR1Ypz1K2qz9Ny0VvkVyoXBVUQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.34.0.tgz",
      "integrity": "sha512-aIB5Anc8hngk15t3GUkiO4pv42ykXHfmpXGS+CzM9CTyiWyT8HIS5ygRAy7KcFb/wiw4Br+vh1byqcHRTfq2tQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.34.0.tgz",
      "integrity": "sha512-kpdsUdMlVJMRMaOf/tIvxk8TQdzHhY47imwmASOuMajg/GXpw8GKNd8LNwIHE5Yd1onehNpcUB9jHY6wgw9nHQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.34.0.tgz",
      "integrity": "sha512-D0RDyHygOBCQiqookcPevrvgEarN0CttBecG4chOeIYCNtlKHmf5oi5kAVpXV7qs0Xh/WO2RnxeicZPtT50V0g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.34.0.tgz",
      "integrity": "sha512-mCIw8j5LPDXmCOW8mfMZwT6F/Kza03EnSr4wGYEswrEfjTfVsFOxvgYfuRMxTuUF/XmRb9WSMD5GhCWDe2iNrg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.34.0.tgz",
      "integrity": "sha512-AwwldAu4aCJPob7zmjuDUMvvuatgs8B/QiVB0KwkUarAcPB3W+ToOT+18TQwY4z09Al7G0BvCcmLRop5zBLTag==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.34.0.tgz",
      "integrity": "sha512-e7kDUGVP+xw05pV65ZKb0zulRploU3gTu6qH1qL58PrULDGxULIS0OSDQJLH7WiFnpd3ZKUU4VM3u/Z7Zw+e7Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.34.0.tgz",
      "integrity": "sha512-SXYJw3zpwHgaBqTXeAZ31qfW/v50wq4HhNVvKFhRr5MnptRX2Af4KebLWR1wpxGJtLgfS2hEPuALRIY3LPAAcA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.34.0.tgz",
      "integrity": "sha512-e5XiCinINCI4RdyU3sFyBH4zzz7LiQRvHqDtRe9Dt8o/8hTBaYpdPimayF00eY2qy5j4PaaWK0azRgUench6WQ==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.34.0.tgz",
      "integrity": "sha512-3SWN3e0bAsm9ToprLFBSro8nJe6YN+5xmB11N4FfNf92wvLye/+Rh5JGQtKOpwLKt6e61R1RBc9g+luLJsc23A==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.34.0.tgz",
      "integrity": "sha512-B1Oqt3GLh7qmhvfnc2WQla4NuHlcxAD5LyueUi5WtMc76ZWY+6qDtQYqnxARx9r+7mDGfamD+8kTJO0pKUJeJA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.34.0.tgz",
      "integrity": "sha512-UfUCo0h/uj48Jq2lnhX0AOhZPSTAq3Eostas+XZ+GGk22pI+Op1Y6cxQ1JkUuKYu2iU+mXj1QjPrZm9nNWV9rg==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.34.0.tgz",
      "integrity": "sha512-chZLTUIPbgcpm+Z7ALmomXW8Zh+wE2icrG+K6nt/HenPLmtwCajhQC5flNSk1Xy5EDMt/QAOz2MhzfOfJOLSiA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.34.0.tgz",
      "integrity": "sha512-jo0UolK70O28BifvEsFD/8r25shFezl0aUk2t0VJzREWHkq19e+pcLu4kX5HiVXNz5qqkD+aAq04Ct8rkxgbyQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.34.0.tgz",
      "integrity": "sha512-Vmg0NhAap2S54JojJchiu5An54qa6t/oKT7LmDaWggpIcaiL8WcWHEN6OQrfTdL6mQ2GFyH7j2T5/3YPEDOOGA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.34.0.tgz",
      "integrity": "sha512-CV2aqhDDOsABKHKhNcs1SZFryffQf8vK2XrxP6lxC99ELZAdvsDgPklIBfd65R8R+qvOm1SmLaZ/Fdq961+m7A==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.34.0.tgz",
      "integrity": "sha512-g2ASy1QwHP88y5KWvblUolJz9rN+i4ZOsYzkEwcNfaNooxNUXG+ON6F5xFo0NIItpHqxcdAyls05VXpBnludGw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/estree": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
      "integrity": "sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "22.13.0",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.0.tgz",
      "integrity": "sha512-ClIbNe36lawluuvq3+YYhnIN2CELi+6q8NpnM7PYp4hBn/TatfboPgVSm2rwKRfnV2M+Ty9GWDFI64KEe+kysA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.20.0"
      }
    },
    "node_modules/@vitejs/plugin-vue": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-5.2.1.tgz",
      "integrity": "sha512-cxh314tzaWwOLqVes2gnnCtvBDcM1UMdn+iFR+UjAn411dPT3tOmqrJjbMd7koZpMAmBM/GqeV4n9ge7JSiJJQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "peerDependencies": {
        "vite": "^5.0.0 || ^6.0.0",
        "vue": "^3.2.25"
      }
    },
    "node_modules/@volar/language-core": {
      "version": "2.4.11",
      "resolved": "https://registry.npmjs.org/@volar/language-core/-/language-core-2.4.11.tgz",
      "integrity": "sha512-lN2C1+ByfW9/JRPpqScuZt/4OrUUse57GLI6TbLgTIqBVemdl1wNcZ1qYGEo2+Gw8coYLgCy7SuKqn6IrQcQgg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@volar/source-map": "2.4.11"
      }
    },
    "node_modules/@volar/source-map": {
      "version": "2.4.11",
      "resolved": "https://registry.npmjs.org/@volar/source-map/-/source-map-2.4.11.tgz",
      "integrity": "sha512-ZQpmafIGvaZMn/8iuvCFGrW3smeqkq/IIh9F1SdSx9aUl0J4Iurzd6/FhmjNO5g2ejF3rT45dKskgXWiofqlZQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@volar/typescript": {
      "version": "2.4.11",
      "resolved": "https://registry.npmjs.org/@volar/typescript/-/typescript-2.4.11.tgz",
      "integrity": "sha512-2DT+Tdh88Spp5PyPbqhyoYavYCPDsqbHLFwcUI9K1NlY1YgUJvujGdrqUp0zWxnW7KWNTr3xSpMuv2WnaTKDAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@volar/language-core": "2.4.11",
        "path-browserify": "^1.0.1",
        "vscode-uri": "^3.0.8"
      }
    },
    "node_modules/@vue/compiler-core": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@vue/compiler-core/-/compiler-core-3.5.13.tgz",
      "integrity": "sha512-oOdAkwqUfW1WqpwSYJce06wvt6HljgY3fGeM9NcVA1HaYOij3mZG9Rkysn0OHuyUAGMbEbARIpsG+LPVlBJ5/Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.25.3",
        "@vue/shared": "3.5.13",
        "entities": "^4.5.0",
        "estree-walker": "^2.0.2",
        "source-map-js": "^1.2.0"
      }
    },
    "node_modules/@vue/compiler-dom": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@vue/compiler-dom/-/compiler-dom-3.5.13.tgz",
      "integrity": "sha512-ZOJ46sMOKUjO3e94wPdCzQ6P1Lx/vhp2RSvfaab88Ajexs0AHeV0uasYhi99WPaogmBlRHNRuly8xV75cNTMDA==",
      "license": "MIT",
      "dependencies": {
        "@vue/compiler-core": "3.5.13",
        "@vue/shared": "3.5.13"
      }
    },
    "node_modules/@vue/compiler-sfc": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@vue/compiler-sfc/-/compiler-sfc-3.5.13.tgz",
      "integrity": "sha512-6VdaljMpD82w6c2749Zhf5T9u5uLBWKnVue6XWxprDobftnletJ8+oel7sexFfM3qIxNmVE7LSFGTpv6obNyaQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.25.3",
        "@vue/compiler-core": "3.5.13",
        "@vue/compiler-dom": "3.5.13",
        "@vue/compiler-ssr": "3.5.13",
        "@vue/shared": "3.5.13",
        "estree-walker": "^2.0.2",
        "magic-string": "^0.30.11",
        "postcss": "^8.4.48",
        "source-map-js": "^1.2.0"
      }
    },
    "node_modules/@vue/compiler-ssr": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@vue/compiler-ssr/-/compiler-ssr-3.5.13.tgz",
      "integrity": "sha512-wMH6vrYHxQl/IybKJagqbquvxpWCuVYpoUJfCqFZwa/JY1GdATAQ+TgVtgrwwMZ0D07QhA99rs/EAAWfvG6KpA==",
      "license": "MIT",
      "dependencies": {
        "@vue/compiler-dom": "3.5.13",
        "@vue/shared": "3.5.13"
      }
    },
    "node_modules/@vue/compiler-vue2": {
      "version": "2.7.16",
      "resolved": "https://registry.npmjs.org/@vue/compiler-vue2/-/compiler-vue2-2.7.16.tgz",
      "integrity": "sha512-qYC3Psj9S/mfu9uVi5WvNZIzq+xnXMhOwbTFKKDD7b1lhpnn71jXSFdTQ+WsIEk0ONCd7VV2IMm7ONl6tbQ86A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "de-indent": "^1.0.2",
        "he": "^1.2.0"
      }
    },
    "node_modules/@vue/devtools-api": {
      "version": "6.6.4",
      "resolved": "https://registry.npmjs.org/@vue/devtools-api/-/devtools-api-6.6.4.tgz",
      "integrity": "sha512-sGhTPMuXqZ1rVOk32RylztWkfXTRhuS7vgAKv0zjqk8gbsHkJ7xfFf+jbySxt7tWObEJwyKaHMikV/WGDiQm8g==",
      "license": "MIT"
    },
    "node_modules/@vue/language-core": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@vue/language-core/-/language-core-2.2.0.tgz",
      "integrity": "sha512-O1ZZFaaBGkKbsRfnVH1ifOK1/1BUkyK+3SQsfnh6PmMmD4qJcTU8godCeA96jjDRTL6zgnK7YzCHfaUlH2r0Mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@volar/language-core": "~2.4.11",
        "@vue/compiler-dom": "^3.5.0",
        "@vue/compiler-vue2": "^2.7.16",
        "@vue/shared": "^3.5.0",
        "alien-signals": "^0.4.9",
        "minimatch": "^9.0.3",
        "muggle-string": "^0.4.1",
        "path-browserify": "^1.0.1"
      },
      "peerDependencies": {
        "typescript": "*"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@vue/reactivity": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@vue/reactivity/-/reactivity-3.5.13.tgz",
      "integrity": "sha512-NaCwtw8o48B9I6L1zl2p41OHo/2Z4wqYGGIK1Khu5T7yxrn+ATOixn/Udn2m+6kZKB/J7cuT9DbWWhRxqixACg==",
      "license": "MIT",
      "dependencies": {
        "@vue/shared": "3.5.13"
      }
    },
    "node_modules/@vue/runtime-core": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@vue/runtime-core/-/runtime-core-3.5.13.tgz",
      "integrity": "sha512-Fj4YRQ3Az0WTZw1sFe+QDb0aXCerigEpw418pw1HBUKFtnQHWzwojaukAs2X/c9DQz4MQ4bsXTGlcpGxU/RCIw==",
      "license": "MIT",
      "dependencies": {
        "@vue/reactivity": "3.5.13",
        "@vue/shared": "3.5.13"
      }
    },
    "node_modules/@vue/runtime-dom": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@vue/runtime-dom/-/runtime-dom-3.5.13.tgz",
      "integrity": "sha512-dLaj94s93NYLqjLiyFzVs9X6dWhTdAlEAciC3Moq7gzAc13VJUdCnjjRurNM6uTLFATRHexHCTu/Xp3eW6yoog==",
      "license": "MIT",
      "dependencies": {
        "@vue/reactivity": "3.5.13",
        "@vue/runtime-core": "3.5.13",
        "@vue/shared": "3.5.13",
        "csstype": "^3.1.3"
      }
    },
    "node_modules/@vue/server-renderer": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@vue/server-renderer/-/server-renderer-3.5.13.tgz",
      "integrity": "sha512-wAi4IRJV/2SAW3htkTlB+dHeRmpTiVIK1OGLWV1yeStVSebSQQOwGwIq0D3ZIoBj2C2qpgz5+vX9iEBkTdk5YA==",
      "license": "MIT",
      "dependencies": {
        "@vue/compiler-ssr": "3.5.13",
        "@vue/shared": "3.5.13"
      },
      "peerDependencies": {
        "vue": "3.5.13"
      }
    },
    "node_modules/@vue/shared": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@vue/shared/-/shared-3.5.13.tgz",
      "integrity": "sha512-/hnE/qP5ZoGpol0a5mDi45bOd7t3tjYJBjsgCsivow7D48cJeV5l05RD82lPqi7gRiphZM37rnhW1l6ZoCNNnQ==",
      "license": "MIT"
    },
    "node_modules/@vue/tsconfig": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/@vue/tsconfig/-/tsconfig-0.7.0.tgz",
      "integrity": "sha512-ku2uNz5MaZ9IerPPUyOHzyjhXoX2kVJaVf7hL315DC17vS6IiZRmmCPfggNbU16QTvM80+uYYy3eYJB59WCtvg==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "typescript": "5.x",
        "vue": "^3.4.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        },
        "vue": {
          "optional": true
        }
      }
    },
    "node_modules/alien-signals": {
      "version": "0.4.14",
      "resolved": "https://registry.npmjs.org/alien-signals/-/alien-signals-0.4.14.tgz",
      "integrity": "sha512-itUAVzhczTmP2U5yX67xVpsbbOiquusbWVyA9N+sy6+r6YVbFkahXvNCeEPWEOMhwDYwbVbGHFkVL03N9I5g+Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.7.9",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.9.tgz",
      "integrity": "sha512-LhLcE7Hbiryz8oMDdDptSrWowmB4Bl6RCt6sIJKpRB4XtVf0iEgewX3au/pJqm+Py1kCASkb/FFKjxQaLtxJvw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chokidar": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-4.0.3.tgz",
      "integrity": "sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==",
      "license": "MIT",
      "dependencies": {
        "readdirp": "^4.0.1"
      },
      "engines": {
        "node": ">= 14.16.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/de-indent": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/de-indent/-/de-indent-1.0.2.tgz",
      "integrity": "sha512-e/1zu3xH5MQryN2zdVaF0OrdNLUbvWxzMbi+iNA6Bky7l1RoP8a2fIbRocyHclXt/arDrrR6lL3TqFD9pMQTsg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/detect-libc": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-1.0.3.tgz",
      "integrity": "sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==",
      "license": "Apache-2.0",
      "optional": true,
      "bin": {
        "detect-libc": "bin/detect-libc.js"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/entities": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
      "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/esbuild": {
      "version": "0.24.2",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.24.2.tgz",
      "integrity": "sha512-+9egpBW8I3CD5XPe0n6BfT5fxLzxrlDzqydF3aviG+9ni1lDC/OvMHcxqEFV0+LANZG5R1bFMWfUrjVsdwxJvA==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.24.2",
        "@esbuild/android-arm": "0.24.2",
        "@esbuild/android-arm64": "0.24.2",
        "@esbuild/android-x64": "0.24.2",
        "@esbuild/darwin-arm64": "0.24.2",
        "@esbuild/darwin-x64": "0.24.2",
        "@esbuild/freebsd-arm64": "0.24.2",
        "@esbuild/freebsd-x64": "0.24.2",
        "@esbuild/linux-arm": "0.24.2",
        "@esbuild/linux-arm64": "0.24.2",
        "@esbuild/linux-ia32": "0.24.2",
        "@esbuild/linux-loong64": "0.24.2",
        "@esbuild/linux-mips64el": "0.24.2",
        "@esbuild/linux-ppc64": "0.24.2",
        "@esbuild/linux-riscv64": "0.24.2",
        "@esbuild/linux-s390x": "0.24.2",
        "@esbuild/linux-x64": "0.24.2",
        "@esbuild/netbsd-arm64": "0.24.2",
        "@esbuild/netbsd-x64": "0.24.2",
        "@esbuild/openbsd-arm64": "0.24.2",
        "@esbuild/openbsd-x64": "0.24.2",
        "@esbuild/sunos-x64": "0.24.2",
        "@esbuild/win32-arm64": "0.24.2",
        "@esbuild/win32-ia32": "0.24.2",
        "@esbuild/win32-x64": "0.24.2"
      }
    },
    "node_modules/estree-walker": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==",
      "license": "MIT"
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.1.tgz",
      "integrity": "sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/he": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
      "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "he": "bin/he"
      }
    },
    "node_modules/immutable": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/immutable/-/immutable-5.0.3.tgz",
      "integrity": "sha512-P8IdPQHq3lA1xVeBRi5VPqUm5HDgKnx0Ru51wZz5mjxHr5n3RWhjIpOFU7ybkUxfB+5IToy+OLaHYDBIWsv+uw==",
      "license": "MIT"
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/magic-string": {
      "version": "0.30.17",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
      "integrity": "sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/muggle-string": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/muggle-string/-/muggle-string-0.4.1.tgz",
      "integrity": "sha512-VNTrAak/KhO2i8dqqnqnAHOa3cYBwXEZe9h+D5h/1ZqFSTEFHdM65lR7RoIqq3tBBYavsOXV84NoHXZ0AkPyqQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.8",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.8.tgz",
      "integrity": "sha512-WNLf5Sd8oZxOm+TzppcYk8gVOgP+l58xNy58D0nbUnOxOWRWvlcCV4kUF7ltmI6PsrLl/BgKEyS4mqsGChFN0w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/node-addon-api": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-7.1.1.tgz",
      "integrity": "sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/path-browserify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-browserify/-/path-browserify-1.0.1.tgz",
      "integrity": "sha512-b7uo2UCUOYZcnF/3ID0lulOJi/bafxa1xPe7ZPsammBSpjSWQkjNxlt635YGS2MiR9GjvuXCtz2emr3jbsz98g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.1",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.1.tgz",
      "integrity": "sha512-6oz2beyjc5VMn/KV1pPw8fliQkhBXrVn1Z3TVyqZxU8kZpzEKhBdmCFqI6ZbmGtamQvQGuU1sgPTk8ZrXDD7jQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.8",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/readdirp": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-4.1.1.tgz",
      "integrity": "sha512-h80JrZu/MHUZCyHu5ciuoI0+WxsCxzxJTILn6Fs8rxSnFPh+UVHYfeIxK1nVGugMqkfC4vJcBOYbkfkwYK0+gw==",
      "license": "MIT",
      "engines": {
        "node": ">= 14.18.0"
      },
      "funding": {
        "type": "individual",
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/rollup": {
      "version": "4.34.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.34.0.tgz",
      "integrity": "sha512-+4C/cgJ9w6sudisA0nZz0+O7lTP9a3CzNLsoDwaRumM8QHwghUsu6tqHXiTmNUp/rqNiM14++7dkzHDyCRs0Jg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.6"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.34.0",
        "@rollup/rollup-android-arm64": "4.34.0",
        "@rollup/rollup-darwin-arm64": "4.34.0",
        "@rollup/rollup-darwin-x64": "4.34.0",
        "@rollup/rollup-freebsd-arm64": "4.34.0",
        "@rollup/rollup-freebsd-x64": "4.34.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.34.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.34.0",
        "@rollup/rollup-linux-arm64-gnu": "4.34.0",
        "@rollup/rollup-linux-arm64-musl": "4.34.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.34.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.34.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.34.0",
        "@rollup/rollup-linux-s390x-gnu": "4.34.0",
        "@rollup/rollup-linux-x64-gnu": "4.34.0",
        "@rollup/rollup-linux-x64-musl": "4.34.0",
        "@rollup/rollup-win32-arm64-msvc": "4.34.0",
        "@rollup/rollup-win32-ia32-msvc": "4.34.0",
        "@rollup/rollup-win32-x64-msvc": "4.34.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/sass": {
      "version": "1.83.4",
      "resolved": "https://registry.npmjs.org/sass/-/sass-1.83.4.tgz",
      "integrity": "sha512-B1bozCeNQiOgDcLd33e2Cs2U60wZwjUUXzh900ZyQF5qUasvMdDZYbQ566LJu7cqR+sAHlAfO6RMkaID5s6qpA==",
      "license": "MIT",
      "dependencies": {
        "chokidar": "^4.0.0",
        "immutable": "^5.0.2",
        "source-map-js": ">=0.6.2 <2.0.0"
      },
      "bin": {
        "sass": "sass.js"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "optionalDependencies": {
        "@parcel/watcher": "^2.4.1"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.6.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.6.3.tgz",
      "integrity": "sha512-hjcS1mhfuyi4WW8IWtjP7brDrG2cuDZukyrYrSauoXGNgx0S7zceP07adYkJycEr56BOUTNPzbInooiN3fn1qw==",
      "devOptional": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "6.20.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz",
      "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/vite": {
      "version": "6.0.11",
      "resolved": "https://registry.npmjs.org/vite/-/vite-6.0.11.tgz",
      "integrity": "sha512-4VL9mQPKoHy4+FE0NnRE/kbY51TOfaknxAjt3fJbGJxhIpBZiqVzlZDEesWWsuREXHwNdAoOFZ9MkPEVXczHwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.24.2",
        "postcss": "^8.4.49",
        "rollup": "^4.23.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "jiti": ">=1.21.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vscode-uri": {
      "version": "3.0.8",
      "resolved": "https://registry.npmjs.org/vscode-uri/-/vscode-uri-3.0.8.tgz",
      "integrity": "sha512-AyFQ0EVmsOZOlAnxoFOGOq1SQDWAB7C6aqMGS23svWAllfOaxbuFvcT8D1i8z3Gyn8fraVeZNNmN6e9bxxXkKw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/vue": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/vue/-/vue-3.5.13.tgz",
      "integrity": "sha512-wmeiSMxkZCSc+PM2w2VRsOYAZC8GdipNFRTsLSfodVqI9mbejKeXEGr8SckuLnrQPGe3oJN5c3K0vpoU9q/wCQ==",
      "license": "MIT",
      "dependencies": {
        "@vue/compiler-dom": "3.5.13",
        "@vue/compiler-sfc": "3.5.13",
        "@vue/runtime-dom": "3.5.13",
        "@vue/server-renderer": "3.5.13",
        "@vue/shared": "3.5.13"
      },
      "peerDependencies": {
        "typescript": "*"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/vue-router": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/vue-router/-/vue-router-4.5.0.tgz",
      "integrity": "sha512-HDuk+PuH5monfNuY+ct49mNmkCRK4xJAV9Ts4z9UFc4rzdDnxQLyCMGGc8pKhZhHTVzfanpNwB/lwqevcBwI4w==",
      "license": "MIT",
      "dependencies": {
        "@vue/devtools-api": "^6.6.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/posva"
      },
      "peerDependencies": {
        "vue": "^3.2.0"
      }
    },
    "node_modules/vue-tsc": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/vue-tsc/-/vue-tsc-2.2.0.tgz",
      "integrity": "sha512-gtmM1sUuJ8aSb0KoAFmK9yMxb8TxjewmxqTJ1aKphD5Cbu0rULFY6+UQT51zW7SpUcenfPUuflKyVwyx9Qdnxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@volar/typescript": "~2.4.11",
        "@vue/language-core": "2.2.0"
      },
      "bin": {
        "vue-tsc": "bin/vue-tsc.js"
      },
      "peerDependencies": {
        "typescript": ">=5.0.0"
      }
    },
    "node_modules/vuetify": {
      "version": "3.7.11",
      "resolved": "https://registry.npmjs.org/vuetify/-/vuetify-3.7.11.tgz",
      "integrity": "sha512-50Z2SNwPXbkGmve4CwxOs4sySZGgLwQYIDsKx+coSrfIBqz8IyXgxRFQdrvgoehIwUjGTNqaPZymuK5rMFkfHA==",
      "license": "MIT",
      "engines": {
        "node": "^12.20 || >=14.13"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/johnleider"
      },
      "peerDependencies": {
        "typescript": ">=4.7",
        "vite-plugin-vuetify": ">=1.0.0",
        "vue": "^3.3.0",
        "webpack-plugin-vuetify": ">=2.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        },
        "vite-plugin-vuetify": {
          "optional": true
        },
        "webpack-plugin-vuetify": {
          "optional": true
        }
      }
    }
  }
}

================================================================================

frontend/package.json

================================================================================
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc -b && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "sass": "^1.83.4",
    "vue": "^3.5.13",
    "vue-router": "^4.5.0",
    "vuetify": "^3.7.11"
  },
  "devDependencies": {
    "@types/node": "^22.13.0",
    "@vitejs/plugin-vue": "^5.2.1",
    "@vue/tsconfig": "^0.7.0",
    "typescript": "~5.6.2",
    "vite": "^6.0.5",
    "vue-tsc": "^2.2.0"
  }
}

================================================================================

frontend/public/vite.svg

================================================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
================================================================================

frontend/src/App.vue

================================================================================
<template>
  <!-- 根容器 -->
  <v-app>
    <!-- 以 v-app-bar 作為頂部導覽列 -->
    <v-app-bar color="primary" dark>
      <v-toolbar-title>Project Management System</v-toolbar-title>
      <v-spacer></v-spacer>

      <!-- ★ 改用 to="…" router variant="text" -->
      <v-btn to="/" router variant="text">Home</v-btn>
      <v-btn to="/projects" router variant="text">Projects</v-btn>
      <v-btn to="/material" router variant="text">Material Form</v-btn>
      <v-btn to="/staff" router variant="text">Staff</v-btn>
    </v-app-bar>

    <!-- 主要內容區塊 -->
    <v-main>
      <div style="max-width:900px; margin:0 auto; padding:20px;">
        <router-view />
      </div>
    </v-main>
  </v-app>
</template>

<script>
export default {
  name: 'App'
}
</script>

================================================================================

frontend/src/assets/vue.svg

================================================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="37.07" height="36" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 198"><path fill="#41B883" d="M204.8 0H256L128 220.8L0 0h97.92L128 51.2L157.44 0h47.36Z"></path><path fill="#41B883" d="m0 0l128 220.8L256 0h-51.2L128 132.48L50.56 0H0Z"></path><path fill="#35495E" d="M50.56 0L128 133.12L204.8 0h-47.36L128 51.2L97.92 0H50.56Z"></path></svg>
================================================================================

frontend/src/components/HelloWorld.vue

================================================================================
<script setup lang="ts">
import { ref } from 'vue'

defineProps<{ msg: string }>()

const count = ref(0)
</script>

<template>
  <h1>{{ msg }}</h1>

  <div class="card">
    <button type="button" @click="count++">count is {{ count }}</button>
    <p>
      Edit
      <code>components/HelloWorld.vue</code> to test HMR
    </p>
  </div>

  <p>
    Check out
    <a href="https://vuejs.org/guide/quick-start.html#local" target="_blank"
      >create-vue</a
    >, the official Vue + Vite starter
  </p>
  <p>
    Learn more about IDE Support for Vue in the
    <a
      href="https://vuejs.org/guide/scaling-up/tooling.html#ide-support"
      target="_blank"
      >Vue Docs Scaling up Guide</a
    >.
  </p>
  <p class="read-the-docs">Click on the Vite and Vue logos to learn more</p>
</template>

<style scoped>
.read-the-docs {
  color: #888;
}
</style>

================================================================================

frontend/src/components/ProjectDetail.vue

================================================================================
<template>
  <div v-if="project">
    <p>Description: {{ project.description }}</p>
    <p>Objective: {{ project.objective }}</p>
    <p>Owner: {{ project.owner }}</p>
    <p>Duration: {{ project.duration_days }} ({{ project.duration_type }})</p>
    <p>Start Date: {{ project.start_date }}</p>
    <p>End Date: {{ project.end_date }}</p>

    <!-- ★ 新增顯示工程編號與承建商 -->
    <p>Job Number: {{ project.job_number }}</p>
    <p>Contractor: {{ project.contractor }}</p>

    <div style="margin-top:20px;">
      <router-link
        :to="`/projects/${projectId}/diaries`"
        style="background:#646cff; color:white; padding:6px 10px; border-radius:4px; text-decoration:none;"
      >
        Manage Site Diaries
      </router-link>
    </div>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'ProjectDetail',
  props: {
    projectId: {
      type: Number,
      required: true
    }
  },
  data() {
    return {
      project: null
    }
  },
  methods: {
    async fetchProject() {
      try {
        const { data } = await axios.get(`/api/projects/${this.projectId}`)
        this.project = data
      } catch (err) {
        console.error(err)
      }
    }
  },
  mounted() {
    this.fetchProject()
  }
}
</script>

<style scoped>
/* 按需求增添樣式 */
</style>

================================================================================

frontend/src/components/ProjectForm.vue

================================================================================
<template>
  <v-container fluid>
    <v-form @submit.prevent="handleSubmit">
      <v-row dense>
        <v-col cols="12" md="6">
          <v-text-field
            label="Project Name"
            v-model="formData.name"
            required
          />
        </v-col>
        <v-col cols="12" md="6">
          <v-text-field
            label="Owner"
            v-model="formData.owner"
          />
        </v-col>
      </v-row>

      <!-- 新增：工作編號 / 承建商 -->
      <v-row dense>
        <v-col cols="12" md="6">
          <v-text-field
            label="工作編號"
            v-model="formData.job_number"
          />
        </v-col>
        <v-col cols="12" md="6">
          <v-text-field
            label="承建商"
            v-model="formData.contractor"
          />
        </v-col>
      </v-row>
      <!-- ------------------------- -->

      <v-row dense>
        <v-col cols="12" md="6">
          <v-text-field
            label="Start Date"
            v-model="formData.start_date"
            type="date"
          />
        </v-col>
        <v-col cols="12" md="6">
          <v-text-field
            label="End Date"
            v-model="formData.end_date"
            type="date"
          />
        </v-col>
      </v-row>

      <v-row dense>
        <v-col cols="12" md="6">
          <v-text-field
            label="Duration (Days)"
            v-model.number="formData.duration_days"
            type="number"
          />
        </v-col>
        <v-col cols="12" md="6">
          <div>Duration Type</div>
          <v-radio-group v-model="formData.duration_type" class="mt-2">
            <v-radio label="Business" value="business" />
            <v-radio label="Calendar" value="calendar" />
          </v-radio-group>
        </v-col>
      </v-row>

      <v-row dense>
        <v-col cols="12">
          <v-textarea
            label="Description"
            v-model="formData.description"
            rows="2"
          />
        </v-col>
      </v-row>

      <v-row dense>
        <v-col cols="12">
          <v-textarea
            label="Project Objective"
            v-model="formData.objective"
            rows="2"
          />
        </v-col>
      </v-row>

      <v-row dense class="mt-4" justify="end">
        <v-btn color="primary" type="submit">
          {{ projectId ? 'Save' : 'Create' }}
        </v-btn>
        <v-btn variant="text" class="ms-2" @click="closeForm">Close</v-btn>
      </v-row>
    </v-form>
  </v-container>
</template>

<script>
import axios from 'axios'

export default {
  name: 'ProjectForm',
  props: {
    projectId: Number
  },
  data() {
    return {
      formData: {
        name: '',
        description: '',
        objective: '',
        owner: '',
        duration_days: '',
        duration_type: 'business',
        start_date: '',
        end_date: '',
        // 新增
        job_number: '',
        contractor: ''
      }
    }
  },
  methods: {
    async fetchProject() {
      if (!this.projectId) return
      try {
        const { data } = await axios.get(`/api/projects/${this.projectId}`)
        this.formData.name = data.name
        this.formData.description = data.description
        this.formData.objective = data.objective
        this.formData.owner = data.owner
        this.formData.duration_days = data.duration_days
        this.formData.duration_type = data.duration_type || 'business'
        this.formData.start_date = data.start_date
        this.formData.end_date = data.end_date

        // 載入 job_number / contractor
        this.formData.job_number = data.job_number
        this.formData.contractor = data.contractor
      } catch (err) {
        console.error(err)
      }
    },
    async handleSubmit() {
      try {
        if (this.projectId) {
          await axios.put(`/api/projects/${this.projectId}`, this.formData)
        } else {
          await axios.post('/api/projects/', this.formData)
        }
        this.$emit('refresh')
        this.closeForm()
      } catch (err) {
        console.error(err)
      }
    },
    closeForm() {
      this.$emit('close')
    }
  },
  mounted() {
    if (this.projectId) this.fetchProject()
  }
}
</script>

<style scoped>
.ms-2 {
  margin-left: 8px;
}
.mt-4 {
  margin-top: 1rem;
}
</style>

================================================================================

frontend/src/components/ProjectList.vue

================================================================================
<template>
  <div>
    <v-data-table
      :headers="headers"
      :items="projects"
      :density="'compact'"
      class="mb-6"
    >
      <template #item.actions="{ item }">
        <v-btn color="info" variant="text" class="me-2" @click="showDetail(item.id)">
          Detail
        </v-btn>
        <v-btn color="warning" variant="text" class="me-2" @click="editProject(item.id)">
          Edit
        </v-btn>
        <v-btn color="error" variant="text" @click="deleteProject(item.id)">
          Delete
        </v-btn>
      </template>
    </v-data-table>

    <!-- 詳細資訊 Dialog -->
    <v-dialog v-model="detailDialog" max-width="600px">
      <v-card>
        <v-card-title>
          <span class="text-h6">Project Detail</span>
        </v-card-title>
        <v-card-text>
          <ProjectDetail :projectId="detailProjectId" />
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn color="primary" text @click="detailDialog=false">
            Close
          </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </div>
</template>

<script>
import axios from 'axios'
import ProjectDetail from '@/components/ProjectDetail.vue'

export default {
  name: 'ProjectList',
  components: { ProjectDetail },
  props: {
    projects: {
      type: Array,
      default: () => []
    }
  },
  data() {
    return {
      detailDialog: false,
      detailProjectId: null,
      headers: [
        { text: 'ID', value: 'id', width: 60 },
        { text: 'Project Name', value: 'name' },
        // ★ 新增兩欄做示範 (工作編號、承建商)
        { text: 'Job #', value: 'job_number', width: 120 },
        { text: 'Contractor', value: 'contractor' },
        // ---
        { text: 'Start Date', value: 'start_date', width: 120 },
        { text: 'End Date', value: 'end_date', width: 120 },
        { text: 'Actions', value: 'actions', sortable: false }
      ]
    }
  },
  methods: {
    showDetail(projectId) {
      this.detailProjectId = projectId
      this.detailDialog = true
    },
    editProject(projectId) {
      // 發出事件給父層(ProjectsView)
      this.$emit('edit-project', projectId)
    },
    async deleteProject(id) {
      if (!confirm('確定要刪除此專案嗎？')) return
      try {
        await axios.delete(`/api/projects/${id}`)
        this.$emit('refresh')
      } catch (err) {
        console.error(err)
      }
    }
  }
}
</script>

<style scoped>
.mb-6 {
  margin-bottom: 24px;
}
.me-2 {
  margin-right: 8px;
}
</style>

================================================================================

frontend/src/components/SiteDiaryForm.vue

================================================================================
<template>
  <!-- 外層容器，含了標題列與關閉按鈕 -->
  <v-card
    class="site-diary-form-card"
    max-width="100%"
  >
    <!-- 頂部標題列 + 關閉按鈕 -->
    <v-card-title class="header-row d-flex justify-space-between align-center">
      <span class="text-h6">Site Diary Form</span>
      <!-- 右上角關閉按鈕 -->
      <v-btn
        icon
        size="x-small"
        @click="cancelForm"
        aria-label="Close"
      >
        <v-icon>mdi-close</v-icon>
      </v-btn>
    </v-card-title>

    <!-- 主要表單內容 (滾動區) -->
    <v-card-text class="form-content">
      <!-- 第一排: 日期/天氣/天數等 -->
      <v-row density="compact">
        <!-- 報表日期 -->
        <v-col cols="12" sm="6" md="3">
          <v-text-field
            v-model="localReportDateStr"
            label="Report Date"
            type="date"
            dense
            outlined
            hide-details
          />
        </v-col>

        <!-- Weather (Morning) -->
        <v-col cols="12" sm="6" md="3">
          <v-text-field
            v-model="formData.weather_morning"
            label="Weather (Morning)"
            dense
            outlined
            hide-details
          />
        </v-col>

        <!-- Weather (Noon) -->
        <v-col cols="12" sm="6" md="3">
          <v-text-field
            v-model="formData.weather_noon"
            label="Weather (Noon)"
            dense
            outlined
            hide-details
          />
        </v-col>

        <!-- Day Count -->
        <v-col cols="12" sm="6" md="3">
          <v-text-field
            v-model.number="formData.day_count"
            label="Day Count"
            type="number"
            dense
            outlined
            hide-details
          />
        </v-col>
      </v-row>

      <!-- 第二排: Summary -->
      <v-row density="compact" class="mt-2">
        <v-col cols="12">
          <v-textarea
            v-model="formData.summary"
            label="Summary"
            rows="2"
            density="compact"
            outlined
            hide-details
          />
        </v-col>
      </v-row>

      <!-- 第三排: Workers (多欄) -->
      <v-row density="compact" class="mt-2">
        <h3 class="section-title">Workers</h3>
        <v-col
          v-for="(count, type) in formData.workers"
          :key="type"
          cols="12"
          sm="6"
          md="4"
          lg="3"
        >
          <v-text-field
            :label="type"
            v-model.number="formData.workers[type]"
            type="number"
            dense
            outlined
            hide-details
          />
        </v-col>
      </v-row>

      <!-- 第四排: Machines (多欄) -->
      <v-row density="compact" class="mt-2">
        <h3 class="section-title">Machines</h3>
        <v-col
          v-for="(count, type) in formData.machines"
          :key="type"
          cols="12"
          sm="6"
          md="4"
          lg="3"
        >
          <v-text-field
            :label="type"
            v-model.number="formData.machines[type]"
            type="number"
            dense
            outlined
            hide-details
          />
        </v-col>
      </v-row>

      <!-- 第五排: 施工人員多選 -->
      <v-row density="compact" class="mt-2">
        <v-col cols="12">
          <v-select
            v-model="selectedStaffIds"
            :items="staffDropdownOptions"
            item-title="label"
            item-value="value"
            label="Staffs"
            multiple
            dense
            outlined
            hide-details
            chips
          />
        </v-col>
      </v-row>
    </v-card-text>

    <!-- 底部操作按鈕區 -->
    <v-card-actions class="footer-buttons justify-end">
      <!-- 清空表單 -->
      <v-btn
        size="small"
        variant="text"
        class="me-2"
        @click="clearForm"
      >
        Clear
      </v-btn>

      <!-- Cancel -->
      <v-btn
        size="small"
        variant="text"
        class="me-2"
        @click="cancelForm"
      >
        Cancel
      </v-btn>

      <!-- Submit(Create/Update) -->
      <v-btn
        size="small"
        color="primary"
        @click="handleSubmit"
      >
        {{ diaryId ? 'Update' : 'Create' }}
      </v-btn>
    </v-card-actions>
  </v-card>
</template>

<script>
import axios from 'axios'
import { ref, onMounted, watch, computed } from 'vue'

export default {
  name: 'SiteDiaryForm',
  props: {
    projectId: { type: Number, required: true },
    diaryId: { type: Number, default: null }
  },
  setup(props, { emit }) {
    // ========== 預設空白表單結構 ========== 
    const initialFormData = {
      report_date: null,
      weather_morning: '',
      weather_noon: '',
      day_count: null,
      summary: '',
      workers: {
        '地盤總管': 0,
        '工程師': 0,
        '管工': 0,
        '平水員': 0,
        '燒焊焊工': 0,
        '機手': 0,
        '泥水工': 0,
        '紮鐵工': 0,
        '木板工': 0,
        '電工': 0,
        '水喉工': 0,
        '雜工': 0,
        '其他': 0
      },
      machines: {
        '挖掘機': 0,
        '發電機': 0,
        '風機': 0,
        '泥頭車': 0,
        '吊機': 0,
        // ★ 新增「機炮」
        '機炮': 0,
        '屈鐵機': 0,
        '風車鋸': 0
      }
    }

    // 綁定在表單的資料
    const formData = ref(JSON.parse(JSON.stringify(initialFormData)))

    // 被選的人員 id 列表
    const selectedStaffIds = ref([])

    // 報表日期 (與 <v-text-field type="date"> 雙向綁定)
    const localReportDateStr = ref('')

    // 施工人員清單
    const staffList = ref([])

    // 下拉選單選項
    const staffDropdownOptions = computed(() => {
      return staffList.value.map(s => ({
        label: `${s.name} (${s.role || 'N/A'})`,
        value: s.id
      }))
    })

    // 載入人員
    const fetchStaff = async () => {
      try {
        const { data } = await axios.get('/api/staff')
        staffList.value = data
      } catch (err) {
        console.error(err)
      }
    }

    // 取得並載入 diaryId 對應的日報
    const fetchExistingDiary = async () => {
      if (!props.diaryId) return
      try {
        const { data } = await axios.get(
          `/api/projects/${props.projectId}/site_diaries`
        )
        const target = data.find(d => d.id === props.diaryId)
        if (!target) return
        setFormDataFromDiary(target)
      } catch (err) {
        console.error(err)
      }
    }

    // 取得「最後一筆」日報作為預設
    const fetchLastDiaryAsDefault = async () => {
      if (props.diaryId) return
      try {
        const { data } = await axios.get(
          `/api/projects/${props.projectId}/site_diaries/last`
        )
        if (!data.id) {
          // 無任何日報
          return
        }
        // 有上一筆 => 帶入
        setFormDataFromDiary(data)
      } catch (err) {
        console.error(err)
      }
    }

    // 將已存在的日報資料寫入 formData
    function setFormDataFromDiary(diaryData) {
      if (diaryData.report_date) {
        localReportDateStr.value = diaryData.report_date
      } else {
        localReportDateStr.value = ''
      }

      formData.value.weather_morning = diaryData.weather_morning || ''
      formData.value.weather_noon = diaryData.weather_noon || ''
      formData.value.day_count = diaryData.day_count || null
      formData.value.summary = diaryData.summary || ''

      // Workers
      const updatedWorkers = JSON.parse(JSON.stringify(initialFormData.workers))
      for (const w of diaryData.workers || []) {
        updatedWorkers[w.type] = w.quantity
      }
      formData.value.workers = updatedWorkers

      // Machines
      const updatedMachines = JSON.parse(JSON.stringify(initialFormData.machines))
      for (const m of diaryData.machines || []) {
        updatedMachines[m.type] = m.quantity
      }
      formData.value.machines = updatedMachines

      // Staff
      selectedStaffIds.value = (diaryData.staffs || []).map(s => s.id)
    }

    // 新增/更新
    const handleSubmit = async () => {
      try {
        formData.value.report_date = localReportDateStr.value || null

        const payload = {
          report_date: formData.value.report_date,
          weather_morning: formData.value.weather_morning,
          weather_noon: formData.value.weather_noon,
          day_count: formData.value.day_count,
          summary: formData.value.summary,
          workers: formData.value.workers,
          machines: formData.value.machines,
          staff_ids: selectedStaffIds.value
        }

        if (!props.diaryId) {
          // create
          await axios.post(
            `/api/projects/${props.projectId}/site_diaries`,
            payload
          )
        } else {
          // update
          await axios.put(
            `/api/projects/${props.projectId}/site_diaries/${props.diaryId}`,
            payload
          )
        }
        emit('updated')
      } catch (err) {
        console.error(err)
      }
    }

    // 取消
    const cancelForm = () => {
      emit('cancel')
    }

    // 清空表單
    const clearForm = () => {
      formData.value = JSON.parse(JSON.stringify(initialFormData))
      localReportDateStr.value = ''
      selectedStaffIds.value = []
    }

    watch(
      () => props.diaryId,
      () => {
        fetchExistingDiary()
      }
    )

    onMounted(async () => {
      await fetchStaff()
      // 若為新建模式 => 預帶最後一筆
      if (!props.diaryId) {
        fetchLastDiaryAsDefault()
      } else {
        // 編輯模式 => 帶入指定日報
        fetchExistingDiary()
      }
    })

    return {
      formData,
      selectedStaffIds,
      staffDropdownOptions,
      localReportDateStr,
      handleSubmit,
      cancelForm,
      clearForm
    }
  }
}
</script>

<style scoped>
.site-diary-form-card {
  font-size: 0.875rem; /* 小一點的字體 */
  max-height: 90vh;
  display: flex;
  flex-direction: column;
}

.header-row {
  border-bottom: 1px solid #eee;
  padding-bottom: 4px;
}

.form-content {
  padding-top: 8px;
  padding-bottom: 8px;
  overflow-y: auto;
}

.section-title {
  font-size: 1rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  width: 100%;
}

.footer-buttons {
  border-top: 1px solid #eee;
}

.me-2 {
  margin-right: 8px !important;
}
.mt-2 {
  margin-top: 8px !important;
}
</style>

================================================================================

frontend/src/main.ts

================================================================================
// frontend/src/main.ts
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'

// 匯入 Vuetify 核心樣式
import 'vuetify/styles'

// ★ 新增：把所有 components 與 directives 一次性注入
import { createVuetify } from 'vuetify'
import * as components from 'vuetify/components'
import * as directives from 'vuetify/directives'

// (可選) 匯入官方提供的 mdi iconsets
import { aliases, mdi } from 'vuetify/iconsets/mdi'

const vuetify = createVuetify({
  components,
  directives,
  icons: {
    defaultSet: 'mdi',  // 指定使用哪個 icon set
    aliases,
    sets: { mdi }
  }
})

const app = createApp(App)

app.use(router)
app.use(vuetify)

app.mount('#app')

================================================================================

frontend/src/router.ts

================================================================================
// frontend/src/router.ts
import { createRouter, createWebHistory } from 'vue-router'
import HomeView from './views/HomeView.vue'
import ProjectsView from './views/ProjectsView.vue'
import MaterialFormView from './views/MaterialFormView.vue'
import StaffView from './views/StaffView.vue'

// ★ 新增
import SiteDiaryListView from './views/SiteDiaryListView.vue'

const routes = [
  { path: '/', component: HomeView },
  { path: '/projects', component: ProjectsView },
  { path: '/material', component: MaterialFormView },
  { path: '/staff', component: StaffView },

  // 新增日報列表頁（替代舊 daily report）
  { path: '/projects/:projectId/diaries', component: SiteDiaryListView }
]

export default createRouter({
  history: createWebHistory(),
  routes
})

================================================================================

frontend/src/shims-vue.d.ts

================================================================================
declare module '*.vue' {
  import type { DefineComponent } from 'vue'
  const component: DefineComponent<{}, {}, any>
  export default component
} 
================================================================================

frontend/src/style.css

================================================================================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

.card {
  padding: 2em;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

/* 針對淺色模式 */
@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

/* ========== 新增一些可重複使用的表單樣式 ========== */

.form-card {
  background: #f9f9f9;
  padding: 1rem 1.5rem;
  border-radius: 8px;
  border: 1px solid #ccc;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 1rem;
}

.form-label {
  display: inline-block;
  width: 120px;
  font-weight: bold;
  margin-right: 0.5rem;
}

.form-input {
  width: calc(100% - 130px);
  padding: 6px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.checkbox-group {
  margin-bottom: 0.5rem;
}

.checkbox-label {
  margin-left: 6px;
}

.btn-submit {
  margin-top: 20px;
  padding: 8px 16px;
  background: #646cff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.btn-submit:hover {
  background: #535bf2;
}

================================================================================

frontend/src/views/HomeView.vue

================================================================================
<template>
  <div>
    <h1>Welcome to the Project Management System</h1>
    <p>這裡是專案管理的首頁。</p>
  </div>
</template>

<script>
export default {
  name: 'HomeView'
}
</script>

================================================================================

frontend/src/views/MaterialFormView.vue

================================================================================
<template>
    <div class="material-form-container">
      <h1>Material Submission Form</h1>
  
      <div class="form-card">
        <form @submit.prevent="handleSubmit">
  
          <!-- Special Fields (工程編號、工程名稱、文件編號) -->
          <div
            v-for="(info, fieldName) in specialFields"
            :key="fieldName"
            class="form-group"
          >
            <label :for="fieldName" class="form-label">
              {{ fieldName }}:
            </label>
            <input
              type="text"
              :id="fieldName"
              v-model="formData[fieldName]"
              class="form-input"
            />
          </div>
  
          <hr />
  
          <!-- Regular Fields (報批之材料、牌子(如有)、預算表之項目編號、型號、貨期、數量) -->
          <div
            v-for="(item, i) in regularFields"
            :key="i"
            class="form-group"
          >
            <label :for="item[0]" class="form-label">
              {{ item[0] }}:
            </label>
            <input
              type="text"
              :id="item[0]"
              v-model="formData[item[0]]"
              class="form-input"
            />
          </div>
  
          <hr />
  
          <!-- Material Type Checkboxes -->
          <h3>Material Type</h3>
          <div
            v-for="(box, i) in materialTypeCheckboxes"
            :key="i"
            class="checkbox-group"
          >
            <input
              type="checkbox"
              :id="box[0]"
              v-model="formData[box[0]]"
            />
            <label :for="box[0]" class="checkbox-label">
              {{ box[0] }}
            </label>
          </div>
  
          <hr />
  
          <!-- Material Status Checkboxes -->
          <h3>Material Status</h3>
          <div
            v-for="(box, i) in materialStatusCheckboxes"
            :key="i"
            class="checkbox-group"
          >
            <input
              type="checkbox"
              :id="box[0]"
              v-model="formData[box[0]]"
            />
            <label :for="box[0]" class="checkbox-label">
              {{ box[0] }}
            </label>
          </div>
  
          <hr />
  
          <!-- Attachment Type -->
          <h3>Attachment Type</h3>
          <div class="form-group">
            <label for="附件" class="form-label">附件:</label>
            <input
              type="text"
              id="附件"
              v-model="formData['附件']"
              class="form-input"
            />
          </div>
          <div
            v-for="(box, i) in attachmentTypeCheckboxes"
            :key="i"
            class="checkbox-group"
          >
            <input
              type="checkbox"
              :id="box[0]"
              v-model="formData[box[0]]"
            />
            <label :for="box[0]" class="checkbox-label">
              {{ box[0] }}
            </label>
          </div>
  
          <hr />
  
          <!-- 日期與檔案名稱 -->
          <div class="form-group">
            <label for="日期" class="form-label">日期:</label>
            <input
              type="date"
              id="日期"
              v-model="formData['日期']"
              class="form-input"
            />
          </div>
  
          <div class="form-group">
            <label for="檔案名稱" class="form-label">檔案名稱:</label>
            <input
              type="text"
              id="檔案名稱"
              v-model="formData['檔案名稱']"
              class="form-input"
            />
          </div>
  
          <button type="submit" class="btn-submit">Generate Excel</button>
        </form>
      </div>
    </div>
  </template>
  
  <script>
  import axios from 'axios'
  
  export default {
    name: 'MaterialFormView',
    data() {
      return {
        // 前端資料物件：包含所有要傳給後端的欄位
        formData: {
          '工程編號': '',
          '工程名稱': '',
          '文件編號': '',
          '報批之材料': '',
          '牌子(如有)': '',
          '預算表之項目編號': '',
          '型號': '',
          '貨期': '',
          '數量': '',
          // Material Type
          '結構': false,
          '供水': false,
          '建築': false,
          '電氣': false,
          '排水': false,
          '其他': false,
          // Material Status
          '與設計相同': false,
          '與標書相同': false,
          '與後加工程建議書相同': false,
          '同等質量': false,
          '替換材料': false,
          '原設計沒有指定': false,
          // Attachment
          '附件': '',
          // Attachment Type
          '樣板': false,
          '目錄': false,
          '來源證': false,
          '其他(附件)': false, // 避免和 Material Type 的 '其他' 混淆，可稍微改個 key
          // 日期、檔案名稱
          '日期': new Date().toISOString().split('T')[0],
          '檔案名稱': ''
        },
  
        // specialFields: 與後端 constants.py 中的 special_fields 相對應
        specialFields: {
          '工程編號': [6,2,4,'37/2024/DVPS'],
          '工程名稱': [7,2,4,'黑沙馬路行人道優化工程(第二期)'],
          '文件編號': [6,8,8,'']
        },
  
        // regularFields: 與後端 constants.py 中的 regular_fields 相對應
        regularFields: [
          ['報批之材料', 11, 3],
          ['牌子(如有)', 12, 3],
          ['預算表之項目編號', 11, 7],
          ['型號', 12, 6],
          ['貨期', 13, 6],
          ['數量', 14, 6]
        ],
  
        // materialTypeCheckboxes: 與後端 constants.py 中的 material_type_checkboxes 相對應
        materialTypeCheckboxes: [
          ['結構', 7, 6],
          ['供水', 8, 6],
          ['建築', 7, 8],
          ['電氣', 8, 8],
          ['排水', 7, 10],
          ['其他', 8, 10]
        ],
  
        // materialStatusCheckboxes: 與後端 constants.py 中的 material_status_checkboxes 相對應
        materialStatusCheckboxes: [
          ['與設計相同', 13, 1],
          ['與標書相同', 14, 1],
          ['與後加工程建議書相同', 15, 1],
          ['同等質量', 16, 1],
          ['替換材料', 17, 1],
          ['原設計沒有指定', 18, 1]
        ],
  
        // attachmentTypeCheckboxes: 與後端 constants.py 中的 attachment_type_checkboxes 相對應
        attachmentTypeCheckboxes: [
          ['樣板', 16, 5],
          ['目錄', 17, 5],
          ['來源證', 16, 7],
          ['其他(附件)', 17, 7]
        ]
      }
    },
    methods: {
      async handleSubmit() {
        try {
          // 將前端 formData 傳給後端 /api/material-submission
          const response = await axios.post('/api/material-submission', this.formData, {
            responseType: 'blob'
          })
          // 下載後端回傳的 Excel 檔
          const fileURL = window.URL.createObjectURL(new Blob([response.data]))
          const fileLink = document.createElement('a')
          fileLink.href = fileURL
          const filename = this.formData['檔案名稱'] || '材料報批表_filled.xlsx'
          fileLink.setAttribute(
            'download',
            filename.endsWith('.xlsx') ? filename : filename + '.xlsx'
          )
          document.body.appendChild(fileLink)
          fileLink.click()
          fileLink.remove()
        } catch (err) {
          console.error('下載發生錯誤', err)
        }
      }
    }
  }
  </script>
  
  <style scoped>
  .material-form-container {
    max-width: 600px;
    margin: 0 auto;
  }
  .form-card {
    background: #f9f9f9;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    border: 1px solid #ccc;
  }
  .form-group {
    margin-bottom: 1rem;
  }
  .form-label {
    display: inline-block;
    width: 120px;
    font-weight: bold;
    margin-right: 0.5rem;
  }
  .form-input {
    width: calc(100% - 130px);
    padding: 6px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  .checkbox-group {
    margin-bottom: 0.5rem;
  }
  .checkbox-label {
    margin-left: 6px;
  }
  .btn-submit {
    margin-top: 20px;
    padding: 8px 16px;
    background: #646cff;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  .btn-submit:hover {
    background: #535bf2;
  }
  </style>
  
================================================================================

frontend/src/views/ProjectsView.vue

================================================================================
<template>
  <v-container fluid>
    <h1>All Projects</h1>

    <!-- 新增專案按鈕 -->
    <v-btn color="primary" class="mb-4" @click="openCreateProjectDialog">
      Create New Project
    </v-btn>

    <!-- ProjectList 顯示所有專案 -->
    <ProjectList
      :projects="projects"
      @refresh="fetchProjects"
      @edit-project="openEditProjectDialog"
    />

    <!-- 新增/編輯 Project 的 Dialog -->
    <v-dialog v-model="showProjectDialog" max-width="800px" persistent>
      <v-card>
        <v-card-title>
          <span class="text-h6">
            {{ editingProjectId ? 'Edit Project' : 'Create Project' }}
          </span>
        </v-card-title>
        <v-card-text>
          <ProjectForm
            :projectId="editingProjectId"
            @close="closeProjectDialog"
            @refresh="onProjectSaved"
          />
        </v-card-text>
      </v-card>
    </v-dialog>
  </v-container>
</template>

<script>
import axios from 'axios'
import { ref, onMounted } from 'vue'
import ProjectList from '@/components/ProjectList.vue'
import ProjectForm from '@/components/ProjectForm.vue'

export default {
  name: 'ProjectsView',
  components: { ProjectList, ProjectForm },
  setup() {
    const projects = ref([])
    const showProjectDialog = ref(false)
    const editingProjectId = ref(null)

    const fetchProjects = async () => {
      try {
        const { data } = await axios.get('/api/projects/')
        projects.value = data
      } catch (err) {
        console.error(err)
      }
    }

    const openCreateProjectDialog = () => {
      editingProjectId.value = null
      showProjectDialog.value = true
    }

    // ★ 新增：當使用者點擊 Edit 按鈕時，開啟對話框
    const openEditProjectDialog = (id) => {
      editingProjectId.value = id
      showProjectDialog.value = true
    }

    const closeProjectDialog = () => {
      showProjectDialog.value = false
    }

    const onProjectSaved = () => {
      showProjectDialog.value = false
      fetchProjects()
    }

    onMounted(() => {
      fetchProjects()
    })

    return {
      projects,
      showProjectDialog,
      editingProjectId,
      fetchProjects,
      openCreateProjectDialog,
      openEditProjectDialog,
      closeProjectDialog,
      onProjectSaved
    }
  }
}
</script>

<style scoped>
.mb-4 {
  margin-bottom: 16px;
}
</style>

================================================================================

frontend/src/views/SiteDiaryListView.vue

================================================================================
<!-- frontend/src/views/SiteDiaryListView.vue -->
<template>
  <v-container fluid>
    <h2>Site Diaries Management</h2>

    <div v-if="projectInfo" class="project-info-box mb-4">
      <h3>Project: {{ projectInfo.name }}</h3>
      <p>Owner: {{ projectInfo.owner }}</p>
    </div>

    <v-btn color="success" class="mb-4" @click="openCreateDialog">
      NEW SITE DIARY
    </v-btn>

    <!-- 
      外層包一層可水平捲動的 div，
      以防在小螢幕或欄位較多時，仍能左右捲動 
    -->
    <div class="table-scroll-wrapper">
      <v-data-table
        :headers="headers"
        :items="siteDiaries"
        item-key="id"
        :density="'compact'"
        class="mb-6 diary-table"
      >
        <!-- # 欄位：顯示索引( row index + 1 ) -->
        <template #item.index="{ index }">
          {{ index + 1 }}
        </template>

        <!-- 其餘欄位 (報表日期、天氣(早/中)、日數) 直接顯示 item.xxx -->
        
        <!-- EDIT 按鈕 -->
        <template #item.edit="{ item }">
          <v-btn color="warning" variant="text" @click="openEditDialog(item.id)">
            EDIT
          </v-btn>
        </template>

        <!-- DELETE 按鈕 -->
        <template #item.delete="{ item }">
          <v-btn color="error" variant="text" @click="deleteDiary(item.id)">
            DELETE
          </v-btn>
        </template>

        <!-- DOWNLOAD 欄位：用 v-menu 做一個下拉選單，讓使用者選擇下載 XLSX 或 PDF(表1 / 表2) -->
        <template #item.download="{ item }">
          <v-menu>
            <template #activator="{ props }">
              <v-btn v-bind="props" variant="outlined" color="info">
                DOWNLOAD
              </v-btn>
            </template>
            <v-list>
              <v-list-item @click="downloadReport(item.id, 'xlsx')">
                <v-list-item-title>Excel (XLSX)</v-list-item-title>
              </v-list-item>
              <v-list-item @click="downloadReport(item.id, 'sheet1')">
                <v-list-item-title>PDF(表1)</v-list-item-title>
              </v-list-item>
              <v-list-item @click="downloadReport(item.id, 'sheet2')">
                <v-list-item-title>PDF(表2)</v-list-item-title>
              </v-list-item>
            </v-list>
          </v-menu>
        </template>

      </v-data-table>
    </div>

    <!-- 調整對話框的 max-width 以便視窗更寬 -->
    <v-dialog
      v-model="displayFormDialog"
      max-width="1200px"
      persistent
    >
      <v-card>
        <v-card-title>
          <span class="text-h6">Site Diary</span>
        </v-card-title>
        <v-card-text>
          <SiteDiaryForm
            :projectId="projectIdNumber"
            :diaryId="editingDiaryId"
            @updated="onDiaryUpdated"
            @cancel="onDiaryCancelled"
          />
        </v-card-text>
      </v-card>
    </v-dialog>
  </v-container>
</template>

<script>
import axios from 'axios'
import { ref, computed, onMounted } from 'vue'
import { useRoute } from 'vue-router'
import SiteDiaryForm from '@/components/SiteDiaryForm.vue'

export default {
  name: 'SiteDiaryListView',
  components: { SiteDiaryForm },
  setup() {
    const route = useRoute()
    const siteDiaries = ref([])
    const projectInfo = ref(null)
    const displayFormDialog = ref(false)
    const editingDiaryId = ref(null)

    // 將 XLSX、PDF(表1)、PDF(表2) 三欄合併到同一個 "DOWNLOAD" 欄位
    // 其餘維持：序號(#)、日期、天氣(早/中)、日數、EDIT、DELETE
    const headers = ref([
      { text: '#', value: 'index', width: 50, align: 'center' },
      { text: '日期', value: 'report_date', width: 130, align: 'start' },
      { text: '天氣(早)', value: 'weather_morning', width: 90, align: 'center' },
      { text: '天氣(中)', value: 'weather_noon', width: 90, align: 'center' },
      { text: '日數', value: 'day_count', width: 60, align: 'center' },
      { text: 'EDIT', value: 'edit', sortable: false, width: 70, align: 'center' },
      { text: 'DELETE', value: 'delete', sortable: false, width: 80, align: 'center' },
      { text: 'DOWNLOAD', value: 'download', sortable: false, width: 110, align: 'center' },
    ])

    const projectIdNumber = computed(() => Number(route.params.projectId))

    // 取得專案資訊 (顯示 "Project: xxx / Owner: xxx")
    const fetchProjectInfo = async () => {
      try {
        const { data } = await axios.get(`/api/projects/${projectIdNumber.value}`)
        projectInfo.value = data
      } catch (error) {
        console.error(error)
      }
    }

    // 取得該專案的所有日報
    const fetchSiteDiaries = async () => {
      try {
        const { data } = await axios.get(
          `/api/projects/${projectIdNumber.value}/site_diaries`
        )
        siteDiaries.value = data
      } catch (err) {
        console.error(err)
      }
    }

    // 建立新的 SiteDiary
    const openCreateDialog = () => {
      editingDiaryId.value = null
      displayFormDialog.value = true
    }

    // 編輯 SiteDiary
    const openEditDialog = (diaryId) => {
      editingDiaryId.value = diaryId
      displayFormDialog.value = true
    }

    // 刪除 SiteDiary
    const deleteDiary = async (diaryId) => {
      if (!confirm('Are you sure you want to delete this Site Diary?')) return
      try {
        await axios.delete(`/api/projects/${projectIdNumber.value}/site_diaries/${diaryId}`)
        alert('Diary deleted.')
        fetchSiteDiaries()
      } catch (err) {
        console.error(err)
      }
    }

    // 下載報表 (XLSX, PDF(表1), PDF(表2))
    const downloadReport = async (diaryId, fileType) => {
      try {
        const response = await axios.get(
          `/api/projects/${projectIdNumber.value}/site_diaries/${diaryId}/download_report?file=${fileType}`,
          { responseType: 'blob' }
        )

        // 預設檔名
        let filename = fileType === 'xlsx'
          ? 'daily_report_filled.xlsx'
          : (fileType === 'sheet1' ? 'daily_report_sheet1.pdf' : 'daily_report_sheet2.pdf')

        // 如果後端有透過 Content-Disposition 帶檔名，則解析出來用
        const contentDisposition = response.headers['content-disposition']
        if (contentDisposition) {
          const cdRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/
          const matches = cdRegex.exec(contentDisposition)
          if (matches && matches[1]) {
            filename = matches[1].replace(/['"]/g, '')
          }
        }

        // 生成可下載 URL
        const blobUrl = window.URL.createObjectURL(response.data)
        const link = document.createElement('a')
        link.href = blobUrl
        link.setAttribute('download', filename)
        document.body.appendChild(link)
        link.click()
        link.remove()
        window.URL.revokeObjectURL(blobUrl)
      } catch (err) {
        console.error('Download failed:', err)
      }
    }

    // 當表單存檔成功
    const onDiaryUpdated = () => {
      displayFormDialog.value = false
      fetchSiteDiaries()
    }

    // 當表單取消
    const onDiaryCancelled = () => {
      displayFormDialog.value = false
    }

    onMounted(() => {
      fetchProjectInfo()
      fetchSiteDiaries()
    })

    return {
      siteDiaries,
      projectInfo,
      displayFormDialog,
      editingDiaryId,
      headers,
      projectIdNumber,
      openCreateDialog,
      openEditDialog,
      deleteDiary,
      downloadReport,
      onDiaryUpdated,
      onDiaryCancelled
    }
  }
}
</script>

<style scoped>
.project-info-box {
  border: 1px solid #ccc;
  padding: 10px;
  background-color: #f9f9f9;
  margin-bottom: 16px;
}

/* 用於在小螢幕或欄位多時，允許水平捲動 */
.table-scroll-wrapper {
  width: 100%;
  overflow-x: auto;
  margin-bottom: 16px;
}

/* 使表格最小寬度稍微大些 (如 700px) */
.diary-table {
  min-width: 700px;
}

/* 基本間距調整 */
.mb-4 {
  margin-bottom: 16px;
}
.mb-6 {
  margin-bottom: 24px;
}
</style>

================================================================================

frontend/src/views/StaffView.vue

================================================================================
<template>
  <div>
    <h1>人員管理</h1>

    <!-- 以 Vuetify 的 v-data-table 展示 staffList -->
    <v-data-table
      :headers="headers"
      :items="staffList"
      class="mb-6"
    >
      <!-- Actions 欄位 (刪除按鈕) -->
      <template #item.actions="{ item }">
        <v-btn color="error" variant="outlined" @click="deleteStaff(item.id)">
          Delete
        </v-btn>
      </template>
    </v-data-table>

    <!-- 新增人員表單 -->
    <h3>新增人員</h3>
    <v-card class="pa-4">
      <v-text-field
        v-model="name"
        label="姓名"
        class="mb-3"
      />
      <v-text-field
        v-model="role"
        label="角色"
        class="mb-3"
      />
      <v-btn variant="outlined" color="primary" @click="createStaff">
        新增
      </v-btn>
    </v-card>
  </div>
</template>

<script>
import axios from 'axios'
import { ref, onMounted } from 'vue'
// Vuetify 已在 main.ts 裝入，這裡只需使用即可

export default {
  name: 'StaffView',
  setup() {
    const staffList = ref([])
    const name = ref('')
    const role = ref('')

    // v-data-table 的表頭設定
    const headers = ref([
      { text: 'ID', value: 'id', width: 80 },
      { text: 'Name', value: 'name' },
      { text: 'Role', value: 'role' },
      { text: 'Actions', value: 'actions', sortable: false }
    ])

    const fetchStaff = async () => {
      try {
        const { data } = await axios.get('/api/staff')
        staffList.value = data
      } catch (err) {
        console.error(err)
      }
    }

    const createStaff = async () => {
      if (!name.value) {
        alert('請輸入姓名')
        return
      }
      try {
        await axios.post('/api/staff', { name: name.value, role: role.value })
        alert('人員已新增！')
        name.value = ''
        role.value = ''
        fetchStaff()
      } catch (err) {
        console.error(err)
      }
    }

    const deleteStaff = async (id) => {
      if (!confirm('是否確定要刪除此人員？')) return
      try {
        await axios.delete(`/api/staff/${id}`)
        alert('人員已刪除')
        fetchStaff()
      } catch (err) {
        console.error(err)
      }
    }

    onMounted(() => {
      fetchStaff()
    })

    return {
      staffList,
      headers,
      name,
      role,
      createStaff,
      deleteStaff
    }
  }
}
</script>

<style scoped>
.mb-6 {
  margin-bottom: 24px;
}
</style>

================================================================================

frontend/src/vite-env.d.ts

================================================================================
/// <reference types="vite/client" />
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

export default defineConfig({
  plugins: [vue()],
  server: {
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:5000', // Flask 後端
        changeOrigin: true
      }
    }
  }
})

================================================================================

frontend/tsconfig.app.json

================================================================================
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "baseUrl": ".",
    "moduleResolution": "node",
    "types": ["node", "vuetify"],
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================================================================================

frontend/tsconfig.json

================================================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================================================================================

frontend/tsconfig.node.json

================================================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================================================================================

frontend/vite.config.ts

================================================================================
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { fileURLToPath, URL } from 'node:url'

export default defineConfig({
  plugins: [vue()],
  // ★ 新增 resolve.alias 配置
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:5000',
        changeOrigin: true
      }
    }
  },
  build: {
    outDir: 'dist', // 打包後輸出位置
    emptyOutDir: true
  }
})

================================================================================

package.json

================================================================================
{
    "name": "my-heroku-app",
    "version": "1.0.0",
    "scripts": {
      "heroku-postbuild": "cd frontend && npm install && npm run build"
    }
  }
  