專案檔案架構：
./
├── backend/
│   ├── __init__.py
│   ├── db.py # backend/db.py
│   └── main.py # backend/main.py
│   ├── gantt_management/
│   │   ├── routes.py # backend/gantt_management/routes.py
│   │   └── services.py # backend/gantt_management/services.py
│   ├── material_management/
│   │   ├── constants.py # backend/material_management/constants.py
│   │   ├── routes.py # backend/material_management/routes.py
│   │   └── services.py # backend/material_management/services.py
│   │   ├── static/
│   │   │   └── logo.jpg
│   ├── project_management/
│   │   └── routes.py # backend/project_management/routes.py
│   ├── site_diary/
│   │   ├── progress_sse.py # backend/site_diary/progress_sse.py
│   │   ├── routes.py # backend/site_diary/routes.py
│   │   └── services.py # backend/site_diary/services.py
│   ├── staff_management/
│   │   └── routes.py # backend/staff_management/routes.py
├── fonts/
├── frontend/
│   └── index.html
│   ├── public/
│   ├── src/
│   │   ├── App.vue
│   │   └── style.css
│   │   ├── assets/
│   │   ├── components/
│   │   │   ├── GanttTaskForm.vue
│   │   │   ├── ProjectDetail.vue
│   │   │   ├── ProjectForm.vue
│   │   │   ├── ProjectList.vue
│   │   │   └── SiteDiaryForm.vue
│   │   ├── views/
│   │   │   ├── HomeView.vue
│   │   │   ├── MaterialFormView.vue
│   │   │   ├── ProjectsGanttView.vue
│   │   │   ├── ProjectsView.vue
│   │   │   ├── SiteDiaryListView.vue
│   │   │   └── StaffView.vue
================================================================================

Dockerfile

================================================================================
###############################################
# 1) 前端：Node 環境，安裝並打包 Vite/Vue
###############################################
FROM node:18-slim AS frontend-builder

WORKDIR /app/frontend

# 複製前端 package.json / package-lock.json
COPY frontend/package*.json ./

# 安裝前端相依套件
RUN npm install

# 複製前端程式碼
COPY frontend/ ./

# 進行前端打包 (輸出到 /app/frontend/dist)
RUN npm run build


###############################################
# 2) 後端：Python + LibreOffice + 字型
###############################################
FROM python:3.10-slim AS backend

# 確保 APT 安裝過程不出現互動式介面
ENV DEBIAN_FRONTEND=noninteractive

# 先更新並安裝可能需要的工具（包含 GNUPG / CA certificate 等）
RUN apt-get update --allow-releaseinfo-change \
 && apt-get install -y --no-install-recommends \
    gnupg \
    ca-certificates \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# 再進行 LibreOffice 與 fontconfig 安裝
RUN apt-get update --allow-releaseinfo-change \
 && apt-get install -y --no-install-recommends \
    libreoffice \
    fontconfig \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# -- 以下這兩行為「安裝字型」的關鍵步驟 --
RUN mkdir -p /usr/share/fonts/truetype/custom

# 將本機專案裡 ./fonts/MINGLIU.TTC 複製到容器裡
COPY ./fonts/MINGLIU.TTC /usr/share/fonts/truetype/custom/MINGLIU.TTC

# 更新字型快取
RUN fc-cache -f -v

# 安裝 Python 相依
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# 複製後端程式
COPY backend/ ./backend

# 從前端階段帶入打包成果
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist

# 設定 PYTHONPATH，確保可用 `from backend.xxx import ...`
ENV PYTHONPATH=/app

# Flask 對外提供的埠
EXPOSE 5000

################################################################################
# 直接在 Gunicorn 的參數中設定較高的 timeout、使用多 workers/threads
################################################################################
CMD ["/bin/sh", "-c", "gunicorn 'backend.main:create_app()' \
--bind 0.0.0.0:$PORT \
--workers 2 \
--threads 4 \
--timeout 300"]

================================================================================

backend/__init__.py

================================================================================

================================================================================

backend/db.py

================================================================================
# backend/db.py

import os
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
from flask import Flask
from flask_pymongo import PyMongo
from bson.objectid import ObjectId
from pymongo.errors import DuplicateKeyError, ConfigurationError, ConnectionFailure

mongo = PyMongo()

def _ensure_auth_source_admin_if_railway(mongo_uri: str) -> str:
    """
    若偵測到 URI 為 Railway 提供的內部位址 (含 'railway.internal')，
    且尚未設定 authSource，則自動補上 "?authSource=admin" 或 "&authSource=admin"。
    其他平台(非 Railway) 或已經有指定 authSource 時，則不動作。
    """
    if "railway.internal" not in mongo_uri:
        return mongo_uri  # 非 Railway，不動作

    # 解析 URI
    parsed = urlparse(mongo_uri)
    qs = parse_qs(parsed.query)  # 例如 {'authSource': ['admin'], 'replicaSet': ['xxx']}

    # 若已存在 authSource，就不再補
    if "authSource" in qs:
        return mongo_uri

    # 若尚無 authSource，補上 admin
    qs["authSource"] = ["admin"]
    new_query = urlencode(qs, doseq=True)  # 重新組裝 query string
    new_parsed = parsed._replace(query=new_query)
    return urlunparse(new_parsed)


def init_mongo_app(app: Flask):
    """
    初始化 MongoDB 連線。
    
    - 強制要求 MONGO_URI，若未設定則直接報錯，避免默默嘗試 localhost 而出現 Connection refused。
    - 若要在本機開發，可自行在 .env 或系統環境裡設定：
        MONGO_URI="mongodb://127.0.0.1:27017/test"
    - 若偵測到 Railway 提供的 URI (含 railway.internal)，但缺少 authSource，
      則自動加上 "?authSource=admin"（以避免 Authentication failed）。
    """
    raw_uri = os.environ.get("MONGO_URI", "").strip()
    if not raw_uri:
        raise ConfigurationError(
            "ERROR: 環境變數 MONGO_URI 尚未設定，無法連接 MongoDB。\n"
            "請於 Railway/Heroku/本機環境設定有效的 MONGO_URI。"
        )

    # 若是 Railway 的 URI，則自動補 authSource=admin
    mongo_uri = _ensure_auth_source_admin_if_railway(raw_uri)

    print("[INFO] MONGO_URI=", mongo_uri)  # 幫助檢查實際讀到的 URI（可在 logs 看到）

    app.config["MONGO_URI"] = mongo_uri
    mongo.init_app(app)

    try:
        # 檢驗連線是否可行 (會觸發實際連線)
        _ = mongo.cx.server_info()
    except ConnectionFailure as e:
        raise ConnectionFailure(f"無法連接 MongoDB: {e}")

    # 建立好 counters 集合的索引（若不存在）
    # 用來實作「自動遞增序號」功能
    counters_coll = mongo.db["counters"]
    counters_coll.create_index("collection_name", unique=True)


def get_next_sequence(collection_name: str) -> int:
    """
    取得對應 collection_name 的下一個自增序號。
    若尚無紀錄，則從 1 開始。
    """
    counters_coll = mongo.db["counters"]
    result = counters_coll.find_one_and_update(
        {"collection_name": collection_name},
        {"$inc": {"seq": 1}},
        upsert=True,
        return_document=True
    )
    return result["seq"]


def to_iso_date(date_obj):
    """
    安全轉換 datetime => 'YYYY-MM-DD' 字串。
    若原本是 None 或非 datetime, 則回傳 None。
    """
    if not date_obj:
        return None
    return date_obj.strftime("%Y-%m-%d")


def to_iso_datetime(dt):
    """
    將 datetime 轉成 'YYYY-MM-DD HH:MM:SS' 字串。
    若是 None, 則回傳 None。
    """
    if not dt:
        return None
    return dt.strftime("%Y-%m-%d %H:%M:%S")

================================================================================

backend/gantt_management/routes.py

================================================================================
# backend/gantt_management/routes.py

import logging
from datetime import datetime, date
from flask import Blueprint, request, jsonify, abort

from backend.gantt_management.services import (
    create_gantt_task,
    update_gantt_task,
    delete_gantt_task,
    get_all_tasks_for_project,
    get_gantt_snapshots_for_project,
    create_daily_snapshot,
    get_specific_snapshot,
    get_holiday_settings,
    update_holiday_settings,
    update_gantt_snapshot,
    delete_gantt_snapshot,
    reassign_task_ids,
)
from backend.db import to_iso_datetime, mongo

logger = logging.getLogger(__name__)

gantt_bp = Blueprint("gantt_bp", __name__)


# --------------------------------------------------------------------------------
# Gantt 任務相關
# --------------------------------------------------------------------------------

@gantt_bp.route("/<int:project_id>/gantt/tasks", methods=["GET"])
def list_gantt_tasks(project_id):
    logger.info("list_gantt_tasks called. project_id=%s", project_id)
    snapshot_date_str = request.args.get("snapshot_date", "").strip()

    try:
        if snapshot_date_str:
            logger.debug("Fetching snapshot tasks for date=%s", snapshot_date_str)
            # 取得舊版快照
            snapshot_doc = get_specific_snapshot(project_id, snapshot_date_str)
            if not snapshot_doc:
                logger.warning("No snapshot found for %s (project_id=%s)", snapshot_date_str, project_id)
                return jsonify({"error": f"No snapshot found for {snapshot_date_str}"}), 404

            tasks_data = snapshot_doc.get("tasks", [])
            logger.debug("Snapshot date=%s, tasks count=%d", snapshot_date_str, len(tasks_data))
            return jsonify(tasks_data), 200
        else:
            logger.debug("Fetching latest tasks for project_id=%s", project_id)
            tasks = get_all_tasks_for_project(project_id)
            logger.debug("Fetched %d tasks for project_id=%s", len(tasks), project_id)
            return jsonify(tasks), 200

    except Exception as e:
        logger.exception("list_gantt_tasks error:")
        return jsonify({"error": str(e)}), 500


@gantt_bp.route("/<int:project_id>/gantt/tasks", methods=["POST"])
def create_task(project_id):
    """
    新增一筆任務
    body JSON: {
      "text": "任務名稱",
      "start_date": "2025-01-15",
      "end_date": "2025-01-20",  // 或傳 duration
      "duration": 5,            // 二擇一
      "progress": 0.3,
      "parent_id": null,
      "depends": [2, 3],
      "type": "project"|"milestone"|"task"  (可選, 預設 "task")
    }
    """
    data = request.json or {}
    data["project_id"] = project_id

    snapshot_date_str = request.args.get("snapshot_date", "").strip()
    try:
        # 傳到 service 裡: create_gantt_task() 會自動寫入 DB 或更新 snapshot
        task_id = create_gantt_task(data, snapshot_date_str)
        return jsonify({"message": "Task created", "task_id": task_id}), 201
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as ex:
        logger.exception("create_task error:")
        return jsonify({"error": str(ex)}), 500


@gantt_bp.route("/<int:project_id>/gantt/tasks/<int:task_id>", methods=["PUT"])
def put_task(project_id, task_id):
    """
    更新某任務
    body JSON 與 create 相似
    """
    data = request.json or {}
    data["project_id"] = project_id
    data["task_id"] = task_id

    snapshot_date_str = request.args.get("snapshot_date", "").strip()
    try:
        update_gantt_task(task_id, data, snapshot_date_str)
        return jsonify({"message": "Task updated"}), 200
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except KeyError:
        abort(404, description="Task not found")
    except Exception as ex:
        logger.exception("put_task error:")
        return jsonify({"error": str(ex)}), 500


@gantt_bp.route("/<int:project_id>/gantt/tasks/<int:task_id>", methods=["DELETE"])
def remove_task(project_id, task_id):
    """
    刪除某任務
    """
    snapshot_date_str = request.args.get("snapshot_date", "").strip()
    try:
        delete_gantt_task(project_id, task_id, snapshot_date_str)
        return jsonify({"message": "Task deleted"}), 200
    except KeyError:
        abort(404, description="Task not found")
    except Exception as ex:
        logger.exception("remove_task error:")
        return jsonify({"error": str(ex)}), 500


# ★★★ 新增：清空所有任務 (可支援當前最新或指定snapshot) ★★★
@gantt_bp.route("/<int:project_id>/gantt/tasks/clear", methods=["DELETE"])
def clear_all_tasks(project_id):
    """
    query param: snapshot_date=xxxx-xx-xx (可選)
      - 若有指定 snapshot_date => 清空該快照內 tasks
      - 若沒指定 => 清空「當前最新」
    """
    snapshot_date_str = request.args.get("snapshot_date", "").strip()
    try:
        if snapshot_date_str:
            snap_doc = get_specific_snapshot(project_id, snapshot_date_str)
            if not snap_doc:
                return jsonify({"error": f"Snapshot not found for {snapshot_date_str}"}), 404

            updated = update_gantt_snapshot(project_id, snapshot_date_str, new_tasks=[])
            if not updated:
                return jsonify({"error": "Snapshot update failed"}), 400
            return jsonify({"message": f"All tasks cleared in snapshot {snapshot_date_str}"}), 200
        else:
            result = mongo.db["gantt_tasks"].delete_many({"project_id": project_id})
            return jsonify({
                "message": "All current tasks cleared",
                "deleted_count": result.deleted_count
            }), 200

    except Exception as e:
        logger.exception("clear_all_tasks error:")
        return jsonify({"error": str(e)}), 500


# ★★★ 新增：重新分配任務ID => /<int:project_id>/gantt/tasks/reassign-ids ★★★
@gantt_bp.route("/<int:project_id>/gantt/tasks/reassign-ids", methods=["POST"])
def reassign_ids(project_id):
    """
    POST /api/projects/{project_id}/gantt/tasks/reassign-ids(?snapshot_date=xxxx-xx-xx)
    重新分配所有 tasks 的 ID (從1開始依序下去)。同時必須考慮 parent_id, depends, 
    以及可能存在的階層關係，確保重新分配後依賴關係仍然正確。

    前端若有指定 query param snapshot_date => 操作該 snapshot
    若無 => 操作當前最新 gantt_tasks
    """
    snapshot_date_str = request.args.get("snapshot_date", "").strip()
    try:
        reassign_task_ids(project_id, snapshot_date_str)
        return jsonify({"message": "Task IDs have been reassigned"}), 200
    except Exception as ex:
        logger.exception("reassign_ids error:")
        return jsonify({"error": str(ex)}), 500


# --------------------------------------------------------------------------------
# 版本快照
# --------------------------------------------------------------------------------

@gantt_bp.route("/<int:project_id>/gantt/snapshots", methods=["GET"])
def list_snapshots(project_id):
    snapshots = get_gantt_snapshots_for_project(project_id)
    out = []
    for snap in snapshots:
        out.append({
            "date": snap["snapshot_date"],
            "created_at": to_iso_datetime(snap.get("created_at"))
        })
    return jsonify(out), 200


@gantt_bp.route("/<int:project_id>/gantt/snapshots", methods=["POST"])
def make_snapshot(project_id):
    data = request.json or {}
    snap_date_str = data.get("snapshot_date")
    if snap_date_str:
        snap_date = datetime.strptime(snap_date_str, "%Y-%m-%d").date()
    else:
        snap_date = date.today()

    try:
        snap_id = create_daily_snapshot(project_id, snap_date)
        return jsonify({
            "message": "Snapshot created",
            "snapshot_date": snap_date.isoformat(),
            "snapshot_id": snap_id
        }), 201
    except ValueError as e:
        return jsonify({"error": str(e)}), 400


@gantt_bp.route("/<int:project_id>/gantt/snapshots/<snapshot_date_str>", methods=["PUT"])
def put_snapshot(project_id, snapshot_date_str):
    data = request.json or {}
    new_tasks = data.get("tasks", [])
    try:
        updated = update_gantt_snapshot(project_id, snapshot_date_str, new_tasks)
        if not updated:
            return jsonify({"error": "Snapshot not found"}), 404
        return jsonify({"message": "Snapshot updated"}), 200
    except ValueError as e:
        return jsonify({"error": str(e)}), 400


@gantt_bp.route("/<int:project_id>/gantt/snapshots/<snapshot_date_str>", methods=["DELETE"])
def remove_snapshot(project_id, snapshot_date_str):
    try:
        deleted = delete_gantt_snapshot(project_id, snapshot_date_str)
        if not deleted:
            return jsonify({"error": "Snapshot not found"}), 404
        return jsonify({"message": "Snapshot deleted"}), 200
    except ValueError as e:
        return jsonify({"error": str(e)}), 400


# --------------------------------------------------------------------------------
# 假日 & 工作日設定
# --------------------------------------------------------------------------------

@gantt_bp.route("/<int:project_id>/gantt/holidays", methods=["GET"])
def get_holidays(project_id):
    result = get_holiday_settings(project_id)
    if not result:
        result = {
            "project_id": project_id,
            "holidays": [],
            "workdays_per_week": 5,
            "workday_weekdays": [],
            "special_workdays": []
        }
    return jsonify(result), 200


@gantt_bp.route("/<int:project_id>/gantt/holidays", methods=["PUT"])
def put_holidays(project_id):
    data = request.json or {}
    data["project_id"] = project_id
    update_holiday_settings(project_id, data)
    return jsonify({"message": "Holiday settings updated"}), 200

================================================================================

backend/gantt_management/services.py

================================================================================
# backend/gantt_management/services.py

import math
import logging
from datetime import datetime, date, timedelta
from typing import Dict, Any, Optional, List
from bson.objectid import ObjectId

from backend.db import mongo, get_next_sequence

logger = logging.getLogger(__name__)


# --------------------------------------------------------------------------
# Gantt Tasks (當前最新資料，不屬於任何 snapshot)
# --------------------------------------------------------------------------

def get_all_tasks_for_project(project_id: int):
    """
    查詢當前最新資料(不含版本快照)的 tasks。
    """
    cursor = mongo.db["gantt_tasks"].find({"project_id": project_id})
    tasks = []
    for doc in cursor:
        formatted = _format_task_doc(doc)
        if formatted is not None:
            tasks.append(formatted)
    return tasks


def create_gantt_task(data: Dict[str, Any], snapshot_date_str: str = "") -> int:
    """
    新增一筆任務（至最新或指定 snapshot）。
    - 若 snapshot_date_str 有值 => 直接操作該 snapshot 的 tasks (in-memory + update snapshot)
    - 否則 => 建立於 gantt_tasks 集合中。
    """
    project_id = data["project_id"]
    text = data.get("text", "Unnamed Task")
    start_date_str = data.get("start_date")
    end_date_str = data.get("end_date")
    duration = data.get("duration")
    progress = data.get("progress", 0)
    parent_id = data.get("parent_id")
    depends = data.get("depends", [])
    task_type = data.get("type", "task")  # "project"|"milestone"|"task"

    if not start_date_str and not end_date_str and not duration:
        raise ValueError("start_date + (end_date or duration) is required")

    # 檢查 & 修正日期
    if not start_date_str:
        raise ValueError("Must provide start_date")

    start_dt = _parse_date_str(start_date_str, default_date_str="2025-01-01")
    if end_date_str:
        end_dt = _parse_date_str(end_date_str, default_date_str=None)  # None代表就用start+1
        if end_dt is None:
            end_dt = start_dt + timedelta(days=1)
    else:
        if duration:
            end_dt = start_dt + timedelta(days=duration - 1)
        else:
            end_dt = start_dt + timedelta(days=1)

    # 若 end < start，則修正
    if end_dt < start_dt:
        logger.warning(f"[create_gantt_task] end_date < start_date => auto-fix. end={end_dt}, start={start_dt}")
        end_dt = start_dt + timedelta(days=1)

    # 若 type=milestone => force start_date == end_date
    if task_type == "milestone":
        end_dt = start_dt

    # progress
    progress_val = _normalize_progress(progress)

    # 如果是 snapshot 模式 => 先讀出 tasks array，再 in-memory 新增
    if snapshot_date_str:
        snap_doc = mongo.db["gantt_snapshots"].find_one({
            "project_id": project_id,
            "snapshot_date": snapshot_date_str
        })
        if not snap_doc:
            raise ValueError(f"Snapshot not found for {snapshot_date_str}")

        tasks_list = snap_doc.get("tasks", [])

        # 產生一個新的暫定 ID => 找當前 tasks_list 的 max id
        max_id = 0
        for t in tasks_list:
            if t["id"] > max_id:
                max_id = t["id"]
        new_id = max_id + 1

        new_task = {
            "id": new_id,
            "project_id": project_id,
            "text": text,
            "start_date": start_dt.date().isoformat(),
            "end_date": end_dt.date().isoformat(),
            "progress": progress_val,
            "parent_id": parent_id,
            "depends": depends,
            "type": task_type,
            "created_at": datetime.now(),
        }
        tasks_list.append(new_task)

        # 接著更新 snapshot doc
        # 先寫回 tasks_list (未計算父任務), 再進行父任務的自動更新
        mongo.db["gantt_snapshots"].update_one(
            {"_id": snap_doc["_id"]},
            {"$set": {"tasks": tasks_list}}
        )

        # ★重新計算父任務
        _recalc_parent_chain_in_snapshot(project_id, new_id, snapshot_date_str)

        return new_id

    else:
        # 建立於 gantt_tasks 集合
        new_task_id = get_next_sequence("gantt_tasks")
        task_doc = {
            "id": new_task_id,
            "project_id": project_id,
            "text": text,
            "start_date": start_dt.date().isoformat(),
            "end_date": end_dt.date().isoformat(),
            "progress": progress_val,
            "parent_id": parent_id,
            "depends": depends,
            "type": task_type,
            "created_at": datetime.now(),
        }
        mongo.db["gantt_tasks"].insert_one(task_doc)

        # 重新計算父任務
        _recalc_parent_chain_in_db(project_id, new_task_id)

        return new_task_id


def update_gantt_task(task_id: int, data: Dict[str, Any], snapshot_date_str: str = ""):
    """
    更新任務；若 snapshot_date_str 有值 => 更新 snapshot tasks
              否則更新 gantt_tasks 集合
    """
    project_id = data["project_id"]

    start_date_str = data.get("start_date")
    end_date_str = data.get("end_date")
    duration = data.get("duration")
    progress = data.get("progress")
    parent_id = data.get("parent_id") if "parent_id" in data else None
    depends = data.get("depends") if "depends" in data else None
    task_type = data.get("type", None)  # 可能是 "project"|"milestone"|"task"

    if snapshot_date_str:
        # 更新快照 in memory
        snap = mongo.db["gantt_snapshots"].find_one({
            "project_id": project_id,
            "snapshot_date": snapshot_date_str
        })
        if not snap:
            raise KeyError("Snapshot not found")

        tasks_list = snap.get("tasks", [])
        # 找到該task
        found_index = -1
        for i, t in enumerate(tasks_list):
            if t["id"] == task_id:
                found_index = i
                break
        if found_index < 0:
            raise KeyError("Task not found in snapshot")

        updated_doc = dict(tasks_list[found_index])  # copy

        # 更新字段
        if data.get("text") is not None:
            updated_doc["text"] = data["text"]

        if progress is not None:
            updated_doc["progress"] = _normalize_progress(progress)

        if parent_id is not None:
            updated_doc["parent_id"] = parent_id

        if depends is not None:
            updated_doc["depends"] = depends

        # start/end/duration
        old_start = _parse_date_str(updated_doc.get("start_date", ""), "2025-01-01")
        old_end = _parse_date_str(updated_doc.get("end_date", ""), None)
        if start_date_str or end_date_str or duration is not None:
            start_dt = old_start
            end_dt = old_end if old_end else (old_start + timedelta(days=1))

            if start_date_str:
                start_dt = _parse_date_str(start_date_str, "2025-01-01")
            if end_date_str:
                end_dt = _parse_date_str(end_date_str, None)
                if end_dt is None:
                    end_dt = start_dt + timedelta(days=1)
            elif duration is not None:
                end_dt = start_dt + timedelta(days=duration - 1)

            if end_dt < start_dt:
                end_dt = start_dt + timedelta(days=1)

            # 若 type=milestone => 令 start==end
            the_type = task_type or updated_doc.get("type", "task")
            if the_type == "milestone":
                end_dt = start_dt

            updated_doc["start_date"] = start_dt.date().isoformat()
            updated_doc["end_date"] = end_dt.date().isoformat()

        # type
        if task_type:
            updated_doc["type"] = task_type
            # 如果是 milestone, 要強制同一天
            if task_type == "milestone":
                sdt = _parse_date_str(updated_doc["start_date"], "2025-01-01")
                updated_doc["end_date"] = sdt.date().isoformat()

        updated_doc["updated_at"] = datetime.now()

        # 更新回 tasks_list
        tasks_list[found_index] = updated_doc
        # 先寫回
        mongo.db["gantt_snapshots"].update_one(
            {"_id": snap["_id"]},
            {"$set": {"tasks": tasks_list}}
        )

        # 再重新計算父任務
        _recalc_parent_chain_in_snapshot(project_id, task_id, snapshot_date_str)

    else:
        # 更新 DB
        doc = mongo.db["gantt_tasks"].find_one({"id": task_id, "project_id": project_id})
        if not doc:
            raise KeyError("Task not found")

        update_fields = {}

        if data.get("text") is not None:
            update_fields["text"] = data["text"]

        if progress is not None:
            update_fields["progress"] = _normalize_progress(progress)

        if parent_id is not None:
            update_fields["parent_id"] = parent_id
        if depends is not None:
            update_fields["depends"] = depends

        old_start_str = doc.get("start_date", "")
        old_end_str = doc.get("end_date", "")
        old_start_dt = _parse_date_str(old_start_str, "2025-01-01")
        old_end_dt = _parse_date_str(old_end_str, None)

        if start_date_str or end_date_str or duration is not None:
            start_dt = old_start_dt
            end_dt = old_end_dt if old_end_dt else (old_start_dt + timedelta(days=1))

            if start_date_str:
                start_dt = _parse_date_str(start_date_str, "2025-01-01")
            if end_date_str:
                end_dt = _parse_date_str(end_date_str, None)
                if end_dt is None:
                    end_dt = start_dt + timedelta(days=1)
            elif duration is not None:
                end_dt = start_dt + timedelta(days=duration - 1)

            if end_dt < start_dt:
                end_dt = start_dt + timedelta(days=1)

            # 若 type=milestone => 令 start==end
            the_type = task_type or doc.get("type", "task")
            if the_type == "milestone":
                end_dt = start_dt

            update_fields["start_date"] = start_dt.date().isoformat()
            update_fields["end_date"] = end_dt.date().isoformat()

        if task_type:
            update_fields["type"] = task_type
            if task_type == "milestone":
                sdt = _parse_date_str(update_fields.get("start_date") or old_start_str, "2025-01-01")
                update_fields["end_date"] = sdt.date().isoformat()

        update_fields["updated_at"] = datetime.now()

        if update_fields:
            mongo.db["gantt_tasks"].update_one(
                {"id": task_id, "project_id": project_id},
                {"$set": update_fields}
            )

        # 重新計算父任務
        _recalc_parent_chain_in_db(project_id, task_id)


def delete_gantt_task(project_id: int, task_id: int, snapshot_date_str: str = ""):
    """
    刪除任務；若 snapshot_date_str 有值 => 在 snapshot 中刪
             否則在 DB 中刪
    """
    if snapshot_date_str:
        snap = mongo.db["gantt_snapshots"].find_one({
            "project_id": project_id,
            "snapshot_date": snapshot_date_str
        })
        if not snap:
            raise KeyError("Snapshot not found")

        tasks_list = snap.get("tasks", [])
        new_tasks_list = []
        deleted = False

        for t in tasks_list:
            if t["id"] == task_id:
                deleted = True
            else:
                new_tasks_list.append(t)

        if not deleted:
            raise KeyError("Task not found")

        # 寫回 snapshot
        mongo.db["gantt_snapshots"].update_one(
            {"_id": snap["_id"]},
            {"$set": {"tasks": new_tasks_list}}
        )

        # 父任務重新計算
        _recalc_parent_chain_in_snapshot(project_id, task_id, snapshot_date_str)

    else:
        result = mongo.db["gantt_tasks"].delete_one({
            "id": task_id,
            "project_id": project_id
        })
        if result.deleted_count == 0:
            raise KeyError("Task not found")

        # 父任務重新計算
        _recalc_parent_chain_in_db(project_id, task_id)


def _format_task_doc(doc):
    """
    將資料庫中的 task doc 格式化成前端需要的欄位結構。
    """
    if "id" not in doc:
        return None  # 理論上已在 DB 內確定都有 id
    return {
        "id": doc["id"],
        "text": doc.get("text", ""),
        "start_date": doc.get("start_date", ""),
        "end_date": doc.get("end_date", ""),
        "progress": doc.get("progress", 0.0),
        "parent_id": doc.get("parent_id"),
        "depends": doc.get("depends", []),
        "duration": _calc_duration(doc.get("start_date"), doc.get("end_date")),
        "type": doc.get("type", "task"),  # 預設是 "task" 以相容舊資料
    }


def _calc_duration(start_date_iso, end_date_iso):
    if not start_date_iso or not end_date_iso:
        return 1
    try:
        sdt = datetime.strptime(start_date_iso, "%Y-%m-%d")
        edt = datetime.strptime(end_date_iso, "%Y-%m-%d")
    except ValueError:
        return 1
    diff = (edt - sdt).days + 1
    if diff < 1:
        return 1
    return diff


# --------------------------------------------------------------------------
# 版本快照 (gantt_snapshots) ...
# --------------------------------------------------------------------------

def get_gantt_snapshots_for_project(project_id: int):
    cursor = mongo.db["gantt_snapshots"].find(
        {"project_id": project_id},
        sort=[("snapshot_date", 1)]
    )
    return list(cursor)


def get_specific_snapshot(project_id: int, snapshot_date_str: str):
    snap = mongo.db["gantt_snapshots"].find_one({
        "project_id": project_id,
        "snapshot_date": snapshot_date_str
    })
    return snap


def create_daily_snapshot(project_id: int, snap_date: date) -> str:
    """
    建立該日期的快照(若已存在則擲錯)。
    """
    exists = mongo.db["gantt_snapshots"].find_one({
        "project_id": project_id,
        "snapshot_date": snap_date.isoformat()
    })
    if exists:
        raise ValueError(f"Snapshot already exists for {snap_date.isoformat()}")

    tasks = get_all_tasks_for_project(project_id)
    snap_doc = {
        "project_id": project_id,
        "snapshot_date": snap_date.isoformat(),
        "tasks": tasks,
        "created_at": datetime.now()
    }
    result = mongo.db["gantt_snapshots"].insert_one(snap_doc)
    return str(result.inserted_id)


def update_gantt_snapshot(project_id: int, snapshot_date_str: str, new_tasks: list) -> bool:
    filter_ = {
        "project_id": project_id,
        "snapshot_date": snapshot_date_str
    }
    existing = mongo.db["gantt_snapshots"].find_one(filter_)
    if not existing:
        return False

    update_data = {
        "tasks": new_tasks,
        "updated_at": datetime.now()
    }
    mongo.db["gantt_snapshots"].update_one(filter_, {"$set": update_data})
    return True


def delete_gantt_snapshot(project_id: int, snapshot_date_str: str) -> bool:
    filter_ = {
        "project_id": project_id,
        "snapshot_date": snapshot_date_str
    }
    result = mongo.db["gantt_snapshots"].delete_one(filter_)
    return (result.deleted_count > 0)


# --------------------------------------------------------------------------
# 假日 & 工作日設定 (gantt_holidays) ...
# --------------------------------------------------------------------------

def get_holiday_settings(project_id: int) -> Optional[dict]:
    doc = mongo.db["gantt_holidays"].find_one({"project_id": project_id})
    return doc


def update_holiday_settings(project_id: int, data: Dict[str, Any]):
    filter_ = {"project_id": project_id}
    update_data = {
        "project_id": project_id,
        "holidays": data.get("holidays", []),
        "workdays_per_week": data.get("workdays_per_week", 5),
        "workday_weekdays": data.get("workday_weekdays", []),
        "special_workdays": data.get("special_workdays", []),
        "updated_at": datetime.now()
    }
    mongo.db["gantt_holidays"].update_one(
        filter_,
        {"$set": update_data},
        upsert=True
    )


# --------------------------------------------------------------------------
# 「父任務自動計算」的輔助函式
# --------------------------------------------------------------------------

def _recalc_parent_chain_in_db(project_id: int, changed_task_id: int):
    """
    從 changed_task_id 開始，向上遞歸更新父任務(start_date, end_date, progress)。
    使用 gantt_tasks 集合。
    """
    coll = mongo.db["gantt_tasks"]

    # 先找到該任務
    changed_doc = coll.find_one({"project_id": project_id, "id": changed_task_id})
    if not changed_doc:
        # 可能是被刪除了
        pass

    # 逐層向上更新
    # 例如 BFS: 先找 changed_doc 的 parent, 再找 parent 的 parent...
    visited = set()
    current_parent_id = changed_doc["parent_id"] if changed_doc else None

    while current_parent_id:
        if current_parent_id in visited:
            # 避免環
            break
        visited.add(current_parent_id)

        parent_doc = coll.find_one({"project_id": project_id, "id": current_parent_id})
        if not parent_doc:
            break

        # 找出所有孩子
        children = list(coll.find({"project_id": project_id, "parent_id": current_parent_id}))

        new_start, new_end, new_progress = _calc_parent_fields(children, parent_doc.get("type", "task"))
        coll.update_one(
            {"_id": parent_doc["_id"]},
            {"$set": {
                "start_date": new_start.isoformat(),
                "end_date": new_end.isoformat(),
                "progress": new_progress,
                "updated_at": datetime.now()
            }}
        )
        current_parent_id = parent_doc.get("parent_id")


def _recalc_parent_chain_in_snapshot(project_id: int, changed_task_id: int, snapshot_date: str):
    """
    與上面類似，但針對 snapshot 裡的 tasks array (in-memory)。
    """
    snap = mongo.db["gantt_snapshots"].find_one({
        "project_id": project_id,
        "snapshot_date": snapshot_date
    })
    if not snap:
        return
    tasks_list = snap.get("tasks", [])
    # 先找 changed task
    changed_doc = None
    for t in tasks_list:
        if t["id"] == changed_task_id:
            changed_doc = t
            break

    visited = set()
    current_parent_id = changed_doc["parent_id"] if changed_doc else None

    while current_parent_id:
        if current_parent_id in visited:
            break
        visited.add(current_parent_id)

        parent_task = None
        for t in tasks_list:
            if t["id"] == current_parent_id:
                parent_task = t
                break

        if not parent_task:
            break

        # 找出所有孩子
        children = [c for c in tasks_list if c.get("parent_id") == current_parent_id]

        new_start, new_end, new_progress = _calc_parent_fields(children, parent_task.get("type", "task"))
        parent_task["start_date"] = new_start.isoformat()
        parent_task["end_date"] = new_end.isoformat()
        parent_task["progress"] = new_progress
        parent_task["updated_at"] = datetime.now()

        current_parent_id = parent_task.get("parent_id")

    # 最後寫回 DB
    mongo.db["gantt_snapshots"].update_one(
        {"_id": snap["_id"]},
        {"$set": {"tasks": tasks_list}}
    )


def _calc_parent_fields(child_tasks: List[dict], parent_type: str):
    """
    給定所有子任務 (child_tasks)，計算父任務的 start_date, end_date, progress.
    - start_date = min( child.start )
    - end_date = max( child.end )
    - progress = ( 所有子任務 progress 的「平均」 ) (亦可改成加權平均)
    - 若 parent_type == "milestone"，強制 start_date=end_date
    """
    if not child_tasks:
        # 沒小孩 => 父任務可能是空殼 => 預設 progress=0, start/end=今日
        today = datetime.today().date()
        return (today, today, 0.0)

    min_start = None
    max_end = None
    total_progress = 0.0
    for c in child_tasks:
        s = _parse_date_str(c.get("start_date", ""), "2025-01-01")
        e = _parse_date_str(c.get("end_date", ""), "2025-01-02")
        p = c.get("progress", 0.0)
        if min_start is None or s < min_start:
            min_start = s
        if max_end is None or e > max_end:
            max_end = e
        total_progress += float(p)

    avg_progress = total_progress / len(child_tasks)
    if avg_progress < 0:
        avg_progress = 0
    if avg_progress > 1:
        avg_progress = 1.0

    if parent_type == "milestone":
        # 強制同一天
        if min_start and max_end:
            # 就以min_start為準
            return (min_start.date(), min_start.date(), avg_progress)
        else:
            today = datetime.today().date()
            return (today, today, avg_progress)

    # 一般( project / task )
    if min_start is None:
        min_start = datetime.today()
    if max_end is None:
        max_end = min_start
    return (min_start.date(), max_end.date(), avg_progress)


# --------------------------------------------------------------------------
# 重新分配任務ID
# --------------------------------------------------------------------------

def reassign_task_ids(project_id: int, snapshot_date_str: str = ""):
    """
    將所有 (當前最新 or 指定snapshot) 之 tasks 重新分配 ID。
    重新分配時，需要保持依賴關係與父子關係的結構不變。
      - parent_id / depends 裡的 id 也要跟著改。
    從1開始連號，建議依照「無 parent 的排在前面(可能有多個樹根)，再 BFS or DFS 排子」。
    """
    if snapshot_date_str:
        snap = mongo.db["gantt_snapshots"].find_one({
            "project_id": project_id,
            "snapshot_date": snapshot_date_str
        })
        if not snap:
            raise ValueError(f"Snapshot not found for {snapshot_date_str}")
        tasks_list = snap.get("tasks", [])
        new_tasks_list = _reassign_ids_in_memory(tasks_list)
        # 寫回
        mongo.db["gantt_snapshots"].update_one(
            {"_id": snap["_id"]},
            {"$set": {"tasks": new_tasks_list}}
        )
    else:
        # 從 DB 讀取
        tasks_cursor = mongo.db["gantt_tasks"].find({"project_id": project_id})
        tasks_list = list(tasks_cursor)
        if not tasks_list:
            return  # no tasks, nothing to do

        new_tasks_list = _reassign_ids_in_memory(tasks_list)
        # 先清空後再插入? 或者update?
        # 最完美方式：為避免刪除插入後 counters 出問題，
        # 這裡直接一筆筆 update 也行。不過最簡單安全做法就是「整個 mapping」後逐筆 update。
        # new_tasks_list只是「doc + new_id, new_depends, new_parent_id」。我們只更新 id/depends/parent_id。
        # 其餘欄位不變。
        id_map = {}  # old_id -> new_id
        for d in new_tasks_list:
            id_map[d["_original_id"]] = d["id"]

        for new_doc in new_tasks_list:
            # 依 new_doc["id"], new_doc["depends"], new_doc["parent_id"] 去 update
            old_id = new_doc["_original_id"]
            update_fields = {
                "id": new_doc["id"],
                "parent_id": new_doc.get("parent_id"),
                "depends": new_doc.get("depends", [])
            }
            mongo.db["gantt_tasks"].update_one(
                {"project_id": project_id, "id": old_id},
                {"$set": update_fields}
            )


def _reassign_ids_in_memory(tasks_list: List[dict]) -> List[dict]:
    """
    將 tasks_list (array of dict) 重新分配 id, parent_id, depends 等。
    1) 找出所有無 parent 的作為 root
    2) BFS or DFS 順序依序分配新 ID
    3) 需維護 old_id => new_id map，套用到 depends & parent_id
    4) 回傳新的 tasks_list(帶有新的 id/depends/parent_id)
       其餘欄位不變。
    """
    # 先複製
    cloned = []
    for t in tasks_list:
        cloned.append(dict(t))  # shallow copy

    # old_id => doc
    doc_by_id = {doc["id"]: doc for doc in cloned}
    # adjacency => parent -> list of children
    children_map = {}
    for d in cloned:
        pid = d.get("parent_id")
        if pid not in children_map:
            children_map[pid] = []
        children_map[pid].append(d)

    # 找出 roots => parent_id 不存在或 None
    roots = [d for d in cloned if not d.get("parent_id")]

    queue = []
    for r in roots:
        queue.append(r)

    old_to_new = {}
    new_id_counter = 1

    result_order = []

    while queue:
        current = queue.pop(0)
        old_id = current["id"]

        # 指派新 id
        assigned_id = new_id_counter
        new_id_counter += 1
        old_to_new[old_id] = assigned_id

        result_order.append(current)

        # 把孩子放到 queue
        cid_list = children_map.get(old_id, [])
        # 這邊可根據自己想要的排序(例如按原本id排序)
        cid_list = sorted(cid_list, key=lambda x: x["id"])
        for cdoc in cid_list:
            queue.append(cdoc)

    # 套用到 cloned
    for doc in result_order:
        old_id = doc["id"]
        doc["_original_id"] = old_id
        doc["id"] = old_to_new[old_id]
        # parent_id
        if doc.get("parent_id"):
            doc["parent_id"] = old_to_new[doc["parent_id"]]
        # depends
        new_depends = []
        for dep in doc.get("depends", []):
            if dep in old_to_new:
                new_depends.append(old_to_new[dep])
        doc["depends"] = new_depends

    return result_order


# --------------------------------------------------------------------------
# 工具函式
# --------------------------------------------------------------------------

def _parse_date_str(date_str: str, default_date_str: Optional[str]) -> Optional[datetime]:
    """
    將 'YYYY-MM-DD' parse 成 datetime(YYYY,MM,DD) (無時間)
    若失敗或空 => 若 default_date_str 不為 None 就用 default_date_str; 否則回傳 None
    """
    if not date_str:
        if default_date_str is not None:
            return datetime.strptime(default_date_str, "%Y-%m-%d")
        return None
    try:
        return datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        if default_date_str is not None:
            return datetime.strptime(default_date_str, "%Y-%m-%d")
        return None


def _normalize_progress(progress):
    # 確保介於 0 ~ 1
    try:
        p = float(progress)
    except:
        p = 0.0
    if math.isnan(p) or p < 0:
        p = 0.0
    if p > 1:
        p = 1.0
    return p

================================================================================

backend/main.py

================================================================================
# backend/main.py

import os
from flask import Flask, send_from_directory, request, jsonify
from werkzeug.exceptions import NotFound

from backend.project_management.routes import projects_bp
from backend.material_management.routes import material_bp
from backend.site_diary.routes import site_diary_bp
from backend.staff_management.routes import staff_bp

# ★ 移除對 server.py 的 import
# from backend.server import download_bp

# ★ 引用並初始化 Mongo
from backend.db import init_mongo_app

# SSE Blueprint
from backend.site_diary.progress_sse import progress_sse_bp

# Gantt Management blueprint
from backend.gantt_management.routes import gantt_bp


def create_app():
    app = Flask(__name__, static_folder="../frontend/dist", static_url_path="/")

    # 初始化 MongoDB
    init_mongo_app(app)

    # Blueprint 註冊
    app.register_blueprint(projects_bp, url_prefix='/api/projects')
    app.register_blueprint(material_bp, url_prefix='/api')
    app.register_blueprint(site_diary_bp, url_prefix='/api/projects')
    app.register_blueprint(staff_bp, url_prefix='/api/staff')

    # ★ 移除 server.py blueprint
    # app.register_blueprint(download_bp)

    # SSE blueprint
    app.register_blueprint(progress_sse_bp, url_prefix='/api')

    # Gantt blueprint
    app.register_blueprint(gantt_bp, url_prefix='/api/projects')

    # 提供前端打包後的 SPA 檔案
    @app.route('/', defaults={'path': ''})
    @app.route('/<path:path>')
    def serve_vue_app(path):
        dist_dir = os.path.abspath(app.static_folder)
        full_path = os.path.join(dist_dir, path)
        if path and os.path.exists(full_path):
            return send_from_directory(dist_dir, path)
        else:
            return send_from_directory(dist_dir, 'index.html')

    # ===============★ 處理 404 ★===============
    # 如果路由未匹配到，而且是 /api/... ，就回傳 JSON 404。
    # 否則一律回傳前端 index.html 讓前端路由處理 (SPA)。
    @app.errorhandler(NotFound)
    def handle_404(e):
        if request.path.startswith('/api'):
            return jsonify({"error": "Not found"}), 404

        dist_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "frontend", "dist"))
        return send_from_directory(dist_dir, 'index.html')

    return app

================================================================================

backend/material_management/constants.py

================================================================================
# backend/material_management/constants.py

special_fields = {
    "工程編號": (6, 2, 4, "37/2024/DVPS"),
    "工程名稱": (7, 2, 4, "黑沙馬路行人道優化工程(第二期)"),
    "文件編號": (6, 8, 8, "")
}

regular_fields = [
    ("報批之材料", 11, 3),
    ("牌子(如有)", 12, 3),
    ("預算表之項目編號", 11, 7),
    ("型號", 12, 6),
    ("貨期", 13, 6),
    ("數量", 14, 6),
]

attachment_fields = [
    ("附件", 15, 6)
]

material_type_checkboxes = [
    ("結構", 7, 6),
    ("供水", 8, 6),
    ("建築", 7, 8),
    ("電氣", 8, 8),
    ("排水", 7, 10),
    ("其他", 8, 10)
]

material_status_checkboxes = [
    ("與設計相同", 13, 1),
    ("與標書相同", 14, 1),
    ("與後加工程建議書相同", 15, 1),
    ("同等質量", 16, 1),
    ("替換材料", 17, 1),
    ("原設計沒有指定", 18, 1)
]

attachment_type_checkboxes = [
    ("樣板", 16, 5),
    ("目錄", 17, 5),
    ("來源證", 16, 7),
    ("其他", 17, 7)
]

================================================================================

backend/material_management/routes.py

================================================================================
# backend/material_management/routes.py
from flask import Blueprint, request, send_file
from .services import generate_excel

material_bp = Blueprint('material_bp', __name__)

@material_bp.route('/material-submission', methods=['POST'])
def material_submission():
    """
    接收 JSON 表單資料，產生 Excel 並回傳。
    """
    data = request.json
    temp_file_path = generate_excel(data)
    file_name = data.get('檔案名稱', '材料報批表_filled.xlsx')
    if not file_name.endswith('.xlsx'):
        file_name += '.xlsx'
    return send_file(temp_file_path, as_attachment=True, download_name=file_name)

================================================================================

backend/material_management/services.py

================================================================================
# backend/material_management/services.py
import os
import tempfile
import shutil
from datetime import datetime

from openpyxl import load_workbook
from openpyxl.styles import Font
from openpyxl.drawing.image import Image
from openpyxl.drawing.spreadsheet_drawing import OneCellAnchor, AnchorMarker
from openpyxl.drawing.xdr import XDRPositiveSize2D
from flask import current_app

from .constants import (
    special_fields,
    regular_fields,
    attachment_fields,
    material_type_checkboxes,
    material_status_checkboxes,
    attachment_type_checkboxes
)

def generate_excel(form_data):
    """
    依照使用者表單資料，填入並產生材料報批的 Excel 檔。
    回傳產生之暫存檔路徑。
    """
    # 複製模板到暫存檔
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx')
    temp_file.close()

    # 模板路徑
    template_path = os.path.join(
        current_app.root_path, 
        'material_management', 
        'templates', 
        'material_template.xlsx'
    )
    shutil.copy(template_path, temp_file.name)

    wb = load_workbook(temp_file.name)
    wb._external_links = []
    ws = wb.active

    # 加入 logo
    img_path = os.path.join(
        current_app.root_path,
        'material_management',
        'static',
        'logo.jpg'
    )
    img = Image(img_path)
    width_emu = int(4.09 * 360000)   # 4.09 cm
    height_emu = int(1.62 * 360000) # 1.62 cm
    marker = AnchorMarker(col=0, colOff=133350, row=1, rowOff=38100)
    size = XDRPositiveSize2D(cx=width_emu, cy=height_emu)
    img.anchor = OneCellAnchor(_from=marker, ext=size)
    ws.add_image(img)

    # 填入 special_fields
    for field, (row, start_col, end_col, default_val) in special_fields.items():
        merged_cell = ws.cell(row=row, column=start_col)
        merged_cell.value = form_data.get(field, default_val)
        if field == "工程名稱":
            merged_cell.font = Font(size=10)

    # 填入 regular_fields
    for field, row, col in regular_fields:
        ws.cell(row=row, column=col, value=form_data.get(field, ''))

    # 填入附件欄位
    for field, row, col in attachment_fields:
        ws.cell(row=row, column=col, value=form_data.get(field, ''))

    # 處理 checkbox
    for checkboxes in [
        material_type_checkboxes,
        material_status_checkboxes,
        attachment_type_checkboxes
    ]:
        for (fld, r, c) in checkboxes:
            if form_data.get(fld):  # 若有值則勾選
                ws.cell(row=r, column=c, value="☑" + fld)
            else:
                ws.cell(row=r, column=c, value="□" + fld)

    # 填入日期
    default_date = datetime.now().strftime("%Y/%m/%d")
    ws.cell(row=21, column=7, value=form_data.get('日期', default_date))

    wb.save(temp_file.name)
    return temp_file.name

================================================================================

backend/material_management/static/logo.jpg

================================================================================

backend/project_management/routes.py

================================================================================
# backend/project_management/routes.py

from flask import Blueprint, request, jsonify, abort
from datetime import datetime
from bson import ObjectId

from backend.db import mongo, get_next_sequence, to_iso_date

projects_bp = Blueprint('projects_bp', __name__)

@projects_bp.route('/', methods=['GET'])
def get_projects():
    """
    取得所有專案列表
    """
    cursor = mongo.db.projects.find({}, sort=[("id", 1)])
    result = []
    for doc in cursor:
        result.append({
            "id": doc["id"],
            "name": doc.get("name"),
            "description": doc.get("description"),
            "start_date": to_iso_date(doc.get("start_date")),
            "end_date": to_iso_date(doc.get("end_date")),
            "owner": doc.get("owner"),
            "objective": doc.get("objective"),
            "duration_type": doc.get("duration_type"),
            "duration_days": doc.get("duration_days"),
            "job_number": doc.get("job_number"),
            "contractor": doc.get("contractor"),
        })
    return jsonify(result), 200


@projects_bp.route('/', methods=['POST'])
def create_project():
    """
    建立新專案
    """
    data = request.json or {}
    name = data.get('name')
    if not name:
        return jsonify({"error": "Project name is required"}), 400

    description = data.get('description')
    start_date_str = data.get('start_date')
    end_date_str = data.get('end_date')
    owner = data.get('owner')
    objective = data.get('objective')
    duration_type = data.get('duration_type')
    duration_days = data.get('duration_days')
    job_number = data.get('job_number')
    contractor = data.get('contractor')

    # 轉換為 datetime(yyyy,mm,dd) 而不是 date()，以讓 PyMongo 能正常儲存
    start_date = datetime.strptime(start_date_str, '%Y-%m-%d') if start_date_str else None
    end_date = datetime.strptime(end_date_str, '%Y-%m-%d') if end_date_str else None

    # 取得此集合下一個可用的整數 ID
    new_id = get_next_sequence("projects")

    doc = {
        "id": new_id,
        "name": name,
        "description": description,
        "start_date": start_date,
        "end_date": end_date,
        "owner": owner,
        "objective": objective,
        "duration_type": duration_type,
        "duration_days": duration_days,
        "job_number": job_number,
        "contractor": contractor,
    }

    mongo.db.projects.insert_one(doc)

    return jsonify({"message": "Project created", "project_id": new_id}), 201


@projects_bp.route('/<int:project_id>', methods=['GET'])
def get_project_detail(project_id):
    """
    取得單一專案詳細資訊
    """
    doc = mongo.db.projects.find_one({"id": project_id})
    if not doc:
        abort(404, description="Project not found")

    return jsonify({
        "id": doc["id"],
        "name": doc.get("name"),
        "description": doc.get("description"),
        "start_date": to_iso_date(doc.get("start_date")),
        "end_date": to_iso_date(doc.get("end_date")),
        "owner": doc.get("owner"),
        "objective": doc.get("objective"),
        "duration_type": doc.get("duration_type"),
        "duration_days": doc.get("duration_days"),
        "job_number": doc.get("job_number"),
        "contractor": doc.get("contractor"),
    }), 200


@projects_bp.route('/<int:project_id>', methods=['PUT'])
def update_project(project_id):
    """
    更新專案
    """
    doc = mongo.db.projects.find_one({"id": project_id})
    if not doc:
        abort(404, description="Project not found")

    data = request.json or {}
    update_fields = {}

    if "name" in data:
        update_fields["name"] = data["name"]
    if "description" in data:
        update_fields["description"] = data["description"]
    if "owner" in data:
        update_fields["owner"] = data["owner"]
    if "objective" in data:
        update_fields["objective"] = data["objective"]
    if "duration_type" in data:
        update_fields["duration_type"] = data["duration_type"]
    if "duration_days" in data:
        update_fields["duration_days"] = data["duration_days"]
    if "job_number" in data:
        update_fields["job_number"] = data["job_number"]
    if "contractor" in data:
        update_fields["contractor"] = data["contractor"]

    # 處理日期，改為存 datetime 而非 date
    start_date_str = data.get('start_date')
    end_date_str = data.get('end_date')
    if start_date_str is not None:
        if start_date_str == "":
            update_fields["start_date"] = None
        else:
            update_fields["start_date"] = datetime.strptime(start_date_str, '%Y-%m-%d')
    if end_date_str is not None:
        if end_date_str == "":
            update_fields["end_date"] = None
        else:
            update_fields["end_date"] = datetime.strptime(end_date_str, '%Y-%m-%d')

    if update_fields:
        mongo.db.projects.update_one({"id": project_id}, {"$set": update_fields})

    return jsonify({"message": "Project updated"}), 200


@projects_bp.route('/<int:project_id>', methods=['DELETE'])
def delete_project(project_id):
    """
    刪除專案
    """
    result = mongo.db.projects.delete_one({"id": project_id})
    if result.deleted_count == 0:
        abort(404, description="Project not found")

    return jsonify({"message": "Project deleted"}), 200

================================================================================

backend/site_diary/progress_sse.py

================================================================================
# backend/site_diary/progress_sse.py

import time
import uuid
import threading
from flask import Blueprint, Response, stream_with_context

progress_sse_bp = Blueprint('progress_sse_bp', __name__)

# 全域字典：job_id -> {"status": ..., "progress": ..., "file_path": ..., "error_msg": ...}
# 實務可用 Redis / DB 等替代。
progress_store = {}

@progress_sse_bp.route('/progress-sse/<job_id>', methods=['GET'])
def sse_progress(job_id):
    """
    SSE 端點：前端可透過 EventSource('/api/progress-sse/<job_id>')
    來接收進度 (以 data: {...} 形式送出)。
    只要 status != 'done'/'error'，就持續每秒推送一次。
    """
    @stream_with_context
    def generate_stream():
        while True:
            job_info = progress_store.get(job_id)
            if not job_info:
                # job_id 不存在 => 立即送出錯誤並結束串流
                yield _sse_pack({"error": "Invalid job_id"}, event="error")
                break

            data_dict = {
                "progress": job_info.get("progress", 0),
                "status": job_info.get("status", "unknown"),
                "error_msg": job_info.get("error_msg", "")
            }

            yield _sse_pack(data_dict)

            # 若完成或出錯，結束 SSE
            if data_dict["status"] in ("done", "error"):
                break

            # 否則繼續等待一秒
            time.sleep(1)

    return Response(generate_stream(), mimetype='text/event-stream')


def _sse_pack(data: dict, event=None) -> str:
    """
    將 dict 轉成 SSE 格式字串, 例如:
      event: <event>\n
      data: <json>\n
      \n
    """
    import json
    lines = []
    if event:
        lines.append(f"event: {event}")
    json_str = json.dumps(data, ensure_ascii=False)
    lines.append(f"data: {json_str}")
    lines.append("")  # 空行代表訊息分隔
    return "\n".join(lines) + "\n"

================================================================================

backend/site_diary/routes.py

================================================================================
# backend/site_diary/routes.py

import traceback
import logging
from flask import Blueprint, request, jsonify, send_file, Response, abort, current_app
from datetime import datetime
from urllib.parse import quote
import os
import tempfile
import shutil
import zipfile

from backend.db import mongo, get_next_sequence, to_iso_date, to_iso_datetime
logger = logging.getLogger(__name__)

site_diary_bp = Blueprint('site_diary_bp', __name__)

# ★ 新增
import threading
import uuid
from backend.site_diary.progress_sse import progress_store
from backend.site_diary.services import (
    generate_diary_xlsx_only,
    generate_diary_pdf_sheet,
)


@site_diary_bp.route('/<int:project_id>/site_diaries', methods=['POST'])
def create_site_diary(project_id):
    logger.debug("create_site_diary() called, project_id=%s", project_id)

    project_doc = mongo.db.projects.find_one({"id": project_id})
    if not project_doc:
        logger.warning("Project not found: project_id=%s, returning 404", project_id)
        abort(404, description="Project not found")

    data = request.json or {}
    logger.debug("Received data for create_site_diary: %s", data)

    report_date_str = data.get('report_date')
    if report_date_str:
        report_date = datetime.strptime(report_date_str, '%Y-%m-%d')
    else:
        report_date = None

    doc_id = get_next_sequence("site_diaries")

    workers_dict = data.get('workers', {})
    machines_dict = data.get('machines', {})
    staff_ids = data.get('staff_ids', [])

    site_diary_doc = {
        "id": doc_id,
        "project_id": project_id,
        "report_date": report_date,
        "weather_morning": data.get('weather_morning', ''),
        "weather_noon": data.get('weather_noon', ''),
        "day_count": data.get('day_count'),
        "summary": data.get('summary', ''),
        "workers": workers_dict,
        "machines": machines_dict,
        "staff_ids": staff_ids,
        "updated_at": datetime.now()
    }

    # 若未填 day_count，則自動計算
    if site_diary_doc["day_count"] is None:
        max_day = mongo.db.site_diaries.find(
            {"project_id": project_id, "day_count": {"$ne": None}},
            {"day_count": 1}
        ).sort("day_count", -1).limit(1)
        row = next(max_day, None)
        if row:
            site_diary_doc["day_count"] = row["day_count"] + 1
        else:
            site_diary_doc["day_count"] = 1

    mongo.db.site_diaries.insert_one(site_diary_doc)
    logger.info("Site diary created: diary_id=%s, day_count=%s", doc_id, site_diary_doc["day_count"])

    return jsonify({
        "message": "Site diary created",
        "site_diary_id": doc_id,
        "day_count": site_diary_doc["day_count"]
    }), 201


@site_diary_bp.route('/<int:project_id>/site_diaries', methods=['GET'])
def get_site_diaries(project_id):
    """
    可傳 query param:
      - sort_by=(report_date|day_count|updated_at|...) 預設 report_date
      - sort_order=(1|-1) 預設 1 (ASC)
    """
    logger.debug("get_site_diaries() called, project_id=%s", project_id)

    project_doc = mongo.db.projects.find_one({"id": project_id})
    if not project_doc:
        logger.warning("Project not found: project_id=%s, returning 404", project_id)
        abort(404, description="Project not found")

    sort_by = request.args.get('sort_by', 'report_date').strip() or 'report_date'
    sort_order_str = request.args.get('sort_order', '1').strip()
    try:
        sort_order = int(sort_order_str)
        if sort_order not in (1, -1):
            sort_order = 1
    except ValueError:
        sort_order = 1

    cursor = mongo.db.site_diaries.find({"project_id": project_id}).sort([(sort_by, sort_order)])
    results = []

    for sd in cursor:
        worker_list = []
        for w_type, qty in sd.get("workers", {}).items():
            worker_list.append({"type": w_type, "quantity": qty})
        machine_list = []
        for m_type, qty in sd.get("machines", {}).items():
            machine_list.append({"type": m_type, "quantity": qty})
        staff_list = []
        staff_ids = sd.get("staff_ids", [])
        if staff_ids:
            staff_docs = list(mongo.db.staff.find({"id": {"$in": staff_ids}}))
            staff_map = {s["id"]: s for s in staff_docs}
            for sid in staff_ids:
                st_doc = staff_map.get(sid)
                if st_doc:
                    staff_list.append({
                        "id": st_doc["id"],
                        "name": st_doc.get("name"),
                        "role": st_doc.get("role")
                    })

        results.append({
            "id": sd["id"],
            "report_date": to_iso_date(sd.get("report_date")),
            "weather_morning": sd.get("weather_morning", ""),
            "weather_noon": sd.get("weather_noon", ""),
            "day_count": sd.get("day_count"),
            "summary": sd.get("summary", ""),
            "workers": worker_list,
            "machines": machine_list,
            "staffs": staff_list,
            "updated_at": to_iso_datetime(sd.get("updated_at"))
        })

    logger.debug("Returning %d diaries for project_id=%s", len(results), project_id)
    return jsonify(results), 200


@site_diary_bp.route('/<int:project_id>/site_diaries/<int:diary_id>', methods=['PUT'])
def update_site_diary(project_id, diary_id):
    logger.debug("update_site_diary() called, project_id=%s, diary_id=%s", project_id, diary_id)

    site_diary = mongo.db.site_diaries.find_one({"project_id": project_id, "id": diary_id})
    if not site_diary:
        logger.warning("SiteDiary not found: project_id=%s, diary_id=%s", project_id, diary_id)
        abort(404, description="SiteDiary not found")

    data = request.json or {}
    logger.debug("Received data for update_site_diary: %s", data)

    update_fields = {}
    report_date_str = data.get('report_date')
    if report_date_str == "":
        update_fields["report_date"] = None
    elif report_date_str:
        update_fields["report_date"] = datetime.strptime(report_date_str, '%Y-%m-%d')

    if "weather_morning" in data:
        update_fields["weather_morning"] = data["weather_morning"]
    if "weather_noon" in data:
        update_fields["weather_noon"] = data["weather_noon"]
    if "day_count" in data:
        update_fields["day_count"] = data["day_count"]
    if "summary" in data:
        update_fields["summary"] = data["summary"]
    if "workers" in data:
        update_fields["workers"] = data["workers"]
    if "machines" in data:
        update_fields["machines"] = data["machines"]
    if "staff_ids" in data:
        update_fields["staff_ids"] = data["staff_ids"]

    # 若前端沒傳 day_count 或給 null，就繼續自動計算
    if ("day_count" not in data) or (data["day_count"] is None):
        max_day = mongo.db.site_diaries.find(
            {"project_id": project_id, "day_count": {"$ne": None}},
            {"day_count": 1}
        ).sort("day_count", -1).limit(1)
        row = next(max_day, None)
        if row:
            update_fields["day_count"] = row["day_count"] + 1
        else:
            update_fields["day_count"] = 1

    update_fields["updated_at"] = datetime.now()

    if update_fields:
        mongo.db.site_diaries.update_one(
            {"project_id": project_id, "id": diary_id},
            {"$set": update_fields}
        )
        logger.info("Site diary updated: project_id=%s, diary_id=%s, fields=%s",
                    project_id, diary_id, list(update_fields.keys()))
    else:
        logger.debug("No fields updated.")

    return jsonify({
        "message": "Site diary updated",
        "day_count": update_fields.get("day_count", site_diary.get("day_count"))
    }), 200


@site_diary_bp.route('/<int:project_id>/site_diaries/<int:diary_id>', methods=['DELETE'])
def delete_site_diary(project_id, diary_id):
    logger.debug("delete_site_diary() called, project_id=%s, diary_id=%s", project_id, diary_id)

    result = mongo.db.site_diaries.delete_one({"project_id": project_id, "id": diary_id})
    if result.deleted_count == 0:
        logger.warning("Site diary not found, cannot delete: project_id=%s, diary_id=%s", project_id, diary_id)
        abort(404, description="Site diary not found")

    logger.info("Site diary deleted: project_id=%s, diary_id=%s", project_id, diary_id)
    return jsonify({"message": "Site diary deleted"}), 200


@site_diary_bp.route('/<int:project_id>/site_diaries/<int:diary_id>/download_report', methods=['GET'])
def download_site_diary_report(project_id, diary_id):
    """
    依照 ?file= 參數決定下載哪個檔案 (xlsx, sheet1, sheet2)。
    若帶有冒號 (例如 sheet1:1)，則自動擷取冒號前部分避免錯誤。
    """
    logger.debug("download_site_diary_report() called, project_id=%s, diary_id=%s", project_id, diary_id)

    site_diary = mongo.db.site_diaries.find_one({"project_id": project_id, "id": diary_id})
    if not site_diary:
        logger.warning("SiteDiary not found, returning 404: project_id=%s, diary_id=%s", project_id, diary_id)
        return jsonify({"error": "SiteDiary not found"}), 404

    file_type_param = request.args.get('file', 'xlsx')
    main_file_type = file_type_param.split(':')[0].strip()
    logger.debug("Raw file param=%r => main_file_type=%r", file_type_param, main_file_type)

    if site_diary.get("report_date"):
        date_str = site_diary["report_date"].strftime("%Y%m%d")
    else:
        date_str = "noDate"

    try:
        if main_file_type == 'xlsx':
            from backend.site_diary.services import generate_diary_xlsx_only
            xlsx_path = generate_diary_xlsx_only(site_diary)
            download_name = f"{date_str}_daily_report.xlsx"
            logger.info("Returning XLSX report: %s", download_name)
            return _send_file_with_utf8_filename(xlsx_path, download_name)

        elif main_file_type in ('sheet1', 'sheet2'):
            from backend.site_diary.services import generate_diary_pdf_sheet
            pdf_path = generate_diary_pdf_sheet(site_diary, sheet_name=main_file_type)
            if main_file_type == 'sheet1':
                download_name = f"{date_str}每日施工進度報告表.pdf"
                ascii_fallback = f"{date_str}_daily_report.pdf"
            else:
                download_name = f"{date_str}施工人員紀錄表.pdf"
                ascii_fallback = f"{date_str}_worker_log.pdf"

            logger.info("Returning PDF report: %s (sheet=%s)", download_name, main_file_type)
            return _send_file_with_utf8_filename(pdf_path, download_name, ascii_fallback)

        else:
            logger.warning("Unknown file type: %r => returning 400", file_type_param)
            return jsonify({"error": f"Unknown file type '{file_type_param}'"}), 400

    except FileNotFoundError as e:
        logger.error("FileNotFoundError: %s", e, exc_info=True)
        return jsonify({"error": f"FileNotFoundError: {e}"}), 404
    except PermissionError as e:
        logger.error("PermissionError: %s", e, exc_info=True)
        return jsonify({"error": f"PermissionError: {e}"}), 403
    except RuntimeError as e:
        logger.error("RuntimeError: %s", e, exc_info=True)
        return jsonify({"error": f"RuntimeError: {e}"}), 500
    except Exception as e:
        tb = traceback.format_exc()
        logger.exception("Unhandled exception during download_site_diary_report:")
        return jsonify({"error": str(e), "traceback": tb}), 500


def _send_file_with_utf8_filename(file_path: str, download_name: str, ascii_fallback: str = None) -> Response:
    """
    統一版本：可接收 2~3 個參數。
      file_path:      實際檔案路徑
      download_name:  想顯示給使用者下載的檔名(可能含中文)
      ascii_fallback: 若瀏覽器不支援 RFC 5987 filename*=UTF-8 用的備用檔名
    """
    from flask import send_file
    from urllib.parse import quote

    response = send_file(file_path, as_attachment=True)

    if not ascii_fallback:
        # 若呼叫者沒傳入 ascii_fallback 就自動生成簡易檔名
        ascii_fallback = "".join(ch if ch.isalnum() or ch in ("-", "_", ".") else "_" for ch in download_name)

    utf8_quoted = quote(download_name, encoding="utf-8")
    disposition_value = (
        f'attachment; filename="{ascii_fallback}"; '
        f'filename*=UTF-8\'\'{utf8_quoted}'
    )
    safe_disposition = disposition_value.encode('latin-1', 'replace').decode('latin-1')
    response.headers["Content-Disposition"] = safe_disposition

    return response


@site_diary_bp.route('/<int:project_id>/site_diaries/last', methods=['GET'])
def get_last_site_diary(project_id):
    """
    取得該 project 最後一筆日報(依報表日期 desc, id desc)
    """
    logger.debug("get_last_site_diary() called, project_id=%s", project_id)

    project_doc = mongo.db.projects.find_one({"id": project_id})
    if not project_doc:
        logger.debug("Project not found for last site diary: project_id=%s", project_id)
        return jsonify({}), 200

    last_sd = mongo.db.site_diaries.find({"project_id": project_id}).sort("id", -1).limit(1)
    last_diary = next(last_sd, None)
    if not last_diary:
        logger.debug("No diaries found for project_id=%s", project_id)
        return jsonify({}), 200

    worker_list = [{"id": i, "type": w_type, "quantity": qty}
                   for i, (w_type, qty) in enumerate(last_diary.get("workers", {}).items(), start=1)]
    machine_list = [{"id": i, "type": m_type, "quantity": qty}
                    for i, (m_type, qty) in enumerate(last_diary.get("machines", {}).items(), start=1)]

    staff_list = []
    staff_ids = last_diary.get("staff_ids", [])
    if staff_ids:
        staff_docs = list(mongo.db.staff.find({"id": {"$in": staff_ids}}))
        staff_map = {s["id"]: s for s in staff_docs}
        for sid in staff_ids:
            st_doc = staff_map.get(sid)
            if st_doc:
                staff_list.append({
                    "id": st_doc["id"],
                    "name": st_doc.get("name"),
                    "role": st_doc.get("role")
                })

    result = {
        "id": last_diary["id"],
        "report_date": to_iso_date(last_diary.get("report_date")),
        "weather_morning": last_diary.get("weather_morning", ""),
        "weather_noon": last_diary.get("weather_noon", ""),
        "day_count": last_diary.get("day_count"),
        "summary": last_diary.get("summary", ""),
        "workers": worker_list,
        "machines": machine_list,
        "staffs": staff_list
    }

    logger.debug("Returning last diary for project_id=%s => diary_id=%s", project_id, last_diary["id"])
    return jsonify(result), 200


# ============================================================================
# [多筆下載 - 同步版] (原本就有) - 量小可直接使用
# ============================================================================
@site_diary_bp.route('/<int:project_id>/site_diaries/multi_download', methods=['POST'])
def multi_download_site_diary(project_id):
    """
    多筆下載 - 同步版。
    數量較大時，若處理時間過長可能導致 Gunicorn timeout。
    """
    data = request.json or {}
    diary_ids = data.get("diary_ids", [])
    file_type = data.get("file_type", "xlsx")
    logger.info("multi_download_site_diary called => diary_ids=%s, file_type=%s", diary_ids, file_type)

    if not diary_ids:
        return jsonify({"error": "No diary_ids provided"}), 400

    temp_dir = tempfile.mkdtemp(prefix="multi_diary_")
    zip_filename = f"multiple_diaries_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
    zip_path = os.path.join(temp_dir, zip_filename)

    used_names = set()

    from backend.site_diary.services import generate_diary_xlsx_only, generate_diary_pdf_sheet

    def ensure_unique_filename(base_name, used):
        if base_name not in used:
            used.add(base_name)
            return base_name
        base, ext = os.path.splitext(base_name)
        i = 2
        new_name = f"{base}_{i}{ext}"
        while new_name in used:
            i += 1
            new_name = f"{base}_{i}{ext}"
        used.add(new_name)
        return new_name

    try:
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zf:
            for d_id in diary_ids:
                diary_doc = mongo.db.site_diaries.find_one({"project_id": project_id, "id": d_id})
                if not diary_doc:
                    logger.warning("Diary not found or belongs to another project: id=%s", d_id)
                    continue

                # 依 file_type 產檔
                if diary_doc.get("report_date"):
                    date_prefix = diary_doc["report_date"].strftime("%Y%m%d")
                else:
                    date_prefix = "noDate"

                if file_type == 'xlsx':
                    xlsx_path = generate_diary_xlsx_only(diary_doc)
                    base_name = f"{date_prefix}_daily_report.xlsx"
                    final_name = ensure_unique_filename(base_name, used_names)
                    zf.write(xlsx_path, arcname=final_name)

                elif file_type in ('sheet1', 'sheet2'):
                    pdf_path = generate_diary_pdf_sheet(diary_doc, sheet_name=file_type)
                    if file_type == 'sheet1':
                        base_name = f"{date_prefix}_daily_report.pdf"
                    else:
                        base_name = f"{date_prefix}_worker_log.pdf"
                    final_name = ensure_unique_filename(base_name, used_names)
                    zf.write(pdf_path, arcname=final_name)

                else:
                    logger.warning("Skipping unknown file_type=%s for diary_id=%s", file_type, d_id)
                    continue

        logger.info("multi_download => created ZIP: %s", zip_path)
        return _send_file_with_utf8_filename(zip_path, zip_filename)

    except Exception as exc:
        logger.exception("multi_download_site_diary() exception: ")
        shutil.rmtree(temp_dir, ignore_errors=True)
        return jsonify({"error": str(exc)}), 500


# ============================================================================
# [多筆下載 - 非同步版 + SSE進度]  ---------------------------------------------
# ============================================================================

@site_diary_bp.route('/<int:project_id>/site_diaries/multi_download_async', methods=['POST'])
def multi_download_site_diary_async(project_id):
    """
    非同步版 + SSE:
      1) 前端 POST {diary_ids, file_type} 進來
      2) 後端產生 job_id, 用執行緒背景處理, 立即回傳 {"job_id": ...}
      3) 前端用 SSE(/api/progress-sse/<job_id>) 監看進度
      4) 完成後 (status=done), 再呼叫 multi_download_result 取得最後ZIP
    """
    data = request.json or {}
    diary_ids = data.get("diary_ids", [])
    file_type = data.get("file_type", "xlsx")
    if not diary_ids:
        return jsonify({"error": "No diary_ids provided"}), 400

    project_doc = mongo.db.projects.find_one({"id": project_id})
    if not project_doc:
        abort(404, description="Project not found")

    job_id = str(uuid.uuid4())
    progress_store[job_id] = {
        "status": "in_progress",
        "progress": 0,
        "file_path": None,
        "error_msg": ""
    }

    # ★ 關鍵修正：在啟動背景執行緒前，先抓取「當前 app 物件」並傳進去
    appctx = current_app._get_current_object()

    t = threading.Thread(
        target=_background_zip_generation,
        args=(appctx, job_id, project_id, diary_ids, file_type),
        daemon=True
    )
    t.start()

    return jsonify({"job_id": job_id}), 200


def _background_zip_generation(app, job_id, project_id, diary_ids, file_type):
    """
    在背景執行的打包函式，會更新 progress_store[job_id] 中的 progress/status/file_path

    ★ 使用 with app.app_context(): 避免 'Working outside of application context' 錯誤
    """
    try:
        with app.app_context():
            total = len(diary_ids)
            if total == 0:
                raise ValueError("No diaries specified.")

            temp_dir = tempfile.mkdtemp(prefix="multi_diary_")
            zip_filename = f"multiple_diaries_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
            zip_path = os.path.join(temp_dir, zip_filename)

            used_names = set()

            from backend.site_diary.services import generate_diary_xlsx_only, generate_diary_pdf_sheet

            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zf:
                for idx, d_id in enumerate(diary_ids, start=1):
                    # 更新進度
                    progress_store[job_id]["progress"] = int(idx * 100 / total)

                    diary_doc = mongo.db.site_diaries.find_one({"project_id": project_id, "id": d_id})
                    if not diary_doc:
                        continue

                    if diary_doc.get("report_date"):
                        date_str = diary_doc["report_date"].strftime("%Y%m%d")
                    else:
                        date_str = "noDate"

                    if file_type == 'xlsx':
                        path_ = generate_diary_xlsx_only(diary_doc)
                        base_name = f"{date_str}_daily_report.xlsx"
                    elif file_type == 'sheet1':
                        path_ = generate_diary_pdf_sheet(diary_doc, sheet_name='sheet1')
                        base_name = f"{date_str}_daily_report.pdf"
                    elif file_type == 'sheet2':
                        path_ = generate_diary_pdf_sheet(diary_doc, sheet_name='sheet2')
                        base_name = f"{date_str}_worker_log.pdf"
                    else:
                        continue

                    final_name = _ensure_unique_filename(base_name, used_names)
                    zf.write(path_, arcname=final_name)

            progress_store[job_id]["status"] = "done"
            progress_store[job_id]["file_path"] = zip_path

    except Exception as e:
        progress_store[job_id]["status"] = "error"
        progress_store[job_id]["error_msg"] = str(e)
        logger.exception("background_zip_generation error:")
    finally:
        # 確保結束時強制 progress=100
        progress_store[job_id]["progress"] = 100


def _ensure_unique_filename(base_name, used_names):
    if base_name not in used_names:
        used_names.add(base_name)
        return base_name
    base, ext = os.path.splitext(base_name)
    i = 2
    new_name = f"{base}_{i}{ext}"
    while new_name in used_names:
        i += 1
        new_name = f"{base}_{i}{ext}"
    used_names.add(new_name)
    return new_name


@site_diary_bp.route('/<int:project_id>/site_diaries/multi_download_result', methods=['GET'])
def multi_download_result(project_id):
    """
    當 SSE 監測到 status=done 後，前端呼叫:
       GET /api/projects/<project_id>/site_diaries/multi_download_result?job_id=xxx
    以實際拿到 ZIP 檔。
    """
    job_id = request.args.get('job_id')
    if not job_id:
        return jsonify({"error": "Missing job_id"}), 400

    job_info = progress_store.get(job_id)
    if not job_info:
        return jsonify({"error": "Invalid job_id"}), 400

    if job_info["status"] != "done":
        return jsonify({"error": f"Job not done. status={job_info['status']}"}), 400

    zip_path = job_info["file_path"]
    if not zip_path or not os.path.isfile(zip_path):
        return jsonify({"error": "File not found for this job."}), 404

    filename = os.path.basename(zip_path)
    return send_file(zip_path, as_attachment=True, download_name=filename)

================================================================================

backend/site_diary/services.py

================================================================================
# backend/site_diary/services.py

import os
import tempfile
import shutil
import subprocess
from datetime import datetime
from typing import Dict, Any
import platform
from shutil import which

from flask import current_app
from openpyxl import load_workbook
from openpyxl.styles import Alignment

# ★ 新增：使用我們的 Mongo 物件
from backend.db import mongo


def generate_diary_xlsx_only(site_diary_doc: Dict[str, Any]) -> str:
    """
    產生/填寫 daily_report.xlsx 後，回傳填好的暫存 XLSX 檔路徑 (含所有工作表)。
    目前只用 Sheet1/Sheet2，但整份 workbook 都會被保留。
    """
    # 先依 project_id 找出對應的專案資料 (Mongo)
    project_id = site_diary_doc.get("project_id")
    project_doc = mongo.db.projects.find_one({"id": project_id})
    if not project_doc:
        raise ValueError("Project not found in MongoDB (id={}).".format(project_id))

    # 日報日期
    report_date = site_diary_doc.get("report_date")
    # Mongodb 中該欄可能是 datetime 或 None
    date_str = report_date.strftime("%Y-%m-%d") if report_date else ""

    # 專案基本資訊
    project_name = project_doc.get("name", "")
    project_job_number = project_doc.get("job_number", "")
    contractor_name = project_doc.get("contractor", "")

    # 日數 / 摘要 / 天氣
    day_count_str = str(site_diary_doc.get("day_count", ""))
    summary_str = site_diary_doc.get("summary", "")
    weather_morning = site_diary_doc.get("weather_morning", "")
    weather_noon = site_diary_doc.get("weather_noon", "")

    # 專案開始日期
    start_date = project_doc.get("start_date")
    start_date_str = start_date.strftime("%Y-%m-%d") if start_date else ""

    # 工期
    duration_days = project_doc.get("duration_days")
    duration_type = project_doc.get("duration_type")
    if duration_days:
        if duration_type == "business":
            duration_str = f"{duration_days}工作天"
        else:
            duration_str = f"{duration_days}天"
    else:
        duration_str = ""

    # 建立 worker_map / machine_map => 對應 Excel 中的儲存格 (Sheet1)
    worker_map = {
        "地盤總管": "D19",
        "工程師":  "D20",
        "管工":    "D21",
        "平水員":  "D22",
        "燒焊焊工": "D23",
        "機手":    "D24",
        "泥水工":  "D25",
        "紮鐵工":  "D26",
        "木板工":  "D27", 
        "電工":    "D28",
        "水喉工":  "D29",
        "雜工":    "D30",
    }
    machine_map = {
        "挖掘機": "G19",
        "發電機": "G20",
        "風機":   "G21",
        "泥頭車": "G22",
        "吊機":   "G23",
        "機炮":   "G24",
        "屈鐵機": "G25",  
        "風車鋸": "G26",  
    }

    # 從 site_diary_doc 取出 workers/machines 這兩個 dict
    workers_dict = site_diary_doc.get("workers", {})
    machines_dict = site_diary_doc.get("machines", {})

    # 找到 daily_report.xlsx 模板位置
    template_path = os.path.join(
        current_app.root_path,
        'site_diary',
        'templates',
        'daily_report.xlsx'
    )
    if not os.path.isfile(template_path):
        raise FileNotFoundError(f"daily_report.xlsx not found: {template_path}")

    # 在系統臨時資料夾中建立暫存路徑
    temp_dir = tempfile.mkdtemp(prefix="diary_xlsx_")

    # 用報表日期組出輸出檔名
    date_str_for_filename = "noDate" if not date_str else report_date.strftime("%Y%m%d")
    filled_xlsx_path = os.path.join(
        temp_dir,
        f"{date_str_for_filename}_daily_report.xlsx"
    )

    # 複製模板
    shutil.copy(template_path, filled_xlsx_path)

    # 打開並填寫
    wb = load_workbook(filled_xlsx_path)
    # 目前預期兩個 sheet: 「每日施工進度報告表」「每日本地工人及外地勞工施工人員紀錄表」

    # Sheet1: "每日施工進度報告表"
    if "每日施工進度報告表" in wb.sheetnames:
        sh1 = wb["每日施工進度報告表"]

        # 基本欄位
        sh1["C2"].value = date_str
        sh1["C2"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["K2"].value = start_date_str
        sh1["K2"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["D4"].value = project_name
        sh1["D4"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["D5"].value = project_job_number
        sh1["D5"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["D6"].value = contractor_name
        sh1["D6"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["E7"].value = weather_morning
        sh1["E7"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["H7"].value = weather_noon
        sh1["H7"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["D8"].value = duration_str
        sh1["D8"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["J8"].value = day_count_str
        sh1["J8"].alignment = Alignment(horizontal='center', vertical='center')

        sh1["B10"].value = summary_str
        sh1["B10"].alignment = Alignment(horizontal='center', vertical='center')

        # 工人數量
        for w_type, cell_ref in worker_map.items():
            qty = workers_dict.get(w_type, 0)
            sh1[cell_ref].value = str(qty) if qty else ""
            sh1[cell_ref].alignment = Alignment(horizontal='center', vertical='center')

        # 機器數量
        for m_type, cell_ref in machine_map.items():
            qty = machines_dict.get(m_type, 0)
            sh1[cell_ref].value = str(qty) if qty else ""
            sh1[cell_ref].alignment = Alignment(horizontal='center', vertical='center')

        # 列印範圍
        sh1.print_area = "A1:L46"

    # Sheet2: "每日本地工人及外地勞工施工人員紀錄表"
    if "每日本地工人及外地勞工施工人員紀錄表" in wb.sheetnames:
        sh2 = wb["每日本地工人及外地勞工施工人員紀錄表"]

        # B3 放日期 (用 YYYY/MM/DD)
        b3_date = report_date.strftime("%Y/%m/%d") if report_date else ""
        sh2["B3"].value = b3_date
        sh2["B3"].alignment = Alignment(horizontal='center', vertical='center')

        # 專案名稱
        sh2["B6"].value = project_name
        sh2["B6"].alignment = Alignment(horizontal='center', vertical='center')

        # 工程編號
        sh2["B7"].value = project_job_number
        sh2["B7"].alignment = Alignment(horizontal='center', vertical='center')

        # 承建商
        sh2["B8"].value = contractor_name
        sh2["B8"].alignment = Alignment(horizontal='center', vertical='center')

        # ===== 關鍵需求：若全部工人 + 機器皆為 0，則 B11-D25, B28-C32 全填 "☐"，並 C33=0, C34=0 =====
        total_workers_sum = sum(workers_dict.values())
        total_machines_sum = sum(machines_dict.values())
        if (total_workers_sum + total_machines_sum) == 0:
            # B11 ~ D25
            for row in range(11, 26):
                for col in range(2, 5):  # 2~4 => B, C, D
                    sh2.cell(row=row, column=col, value="☐")
            # B28 ~ C32
            for row in range(28, 33):
                for col in range(2, 4):  # 2~3 => B, C
                    sh2.cell(row=row, column=col, value="☐")
            # C33 = 0, C34 = 0
            sh2["C33"].value = 0
            sh2["C34"].value = 0

        sh2.print_area = "A1:E40"

    wb.save(filled_xlsx_path)
    wb.close()

    return filled_xlsx_path


def generate_diary_pdf_sheet(site_diary_doc: Dict[str, Any], sheet_name: str) -> str:
    """
    依照 sheet_name ('sheet1' or 'sheet2')，只輸出對應工作表的 PDF:
      - sheet1 => "每日施工進度報告表"
      - sheet2 => "每日本地工人及外地勞工施工人員紀錄表"

    內部流程：
      1) 先 generate_diary_xlsx_only() 產生含所有工作表的 XLSX
      2) 複製一份，刪掉不必要的工作表，只保留目標表
      3) 用 LibreOffice CLI 轉成 PDF (指定內嵌字型、PDF/A-1) 以避免中文亂碼
      4) 回傳轉好的 PDF 路徑
    """
    # 產生整本 XLSX
    xlsx_path = generate_diary_xlsx_only(site_diary_doc)
    temp_dir = os.path.dirname(xlsx_path)

    # 報表日期（命名用）
    report_date = site_diary_doc.get("report_date")
    date_str_for_filename = "noDate"
    if report_date:
        date_str_for_filename = report_date.strftime("%Y%m%d")

    # 決定要保留的工作表名稱
    if sheet_name == 'sheet1':
        target_sheet_name = "每日施工進度報告表"
        pdf_filename = f"{date_str_for_filename}每日施工進度報告表.pdf"
    else:
        target_sheet_name = "每日本地工人及外地勞工施工人員紀錄表"
        pdf_filename = f"{date_str_for_filename}施工人員紀錄表.pdf"

    pdf_path = os.path.join(temp_dir, pdf_filename)

    # 先另存一份只保留指定工作表的 XLSX
    single_sheet_xlsx = os.path.join(temp_dir, f"{date_str_for_filename}_{sheet_name}_only.xlsx")
    shutil.copy(xlsx_path, single_sheet_xlsx)

    wb = load_workbook(single_sheet_xlsx)
    if target_sheet_name not in wb.sheetnames:
        wb.close()
        raise RuntimeError(f"指定工作表 '{target_sheet_name}' 不存在於模板中。")

    # 刪除其他工作表
    for sn in wb.sheetnames:
        if sn != target_sheet_name:
            wb.remove(wb[sn])
    wb.save(single_sheet_xlsx)
    wb.close()

    # 執行 LibreOffice CLI 轉 PDF
    lo_exec = get_libreoffice_cmd()
    input_filter = "Calc Office Open XML"

    # ★ 為了避免中文亂碼，指定 PDF/A-1 與 EmbedStandardFonts=true
    pdf_filter_options = "SelectPdfVersion=1;EmbedStandardFonts=true"
    output_filter = f"pdf:calc_pdf_Export:{pdf_filter_options}"

    if platform.system().lower().startswith("win"):
        # Windows系統
        cmd = (
            f'"{lo_exec}" --headless --convert-to "{output_filter}" '
            f'--infilter="{input_filter}" "{single_sheet_xlsx}" --outdir "{temp_dir}"'
        )
        try:
            result = subprocess.run(cmd, shell=True, check=True, capture_output=True)
        except subprocess.CalledProcessError as e:
            err_msg = e.stderr.decode('utf-8', errors='replace') if e.stderr else str(e)
            raise RuntimeError(f"LibreOffice PDF conversion failed (Windows): {err_msg}") from e
    else:
        # Linux / Mac
        cmd_list = [
            lo_exec, "--headless",
            "--convert-to", output_filter,
            f'--infilter={input_filter}',
            single_sheet_xlsx,
            "--outdir", temp_dir
        ]
        try:
            result = subprocess.run(cmd_list, shell=False, check=True, capture_output=True)
        except subprocess.CalledProcessError as e:
            err_msg = e.stderr.decode('utf-8', errors='replace') if e.stderr else str(e)
            raise RuntimeError(f"LibreOffice PDF conversion failed: {err_msg}") from e

    generated_pdf_name = os.path.splitext(single_sheet_xlsx)[0] + ".pdf"
    if os.path.isfile(generated_pdf_name):
        os.rename(generated_pdf_name, pdf_path)
    else:
        raise RuntimeError(f"PDF 轉檔失敗: {generated_pdf_name} 不存在")

    if not os.path.isfile(pdf_path):
        raise RuntimeError(f"PDF 轉檔失敗: {pdf_path} 不存在")

    return pdf_path


def get_libreoffice_cmd() -> str:
    """
    取得 LibreOffice 執行檔路徑:
      1) 若有環境變數 LIBREOFFICE_PATH，先檢查是否有效
      2) 否則嘗試 which('soffice') 或 which('libreoffice')
      3) 全部找不到就拋錯
    """
    custom_path = os.environ.get("LIBREOFFICE_PATH")
    if custom_path:
        if os.path.isfile(custom_path):
            return custom_path
        soffice_path = os.path.join(custom_path, "soffice")
        libreoffice_path = os.path.join(custom_path, "libreoffice")
        if os.path.isfile(soffice_path):
            return soffice_path
        if os.path.isfile(libreoffice_path):
            return libreoffice_path
        raise RuntimeError(f"LIBREOFFICE_PATH 無效: {custom_path}")

    for candidate in ("soffice", "libreoffice"):
        exe_path = which(candidate)
        if exe_path:
            return exe_path

    raise RuntimeError(
        "無法自動找到 libreoffice/soffice！請安裝 LibreOffice 或設定 LIBREOFFICE_PATH"
    )

================================================================================

backend/staff_management/routes.py

================================================================================
# backend/staff_management/routes.py
from flask import Blueprint, request, jsonify, abort

from backend.db import mongo, get_next_sequence

staff_bp = Blueprint('staff_bp', __name__)

@staff_bp.route('', methods=['GET'])
def list_staff():
    cursor = mongo.db.staff.find({}, sort=[("id", 1)])
    results = []
    for s in cursor:
        results.append({
            "id": s["id"],
            "name": s.get("name", ""),
            "role": s.get("role", "")
        })
    return jsonify(results), 200


@staff_bp.route('', methods=['POST'])
def create_staff():
    data = request.json or {}
    name = data.get("name")
    if not name:
        return jsonify({"error": "Name is required"}), 400

    role = data.get("role", "")
    new_id = get_next_sequence("staff")
    doc = {
        "id": new_id,
        "name": name,
        "role": role
    }
    mongo.db.staff.insert_one(doc)

    return jsonify({
        "message": "Staff created",
        "staff_id": new_id
    }), 201


@staff_bp.route('/<int:staff_id>', methods=['DELETE'])
def delete_staff(staff_id):
    result = mongo.db.staff.delete_one({"id": staff_id})
    if result.deleted_count == 0:
        abort(404, description="Staff not found")
    return jsonify({"message": "Staff deleted"}), 200

================================================================================

fonts/MINGLIU.TTC

================================================================================

frontend/index.html

================================================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Project Management System</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- 
      已移除原本的 <script src="https://unpkg.com/vue@3/..."> 
      及所有對 PrimeVue 的 CDN 引用，改為讓 Vite + node_modules 管理。
    -->
  </head>
  <body>
    <div id="app"></div>
    <!-- 透過 Vite 啟動的入口 -->
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>

================================================================================

frontend/package.json

================================================================================
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc -b && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "bootstrap": "^5.3.1",
    "dayjs": "^1.11.13",
    "gantt-elastic-wrapvue3": "^0.0.18",
    "html2canvas": "^1.4.1",
    "jspdf": "^2.5.2",
    "sass": "^1.83.4",
    "vue": "^3.5.13",
    "vue-router": "^4.5.0"
  },
  "devDependencies": {
    "@types/node": "^22.13.0",
    "@vitejs/plugin-vue": "^5.2.1",
    "@vue/tsconfig": "^0.7.0",
    "typescript": "~5.6.2",
    "vite": "^6.0.5",
    "vue-tsc": "^2.2.0"
  }
}

================================================================================

frontend/public/favicon.ico

================================================================================

frontend/public/vite.svg

================================================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
================================================================================

frontend/src/App.vue

================================================================================
<template>
  <div>
    <!-- Bootstrap Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">Project Management System</a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarSupportedContent"
          aria-controls="navbarSupportedContent"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <router-link to="/" class="nav-link">Home</router-link>
            </li>
            <li class="nav-item">
              <router-link to="/projects" class="nav-link">Projects</router-link>
            </li>
            <li class="nav-item">
              <router-link to="/material" class="nav-link">Material Form</router-link>
            </li>
            <li class="nav-item">
              <router-link to="/staff" class="nav-link">Staff</router-link>
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <!-- 
      根據是否為 Gantt 頁面，決定要不要包在 .container.my-4
      這樣即可避免 Gantt 頁面左側產生 offset
    -->
    <div v-if="isGanttPage" style="margin:0; padding:0;">
      <router-view />
    </div>
    <div v-else class="container my-4">
      <router-view />
    </div>
  </div>
</template>

<script>
import { computed } from 'vue'
import { useRoute } from 'vue-router'

export default {
  name: 'App',
  setup() {
    const route = useRoute()

    // 簡單判斷路徑中是否包含 /gantt
    // （也可改更精準判斷 route.name === 'ProjectsGantt' 之類）
    const isGanttPage = computed(() => {
      return route.path.includes('/gantt')
    })

    return {
      isGanttPage
    }
  }
}
</script>

<style>
/* 可視需求自行增減 */

/* 說明：若不是 Gantt 頁面，我們保留 .container.my-4。
   若是 Gantt 頁面，則改用上方 <div style="margin:0;padding:0;"> 撐滿整個畫面。 */
</style>

================================================================================

frontend/src/assets/vue.svg

================================================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="37.07" height="36" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 198"><path fill="#41B883" d="M204.8 0H256L128 220.8L0 0h97.92L128 51.2L157.44 0h47.36Z"></path><path fill="#41B883" d="m0 0l128 220.8L256 0h-51.2L128 132.48L50.56 0H0Z"></path><path fill="#35495E" d="M50.56 0L128 133.12L204.8 0h-47.36L128 51.2L97.92 0H50.56Z"></path></svg>
================================================================================

frontend/src/components/GanttTaskForm.vue

================================================================================
<template>
  <div class="gantt-task-form">
    <h5 class="mb-3">
      {{ isNewTask ? '新增任務' : '編輯任務' }}
    </h5>

    <form @submit.prevent="handleSubmit">
      <!-- 任務名稱 -->
      <div class="mb-3">
        <label class="form-label">任務名稱</label>
        <input
          type="text"
          v-model="taskData.label"
          class="form-control form-control-sm"
        />
      </div>

      <!-- 任務類型 -->
      <div class="mb-3">
        <label class="form-label">任務類型</label>
        <select
          v-model="taskData.type"
          class="form-select form-select-sm"
        >
          <option value="task">一般任務 (task)</option>
          <option value="milestone">里程碑 (milestone)</option>
          <option value="project">專案 (project)</option>
        </select>
      </div>

      <!-- 開始 / 結束日期 / 工期 -->
      <div class="row mb-3">
        <div class="col-sm-6">
          <label class="form-label">開始日期</label>
          <input
            type="date"
            v-model="taskData.start_date_str"
            class="form-control form-control-sm"
          />
        </div>
        <div class="col-sm-6">
          <label class="form-label">結束日期</label>
          <input
            type="date"
            v-model="taskData.end_date_str"
            class="form-control form-control-sm"
            placeholder="若未填，則改用工期"
          />
        </div>
      </div>

      <div class="row mb-3">
        <div class="col-sm-6">
          <label class="form-label">工期 (天)</label>
          <input
            type="number"
            v-model.number="taskData.durationDays"
            class="form-control form-control-sm"
            placeholder="若未填結束日期，可輸入工期"
          />
        </div>

        <div class="col-sm-6">
          <label class="form-label">進度 (0 ~ 100%)</label>
          <input
            type="number"
            step="1"
            min="0"
            max="100"
            v-model.number="taskData.progressPercent"
            class="form-control form-control-sm"
          />
        </div>
      </div>

      <!-- 依賴 (depends) -->
      <div class="mb-3">
        <label class="form-label">依賴 (逗號分隔)</label>
        <input
          type="text"
          v-model="taskData.dependsStr"
          class="form-control form-control-sm"
          placeholder="例如：2,3"
        />
      </div>

      <!-- 父任務ID (parent_id) -->
      <div class="mb-3">
        <label class="form-label">父任務ID</label>
        <input
          type="text"
          v-model="taskData.parentIdStr"
          class="form-control form-control-sm"
          placeholder="若無父任務可留空"
        />
      </div>

      <!-- 任務ID（唯讀顯示） -->
      <div v-if="!isNewTask" class="mb-3">
        <label class="form-label">任務 ID (唯讀)</label>
        <input
          type="text"
          :value="String(taskData.id)"
          class="form-control form-control-sm"
          disabled
        />
      </div>

      <!-- 按鈕區 -->
      <div class="d-flex justify-content-end mt-4">
        <!-- 刪除任務按鈕 (若是新增模式就不顯示) -->
        <button
          v-if="!isNewTask"
          type="button"
          class="btn btn-danger me-3"
          @click="handleDelete"
        >
          刪除任務
        </button>

        <button
          type="button"
          class="btn btn-secondary me-3"
          @click="$emit('cancel')"
        >
          取消
        </button>

        <button
          type="submit"
          class="btn btn-primary"
        >
          {{ isNewTask ? '新增' : '儲存' }}
        </button>
      </div>
    </form>
  </div>
</template>

<script>
import axios from 'axios'
import { ref, watch, computed } from 'vue'

export default {
  name: 'GanttTaskForm',
  props: {
    projectId: {
      type: Number,
      required: true
    },
    snapshotDate: {
      type: String,
      default: '' // 若為空，表示操作當前最新
    },
    task: {
      type: Object,
      default: null
    }
  },
  setup(props, { emit }) {
    const taskData = ref({
      id: null,
      label: '',
      type: 'task',
      start_date_str: '',
      end_date_str: '',
      durationDays: 0,
      progressPercent: 0,
      dependsStr: '',
      parentIdStr: ''
    })

    const isSnapshotMode = computed(() => !!props.snapshotDate)
    const isNewTask = computed(() => !props.task || !props.task.id)

    watch(
      () => props.task,
      (val) => {
        if (!val) {
          resetFormForCreate()
        } else {
          fillForm(val)
        }
      },
      { immediate: true }
    )

    function resetFormForCreate() {
      taskData.value = {
        id: null,
        label: '',
        type: 'task',
        start_date_str: '',
        end_date_str: '',
        durationDays: 0,
        progressPercent: 0,
        dependsStr: '',
        parentIdStr: ''
      }
    }

    function fillForm(task) {
      let startDateStr = ''
      if (task.start) {
        const d = new Date(task.start)
        startDateStr = formatDate(d)
      }
      let endDateStr = ''
      if (task.end) {
        const d2 = new Date(task.end)
        endDateStr = formatDate(d2)
      }
      const parsedId = typeof task.id === 'number' ? task.id : parseInt(task.id, 10) || null
      const progressVal = task.progress != null ? parseInt(task.progress, 10) : 0
      const dependsArr = task.dependentOn || task.depends || []
      const dependsStr = dependsArr.join(', ')
      const parentIdVal = task.parentId || task.parent || null
      const parentIdStr = parentIdVal ? String(parentIdVal) : ''

      // 預設 type: 'task'
      const tType = task.type || 'task'

      taskData.value = {
        id: parsedId,
        label: task.label || '',
        type: tType,
        start_date_str: startDateStr,
        end_date_str: endDateStr,
        durationDays: 0,
        progressPercent: progressVal * 1, // 0~100
        dependsStr,
        parentIdStr
      }
    }

    function formatDate(d) {
      const year = d.getFullYear()
      const month = String(d.getMonth() + 1).padStart(2, '0')
      const day = String(d.getDate()).padStart(2, '0')
      return `${year}-${month}-${day}`
    }

    async function handleSubmit() {
      try {
        const putOrPostData = {
          text: taskData.value.label,
          progress: (taskData.value.progressPercent || 0) / 100,
          depends: parseDepends(taskData.value.dependsStr),
          start_date: taskData.value.start_date_str || null,
          type: taskData.value.type || 'task',
        }
        if (taskData.value.end_date_str) {
          putOrPostData.end_date = taskData.value.end_date_str
        } else if (taskData.value.durationDays > 0) {
          putOrPostData.duration = taskData.value.durationDays
        }

        const parentIdParsed = parseInt(taskData.value.parentIdStr.trim(), 10)
        if (!isNaN(parentIdParsed)) {
          putOrPostData.parent_id = parentIdParsed
        } else {
          putOrPostData.parent_id = null
        }

        const baseUrl = `/api/projects/${props.projectId}/gantt/tasks`
        if (isSnapshotMode.value) {
          // snapshot 模式 => 以 query param 傳給後端
          if (isNewTask.value) {
            await axios.post(`${baseUrl}?snapshot_date=${props.snapshotDate}`, putOrPostData)
          } else {
            await axios.put(`${baseUrl}/${taskData.value.id}?snapshot_date=${props.snapshotDate}`, putOrPostData)
          }
        } else {
          // 非 snapshot
          if (isNewTask.value) {
            await axios.post(baseUrl, putOrPostData)
          } else {
            await axios.put(`${baseUrl}/${taskData.value.id}`, putOrPostData)
          }
        }

        alert(isNewTask.value ? '任務已新增！' : '任務已更新！')
        emit('saved')
      } catch (err) {
        console.error(err)
        alert(`操作失敗：${err}`)
      }
    }

    async function handleDelete() {
      if (!taskData.value.id) return
      if (!confirm('確定要刪除此任務嗎？')) return
      try {
        const baseUrl = `/api/projects/${props.projectId}/gantt/tasks/${taskData.value.id}`
        if (isSnapshotMode.value) {
          await axios.delete(`${baseUrl}?snapshot_date=${props.snapshotDate}`)
        } else {
          await axios.delete(baseUrl)
        }
        alert('任務已刪除。')
        emit('saved')
      } catch (err) {
        console.error(err)
        alert(`刪除失敗：${err}`)
      }
    }

    function parseDepends(str) {
      if (!str) return []
      return str
        .split(',')
        .map(s => parseInt(s.trim(), 10))
        .filter(n => !isNaN(n))
    }

    return {
      taskData,
      isSnapshotMode,
      isNewTask,
      handleSubmit,
      handleDelete
    }
  }
}
</script>

<style scoped>
.gantt-task-form {
  font-size: 0.9rem;
  max-height: 80vh;
  overflow-y: auto;
}
.me-3 {
  margin-right: 1rem !important;
}
</style>

================================================================================

frontend/src/components/ProjectDetail.vue

================================================================================
<template>
  <div v-if="project" class="card p-3">
    <h5 class="card-title">Project Detail</h5>
    <p>Description: {{ project.description }}</p>
    <p>Objective: {{ project.objective }}</p>
    <p>Owner: {{ project.owner }}</p>
    <p>Duration: {{ project.duration_days }} ({{ project.duration_type }})</p>
    <p>Start Date: {{ project.start_date }}</p>
    <p>End Date: {{ project.end_date }}</p>
    <p>Job Number: {{ project.job_number }}</p>
    <p>Contractor: {{ project.contractor }}</p>

    <div class="mt-3">
      <router-link
        :to="`/projects/${projectId}/diaries`"
        class="btn btn-info me-2"
      >
        Manage Site Diaries
      </router-link>

      <!-- ★ 新增的按鈕: Go to Gantt Chart -->
      <router-link
        :to="`/projects/${projectId}/gantt`"
        class="btn btn-warning"
      >
        Gantt
      </router-link>
      <!-- -------------- -->
    </div>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'ProjectDetail',
  props: {
    projectId: {
      type: Number,
      required: true
    }
  },
  data() {
    return {
      project: null
    }
  },
  methods: {
    async fetchProject() {
      try {
        const { data } = await axios.get(`/api/projects/${this.projectId}`)
        this.project = data
      } catch (err) {
        console.error(err)
      }
    }
  },
  mounted() {
    this.fetchProject()
  }
}
</script>

<style scoped>
.me-2 {
  margin-right: 8px;
}
</style>

================================================================================

frontend/src/components/ProjectForm.vue

================================================================================
<template>
  <div>
    <form @submit.prevent="handleSubmit">
      <div class="mb-3 row">
        <label class="col-sm-3 col-form-label">Project Name</label>
        <div class="col-sm-9">
          <input
            type="text"
            v-model="formData.name"
            class="form-control"
            required
          />
        </div>
      </div>

      <div class="mb-3 row">
        <label class="col-sm-3 col-form-label">Owner</label>
        <div class="col-sm-9">
          <input
            type="text"
            v-model="formData.owner"
            class="form-control"
          />
        </div>
      </div>

      <!-- 工作編號 / 承建商 -->
      <div class="mb-3 row">
        <label class="col-sm-3 col-form-label">工作編號</label>
        <div class="col-sm-9">
          <input
            type="text"
            v-model="formData.job_number"
            class="form-control"
          />
        </div>
      </div>

      <div class="mb-3 row">
        <label class="col-sm-3 col-form-label">承建商</label>
        <div class="col-sm-9">
          <input
            type="text"
            v-model="formData.contractor"
            class="form-control"
          />
        </div>
      </div>

      <div class="mb-3 row">
        <label class="col-sm-3 col-form-label">Start Date</label>
        <div class="col-sm-9">
          <input
            type="date"
            v-model="formData.start_date"
            class="form-control"
          />
        </div>
      </div>

      <div class="mb-3 row">
        <label class="col-sm-3 col-form-label">End Date</label>
        <div class="col-sm-9">
          <input
            type="date"
            v-model="formData.end_date"
            class="form-control"
          />
        </div>
      </div>

      <div class="mb-3 row">
        <label class="col-sm-3 col-form-label">Duration (Days)</label>
        <div class="col-sm-9">
          <input
            type="number"
            v-model.number="formData.duration_days"
            class="form-control"
          />
        </div>
      </div>

      <div class="mb-3">
        <label>Duration Type:</label>
        <div class="form-check form-check-inline ms-3">
          <input
            class="form-check-input"
            type="radio"
            value="business"
            v-model="formData.duration_type"
            id="durationBusiness"
          />
          <label class="form-check-label" for="durationBusiness">Business</label>
        </div>
        <div class="form-check form-check-inline">
          <input
            class="form-check-input"
            type="radio"
            value="calendar"
            v-model="formData.duration_type"
            id="durationCalendar"
          />
          <label class="form-check-label" for="durationCalendar">Calendar</label>
        </div>
      </div>

      <div class="mb-3">
        <label class="form-label">Description</label>
        <textarea
          v-model="formData.description"
          class="form-control"
          rows="2"
        ></textarea>
      </div>

      <div class="mb-3">
        <label class="form-label">Project Objective</label>
        <textarea
          v-model="formData.objective"
          class="form-control"
          rows="2"
        ></textarea>
      </div>

      <div class="d-flex justify-content-end mt-4">
        <button type="submit" class="btn btn-primary">
          {{ projectId ? 'Save' : 'Create' }}
        </button>
        <button type="button" class="btn btn-secondary ms-2" @click="closeForm">
          Close
        </button>
      </div>
    </form>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'ProjectForm',
  props: {
    projectId: Number
  },
  data() {
    return {
      formData: {
        name: '',
        description: '',
        objective: '',
        owner: '',
        duration_days: '',
        duration_type: 'business',
        start_date: '',
        end_date: '',
        job_number: '',
        contractor: ''
      }
    }
  },
  methods: {
    async fetchProject() {
      if (!this.projectId) return
      try {
        const { data } = await axios.get(`/api/projects/${this.projectId}`)
        this.formData.name = data.name
        this.formData.description = data.description
        this.formData.objective = data.objective
        this.formData.owner = data.owner
        this.formData.duration_days = data.duration_days
        this.formData.duration_type = data.duration_type || 'business'
        this.formData.start_date = data.start_date
        this.formData.end_date = data.end_date
        this.formData.job_number = data.job_number
        this.formData.contractor = data.contractor
      } catch (err) {
        console.error(err)
      }
    },
    async handleSubmit() {
      try {
        if (this.projectId) {
          await axios.put(`/api/projects/${this.projectId}`, this.formData)
        } else {
          await axios.post('/api/projects/', this.formData)
        }
        this.$emit('refresh')
        this.closeForm()
      } catch (err) {
        console.error(err)
      }
    },
    closeForm() {
      this.$emit('close')
    }
  },
  mounted() {
    if (this.projectId) this.fetchProject()
  }
}
</script>

<style scoped>
.ms-2 {
  margin-left: 8px;
}
.mt-4 {
  margin-top: 1rem;
}
</style>

================================================================================

frontend/src/components/ProjectList.vue

================================================================================
<template>
  <div>
    <!-- 專案列表 Table -->
    <table class="table table-bordered table-hover mb-6">
      <thead>
        <tr>
          <th>ID</th>
          <th>Project Name</th>
          <th>Job #</th>
          <th>Contractor</th>
          <th>Start Date</th>
          <th>End Date</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="item in projects" :key="item.id">
          <td>{{ item.id }}</td>
          <td>{{ item.name }}</td>
          <td>{{ item.job_number }}</td>
          <td>{{ item.contractor }}</td>
          <td>{{ item.start_date }}</td>
          <td>{{ item.end_date }}</td>
          <td>
            <button class="btn btn-info btn-sm me-2" @click="showDetail(item.id)">
              Detail
            </button>
            <button class="btn btn-warning btn-sm me-2" @click="editProject(item.id)">
              Edit
            </button>
            <button class="btn btn-danger btn-sm" @click="deleteProject(item.id)">
              Delete
            </button>
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Detail Modal (Bootstrap) -->
    <div
      class="modal"
      :class="{ fade: true, show: detailDialog }"
      :style="{ display: detailDialog ? 'block' : 'none' }"
      tabindex="-1"
      role="dialog"
      aria-modal="true"
      v-if="detailDialog"
      @click.self="detailDialog = false"
    >
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Project Detail</h5>
            <button
              type="button"
              class="btn-close"
              @click="detailDialog = false"
            ></button>
          </div>
          <div class="modal-body">
            <ProjectDetail :projectId="detailProjectId" />
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              @click="detailDialog = false"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal backdrop -->
    <div
      v-if="detailDialog"
      class="modal-backdrop fade show"
    ></div>
  </div>
</template>

<script>
import axios from 'axios'
import ProjectDetail from '@/components/ProjectDetail.vue'

export default {
  name: 'ProjectList',
  components: { ProjectDetail },
  props: {
    projects: {
      type: Array,
      default: () => []
    }
  },
  data() {
    return {
      detailDialog: false,
      detailProjectId: null
    }
  },
  methods: {
    showDetail(projectId) {
      this.detailProjectId = projectId
      this.detailDialog = true
    },
    editProject(projectId) {
      this.$emit('edit-project', projectId)
    },
    async deleteProject(id) {
      if (!confirm('確定要刪除此專案嗎？')) return
      try {
        await axios.delete(`/api/projects/${id}`)
        this.$emit('refresh')
      } catch (err) {
        console.error(err)
      }
    }
  }
}
</script>

<style scoped>
.me-2 {
  margin-right: 8px;
}
.mb-6 {
  margin-bottom: 24px;
}

/* ★ 關鍵：確保 modal 與 backdrop 層級正確 */
.modal {
  z-index: 1050; /* Bootstrap默認modal z-index */
}
.modal-backdrop {
  z-index: 1040; /* 低於modal即可 */
}
</style>

================================================================================

frontend/src/components/SiteDiaryForm.vue

================================================================================
<template>
  <div class="site-diary-form border p-3" style="max-height:90vh; overflow-y:auto;">
    <!-- Title + Close Button -->
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h5 class="m-0">Site Diary Form</h5>
      <button class="btn btn-sm btn-outline-secondary" @click="cancelForm">Close</button>
    </div>

    <form @submit.prevent="handleSubmit">
      <!-- Row 1: Date, Weather, Day Count -->
      <div class="row mb-3">
        <div class="col-sm-6 col-md-3 mb-2">
          <label class="form-label">Report Date</label>
          <input
            type="date"
            v-model="localReportDateStr"
            class="form-control form-control-sm"
          />
        </div>
        <div class="col-sm-6 col-md-3 mb-2">
          <label class="form-label">Weather (Morning)</label>
          <input
            type="text"
            v-model="formData.weather_morning"
            class="form-control form-control-sm"
          />
        </div>
        <div class="col-sm-6 col-md-3 mb-2">
          <label class="form-label">Weather (Noon)</label>
          <input
            type="text"
            v-model="formData.weather_noon"
            class="form-control form-control-sm"
          />
        </div>
        <div class="col-sm-6 col-md-3 mb-2">
          <label class="form-label">Day Count</label>
          <input
            type="number"
            v-model.number="formData.day_count"
            class="form-control form-control-sm"
          />
        </div>
      </div>

      <!-- Summary -->
      <div class="mb-3">
        <label class="form-label">Summary</label>
        <textarea
          v-model="formData.summary"
          class="form-control form-control-sm"
          rows="2"
        ></textarea>
      </div>

      <!-- Workers -->
      <h6>Workers</h6>
      <div class="row">
        <div
          class="col-sm-6 col-md-4 col-lg-3 mb-2"
          v-for="(count, type) in formData.workers"
          :key="type"
        >
          <label class="form-label">{{ type }}</label>
          <input
            type="number"
            v-model.number="formData.workers[type]"
            class="form-control form-control-sm"
          />
        </div>
      </div>

      <!-- Machines -->
      <h6 class="mt-3">Machines</h6>
      <div class="row">
        <div
          class="col-sm-6 col-md-4 col-lg-3 mb-2"
          v-for="(count, type) in formData.machines"
          :key="type"
        >
          <label class="form-label">{{ type }}</label>
          <input
            type="number"
            v-model.number="formData.machines[type]"
            class="form-control form-control-sm"
          />
        </div>
      </div>

      <!-- Staff (multiple select) -->
      <div class="mt-3 mb-3">
        <label class="form-label">Staffs</label>
        <select
          multiple
          v-model="selectedStaffIds"
          class="form-select"
          size="5"
        >
          <option
            v-for="staff in staffList"
            :key="staff.id"
            :value="staff.id"
          >
            {{ staff.name }} ({{ staff.role || 'N/A' }})
          </option>
        </select>
      </div>

      <!-- Footer buttons -->
      <div class="d-flex justify-content-end mt-3">
        <button
          type="button"
          class="btn btn-secondary me-2"
          @click="clearForm"
        >
          Clear
        </button>
        <button
          type="button"
          class="btn btn-secondary me-2"
          @click="cancelForm"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="btn btn-primary"
        >
          {{ diaryId ? 'Update' : 'Create' }}
        </button>
      </div>
    </form>
  </div>
</template>

<script>
import axios from 'axios'
import { ref, onMounted, watch } from 'vue'

export default {
  name: 'SiteDiaryForm',
  props: {
    projectId: { type: Number, required: true },
    diaryId: { type: Number, default: null }
  },
  setup(props, { emit }) {
    const initialFormData = {
      report_date: null,
      weather_morning: '',
      weather_noon: '',
      day_count: null,
      summary: '',
      workers: {
        '地盤總管': 0,
        '工程師': 0,
        '管工': 0,
        '平水員': 0,
        '燒焊焊工': 0,
        '機手': 0,
        '泥水工': 0,
        '紮鐵工': 0,
        '木板工': 0,
        '電工': 0,
        '水喉工': 0,
        '雜工': 0,
        '其他': 0
      },
      machines: {
        '挖掘機': 0,
        '發電機': 0,
        '風機': 0,
        '泥頭車': 0,
        '吊機': 0,
        '機炮': 0,
        '屈鐵機': 0,
        '風車鋸': 0
      }
    }

    const formData = ref({ ...initialFormData })
    const selectedStaffIds = ref([])
    const localReportDateStr = ref('')
    const staffList = ref([])

    const fetchStaff = async () => {
      try {
        const { data } = await axios.get('/api/staff')
        staffList.value = data
      } catch (err) {
        console.error(err)
      }
    }

    const fetchExistingDiary = async () => {
      if (!props.diaryId) return
      try {
        const { data } = await axios.get(`/api/projects/${props.projectId}/site_diaries`)
        const target = data.find(d => d.id === props.diaryId)
        if (!target) return
        setFormDataFromDiary(target)
      } catch (err) {
        console.error(err)
      }
    }

    const fetchLastDiaryAsDefault = async () => {
      if (props.diaryId) return
      try {
        const { data } = await axios.get(
          `/api/projects/${props.projectId}/site_diaries/last`
        )
        if (!data.id) {
          // 無資料，不做預設
          return
        }
        setFormDataFromDiary(data)
      } catch (err) {
        console.error(err)
      }
    }

    function setFormDataFromDiary(diaryData) {
      // 報表日期
      localReportDateStr.value = diaryData.report_date || ''
      // Weather, summary, day_count
      formData.value.weather_morning = diaryData.weather_morning || ''
      formData.value.weather_noon = diaryData.weather_noon || ''
      formData.value.day_count = diaryData.day_count || null
      formData.value.summary = diaryData.summary || ''

      // Workers
      const updatedWorkers = { ...initialFormData.workers }
      for (const w of diaryData.workers || []) {
        updatedWorkers[w.type] = w.quantity
      }
      formData.value.workers = updatedWorkers

      // Machines
      const updatedMachines = { ...initialFormData.machines }
      for (const m of diaryData.machines || []) {
        updatedMachines[m.type] = m.quantity
      }
      formData.value.machines = updatedMachines

      // Staff
      selectedStaffIds.value = (diaryData.staffs || []).map(s => s.id)
    }

    const handleSubmit = async () => {
      try {
        formData.value.report_date = localReportDateStr.value || null
        const payload = {
          report_date: formData.value.report_date,
          weather_morning: formData.value.weather_morning,
          weather_noon: formData.value.weather_noon,
          day_count: formData.value.day_count,
          summary: formData.value.summary,
          workers: formData.value.workers,
          machines: formData.value.machines,
          staff_ids: selectedStaffIds.value
        }

        if (!props.diaryId) {
          // create
          await axios.post(`/api/projects/${props.projectId}/site_diaries`, payload)
        } else {
          // update
          await axios.put(
            `/api/projects/${props.projectId}/site_diaries/${props.diaryId}`,
            payload
          )
        }
        emit('updated')
      } catch (err) {
        console.error(err)
      }
    }

    const cancelForm = () => {
      emit('cancel')
    }

    const clearForm = () => {
      formData.value = { ...initialFormData }
      localReportDateStr.value = ''
      selectedStaffIds.value = []
    }

    watch(
      () => props.diaryId,
      () => {
        fetchExistingDiary()
      }
    )

    onMounted(async () => {
      await fetchStaff()
      if (!props.diaryId) {
        fetchLastDiaryAsDefault()
      } else {
        fetchExistingDiary()
      }
    })

    return {
      formData,
      selectedStaffIds,
      localReportDateStr,
      staffList,
      handleSubmit,
      cancelForm,
      clearForm
    }
  }
}
</script>

<style scoped>
.site-diary-form {
  font-size: 0.875rem;
}
.me-2 {
  margin-right: 8px !important;
}
.mt-2 {
  margin-top: 8px !important;
}
</style>

================================================================================

frontend/src/main.ts

================================================================================
// frontend/src/main.ts
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'

// 改用 Bootstrap 5（CSS + JS Bundle）
import 'bootstrap/dist/css/bootstrap.min.css'
import 'bootstrap/dist/js/bootstrap.bundle.min.js'

const app = createApp(App)
app.use(router)
app.mount('#app')

================================================================================

frontend/src/router.ts

================================================================================
// frontend/src/router.ts
import { createRouter, createWebHistory } from 'vue-router'
import HomeView from './views/HomeView.vue'
import ProjectsView from './views/ProjectsView.vue'
import MaterialFormView from './views/MaterialFormView.vue'
import StaffView from './views/StaffView.vue'
import SiteDiaryListView from './views/SiteDiaryListView.vue'

// ★ 新增 import
import ProjectsGanttView from './views/ProjectsGanttView.vue'

const routes = [
  { path: '/', component: HomeView },
  { path: '/projects', component: ProjectsView },
  { path: '/material', component: MaterialFormView },
  { path: '/staff', component: StaffView },
  { path: '/projects/:projectId/diaries', component: SiteDiaryListView },

  // ★ 新增：Gantt 頁面
  { path: '/projects/:projectId/gantt', component: ProjectsGanttView }
]

export default createRouter({
  history: createWebHistory(),
  routes
})

================================================================================

frontend/src/shims-vue.d.ts

================================================================================
declare module '*.vue' {
  import type { DefineComponent } from 'vue'
  const component: DefineComponent<{}, {}, any>
  export default component
} 
================================================================================

frontend/src/style.css

================================================================================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

.card {
  padding: 2em;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

/* 針對淺色模式 */
@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

/* ========== 新增一些可重複使用的表單樣式 ========== */

.form-card {
  background: #f9f9f9;
  padding: 1rem 1.5rem;
  border-radius: 8px;
  border: 1px solid #ccc;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 1rem;
}

.form-label {
  display: inline-block;
  width: 120px;
  font-weight: bold;
  margin-right: 0.5rem;
}

.form-input {
  width: calc(100% - 130px);
  padding: 6px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.checkbox-group {
  margin-bottom: 0.5rem;
}

.checkbox-label {
  margin-left: 6px;
}

.btn-submit {
  margin-top: 20px;
  padding: 8px 16px;
  background: #646cff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.btn-submit:hover {
  background: #535bf2;
}

================================================================================

frontend/src/views/HomeView.vue

================================================================================
<template>
  <div class="container text-center py-5">
    <h1>Welcome to the Project Management System</h1>
    <p>這裡是專案管理的首頁。</p>
    <img
      src="/vite.svg"
      alt="Vite Logo"
      style="height: 100px;"
      class="d-block mx-auto my-4"
    />
    <router-link to="/projects" class="btn btn-primary">Go to Projects</router-link>
  </div>
</template>

<script>
export default {
  name: 'HomeView'
}
</script>

<style scoped>
/* 可自行增添 */
</style>

================================================================================

frontend/src/views/MaterialFormView.vue

================================================================================
<template>
    <div class="material-form-container">
      <h1>Material Submission Form</h1>
  
      <div class="form-card">
        <form @submit.prevent="handleSubmit">
  
          <!-- Special Fields (工程編號、工程名稱、文件編號) -->
          <div
            v-for="(info, fieldName) in specialFields"
            :key="fieldName"
            class="form-group"
          >
            <label :for="fieldName" class="form-label">
              {{ fieldName }}:
            </label>
            <input
              type="text"
              :id="fieldName"
              v-model="formData[fieldName]"
              class="form-input"
            />
          </div>
  
          <hr />
  
          <!-- Regular Fields (報批之材料、牌子(如有)、預算表之項目編號、型號、貨期、數量) -->
          <div
            v-for="(item, i) in regularFields"
            :key="i"
            class="form-group"
          >
            <label :for="item[0]" class="form-label">
              {{ item[0] }}:
            </label>
            <input
              type="text"
              :id="item[0]"
              v-model="formData[item[0]]"
              class="form-input"
            />
          </div>
  
          <hr />
  
          <!-- Material Type Checkboxes -->
          <h3>Material Type</h3>
          <div
            v-for="(box, i) in materialTypeCheckboxes"
            :key="i"
            class="checkbox-group"
          >
            <input
              type="checkbox"
              :id="box[0]"
              v-model="formData[box[0]]"
            />
            <label :for="box[0]" class="checkbox-label">
              {{ box[0] }}
            </label>
          </div>
  
          <hr />
  
          <!-- Material Status Checkboxes -->
          <h3>Material Status</h3>
          <div
            v-for="(box, i) in materialStatusCheckboxes"
            :key="i"
            class="checkbox-group"
          >
            <input
              type="checkbox"
              :id="box[0]"
              v-model="formData[box[0]]"
            />
            <label :for="box[0]" class="checkbox-label">
              {{ box[0] }}
            </label>
          </div>
  
          <hr />
  
          <!-- Attachment Type -->
          <h3>Attachment Type</h3>
          <div class="form-group">
            <label for="附件" class="form-label">附件:</label>
            <input
              type="text"
              id="附件"
              v-model="formData['附件']"
              class="form-input"
            />
          </div>
          <div
            v-for="(box, i) in attachmentTypeCheckboxes"
            :key="i"
            class="checkbox-group"
          >
            <input
              type="checkbox"
              :id="box[0]"
              v-model="formData[box[0]]"
            />
            <label :for="box[0]" class="checkbox-label">
              {{ box[0] }}
            </label>
          </div>
  
          <hr />
  
          <!-- 日期與檔案名稱 -->
          <div class="form-group">
            <label for="日期" class="form-label">日期:</label>
            <input
              type="date"
              id="日期"
              v-model="formData['日期']"
              class="form-input"
            />
          </div>
  
          <div class="form-group">
            <label for="檔案名稱" class="form-label">檔案名稱:</label>
            <input
              type="text"
              id="檔案名稱"
              v-model="formData['檔案名稱']"
              class="form-input"
            />
          </div>
  
          <button type="submit" class="btn-submit">Generate Excel</button>
        </form>
      </div>
    </div>
  </template>
  
  <script>
  import axios from 'axios'
  
  export default {
    name: 'MaterialFormView',
    data() {
      return {
        // 前端資料物件：包含所有要傳給後端的欄位
        formData: {
          '工程編號': '',
          '工程名稱': '',
          '文件編號': '',
          '報批之材料': '',
          '牌子(如有)': '',
          '預算表之項目編號': '',
          '型號': '',
          '貨期': '',
          '數量': '',
          // Material Type
          '結構': false,
          '供水': false,
          '建築': false,
          '電氣': false,
          '排水': false,
          '其他': false,
          // Material Status
          '與設計相同': false,
          '與標書相同': false,
          '與後加工程建議書相同': false,
          '同等質量': false,
          '替換材料': false,
          '原設計沒有指定': false,
          // Attachment
          '附件': '',
          // Attachment Type
          '樣板': false,
          '目錄': false,
          '來源證': false,
          '其他(附件)': false, // 避免和 Material Type 的 '其他' 混淆，可稍微改個 key
          // 日期、檔案名稱
          '日期': new Date().toISOString().split('T')[0],
          '檔案名稱': ''
        },
  
        // specialFields: 與後端 constants.py 中的 special_fields 相對應
        specialFields: {
          '工程編號': [6,2,4,'37/2024/DVPS'],
          '工程名稱': [7,2,4,'黑沙馬路行人道優化工程(第二期)'],
          '文件編號': [6,8,8,'']
        },
  
        // regularFields: 與後端 constants.py 中的 regular_fields 相對應
        regularFields: [
          ['報批之材料', 11, 3],
          ['牌子(如有)', 12, 3],
          ['預算表之項目編號', 11, 7],
          ['型號', 12, 6],
          ['貨期', 13, 6],
          ['數量', 14, 6]
        ],
  
        // materialTypeCheckboxes: 與後端 constants.py 中的 material_type_checkboxes 相對應
        materialTypeCheckboxes: [
          ['結構', 7, 6],
          ['供水', 8, 6],
          ['建築', 7, 8],
          ['電氣', 8, 8],
          ['排水', 7, 10],
          ['其他', 8, 10]
        ],
  
        // materialStatusCheckboxes: 與後端 constants.py 中的 material_status_checkboxes 相對應
        materialStatusCheckboxes: [
          ['與設計相同', 13, 1],
          ['與標書相同', 14, 1],
          ['與後加工程建議書相同', 15, 1],
          ['同等質量', 16, 1],
          ['替換材料', 17, 1],
          ['原設計沒有指定', 18, 1]
        ],
  
        // attachmentTypeCheckboxes: 與後端 constants.py 中的 attachment_type_checkboxes 相對應
        attachmentTypeCheckboxes: [
          ['樣板', 16, 5],
          ['目錄', 17, 5],
          ['來源證', 16, 7],
          ['其他(附件)', 17, 7]
        ]
      }
    },
    methods: {
      async handleSubmit() {
        try {
          // 將前端 formData 傳給後端 /api/material-submission
          const response = await axios.post('/api/material-submission', this.formData, {
            responseType: 'blob'
          })
          // 下載後端回傳的 Excel 檔
          const fileURL = window.URL.createObjectURL(new Blob([response.data]))
          const fileLink = document.createElement('a')
          fileLink.href = fileURL
          const filename = this.formData['檔案名稱'] || '材料報批表_filled.xlsx'
          fileLink.setAttribute(
            'download',
            filename.endsWith('.xlsx') ? filename : filename + '.xlsx'
          )
          document.body.appendChild(fileLink)
          fileLink.click()
          fileLink.remove()
        } catch (err) {
          console.error('下載發生錯誤', err)
        }
      }
    }
  }
  </script>
  
  <style scoped>
  .material-form-container {
    max-width: 600px;
    margin: 0 auto;
  }
  .form-card {
    background: #f9f9f9;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    border: 1px solid #ccc;
  }
  .form-group {
    margin-bottom: 1rem;
  }
  .form-label {
    display: inline-block;
    width: 120px;
    font-weight: bold;
    margin-right: 0.5rem;
  }
  .form-input {
    width: calc(100% - 130px);
    padding: 6px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  .checkbox-group {
    margin-bottom: 0.5rem;
  }
  .checkbox-label {
    margin-left: 6px;
  }
  .btn-submit {
    margin-top: 20px;
    padding: 8px 16px;
    background: #646cff;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  .btn-submit:hover {
    background: #535bf2;
  }
  </style>
  
================================================================================

frontend/src/views/ProjectsGanttView.vue

================================================================================
<template>
  <div class="projects-gantt-view container-fluid py-3">
    <!-- 頁面標題 & 專案資訊 -->
    <div class="row mb-3">
      <div class="col-12 col-md-6 mb-3">
        <div class="card">
          <div class="card-body">
            <h4 class="card-title mb-3">
              專案 #{{ projectId }} - 甘特圖
            </h4>
            <div v-if="projectInfo">
              <p class="mb-1">名稱：<strong>{{ projectInfo.name }}</strong></p>
              <p class="mb-1">承建商：{{ projectInfo.contractor || '(未填)' }}</p>
              <p class="mb-1">期間：{{ projectInfo.start_date || 'N/A' }} ~ {{ projectInfo.end_date || 'N/A' }}</p>
            </div>
            <div v-else>
              <p class="text-muted">載入專案資訊中...</p>
            </div>
          </div>
        </div>
      </div>
      <!-- Snapshot 快照管理卡片 -->
      <div class="col-12 col-md-6 mb-3">
        <div class="card h-100">
          <div class="card-body d-flex flex-column">
            <h5 class="card-title">甘特圖快照管理</h5>
            <div class="row g-2 mb-2 align-items-end">
              <div class="col-auto">
                <label class="form-label mb-0" style="font-size:0.9rem;">載入快照</label>
                <select
                  v-model="selectedSnapshotDate"
                  class="form-select form-select-sm"
                  style="width:auto;"
                >
                  <option value="">(當前最新)</option>
                  <option
                    v-for="snap in snapshots"
                    :key="snap.date"
                    :value="snap.date"
                  >
                    {{ snap.date }} ({{ snap.created_at || 'unknown' }})
                  </option>
                </select>
              </div>
              <div class="col-auto">
                <button
                  class="btn btn-sm btn-primary"
                  @click="loadSnapshot"
                >
                  載入
                </button>
              </div>
            </div>

            <div class="d-flex flex-wrap gap-2 mt-auto">
              <button
                class="btn btn-sm btn-success"
                @click="createSnapshot"
              >
                建立今日快照
              </button>
              <button
                class="btn btn-sm btn-danger"
                v-if="selectedSnapshotDate"
                @click="deleteSnapshot"
              >
                刪除此快照
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 工具列：假日設定、新增任務、清空任務、重新分配ID -->
    <div class="toolbar-section d-flex flex-wrap gap-2 mb-3">
      <button
        class="btn btn-secondary btn-sm"
        @click="showHolidaysModal = true"
      >
        管理假日設定
      </button>

      <button
        class="btn btn-primary btn-sm"
        @click="onAddTask"
      >
        新增任務
      </button>

      <button
        class="btn btn-danger btn-sm"
        @click="clearAllTasks"
      >
        清空所有任務
      </button>

      <!-- ★ 新增重新分配 ID 按鈕 -->
      <button
        class="btn btn-warning btn-sm"
        @click="reassignAllTaskIds"
      >
        重新分配任務ID
      </button>
    </div>

    <!-- 甘特圖本體 -->
    <div
      class="gantt-container border rounded"
      style="height: calc(100vh - 320px); overflow: hidden;"
      v-if="tasksLoaded"
    >
      <template v-if="tasks.length > 0">
        <GanttElastic
          :tasks="tasks"
          :options="ganttOptions"
          @chart-task-click="onTaskClick"
          style="width: 100%; height: 100%;"
        >
          <template #header>
            <GanttElasticHeader2 />
          </template>
        </GanttElastic>
      </template>
      <template v-else>
        <div class="p-3 text-center text-muted">
          目前沒有任何任務。
        </div>
      </template>
    </div>
    <div v-else class="text-center p-5 text-muted">
      載入任務資料中...
    </div>

    <!-- [Modal] 任務編輯/新增 -->
    <div
      class="modal"
      :class="{ fade: true, show: showEditTaskModal }"
      :style="{ display: showEditTaskModal ? 'block' : 'none' }"
      tabindex="-1"
      role="dialog"
      aria-modal="true"
      v-if="showEditTaskModal"
    >
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content p-3">
          <GanttTaskForm
            :projectId="projectIdNum"
            :snapshotDate="selectedSnapshotDate"
            :task="currentEditTask"
            @cancel="closeEditTaskModal"
            @saved="onTaskSaved"
          />
        </div>
      </div>
    </div>
    <div
      v-if="showEditTaskModal"
      class="modal-backdrop fade show"
    ></div>

    <!-- [Modal] 假日設定 -->
    <div
      class="modal"
      :class="{ fade: true, show: showHolidaysModal }"
      :style="{ display: showHolidaysModal ? 'block' : 'none' }"
      tabindex="-1"
      role="dialog"
      aria-modal="true"
      v-if="showHolidaysModal"
      @click.self="showHolidaysModal = false"
    >
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">假日 / 工作日設定</h5>
            <button
              type="button"
              class="btn-close"
              @click="showHolidaysModal = false"
            ></button>
          </div>
          <div class="modal-body">
            <div v-if="holidayData">
              <div class="mb-3">
                <label class="form-label">專案假日 (以逗號分隔)</label>
                <textarea
                  rows="2"
                  class="form-control form-control-sm"
                  v-model="holidayData.holidaysStr"
                  placeholder="e.g. 2025-01-01,2025-02-10"
                ></textarea>
              </div>
              <div class="mb-3">
                <label class="form-label">特別工作日</label>
                <textarea
                  rows="2"
                  class="form-control form-control-sm"
                  v-model="holidayData.specialWorkdaysStr"
                  placeholder="e.g. 2025-02-11"
                ></textarea>
              </div>
              <div class="mb-3">
                <label class="form-label">每週工作天數 (1-7)</label>
                <input
                  type="number"
                  min="1"
                  max="7"
                  class="form-control form-control-sm"
                  v-model.number="holidayData.workdays_per_week"
                />
              </div>
              <div class="mb-3">
                <label class="form-label">工作日對應星期幾 (0=日,1=一,...)</label>
                <input
                  type="text"
                  class="form-control form-control-sm"
                  v-model="holidayData.workday_weekdaysStr"
                  placeholder="e.g. 1,2,3,4,5"
                />
              </div>
            </div>
            <div v-else class="text-muted">
              載入中...
            </div>
          </div>
          <div class="modal-footer">
            <button
              class="btn btn-secondary btn-sm"
              @click="showHolidaysModal = false"
            >
              取消
            </button>
            <button
              class="btn btn-primary btn-sm"
              @click="updateHolidays"
            >
              儲存設定
            </button>
          </div>
        </div>
      </div>
    </div>
    <div
      v-if="showHolidaysModal"
      class="modal-backdrop fade show"
    ></div>
  </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import { useRoute } from 'vue-router'
import axios from 'axios'
import { GanttElastic, GanttElasticHeader2 } from 'gantt-elastic-wrapvue3'
import GanttTaskForm from '@/components/GanttTaskForm.vue'
import 'gantt-elastic-wrapvue3/dist/style.css'

export default {
  name: 'ProjectsGanttView',
  components: {
    GanttElastic,
    GanttElasticHeader2,
    GanttTaskForm
  },
  setup() {
    const route = useRoute()
    const projectId = route.params.projectId || ''
    const projectIdNum = Number(projectId)

    const projectInfo = ref(null)

    const tasks = ref([])
    const tasksLoaded = ref(false)

    const snapshots = ref([])
    const selectedSnapshotDate = ref('')

    const holidayData = ref(null)
    const showHolidaysModal = ref(false)

    const showEditTaskModal = ref(false)
    const currentEditTask = ref(null)

    onMounted(() => {
      fetchProjectInfo()
      fetchTasks()
      fetchSnapshots()
      fetchHolidays()
    })

    async function fetchProjectInfo() {
      try {
        const { data } = await axios.get(`/api/projects/${projectIdNum}`)
        projectInfo.value = data
      } catch (err) {
        console.error('fetchProjectInfo error:', err)
      }
    }

    async function fetchTasks(snapshotDate = '') {
      tasksLoaded.value = false
      try {
        const url = snapshotDate
          ? `/api/projects/${projectIdNum}/gantt/tasks?snapshot_date=${snapshotDate}`
          : `/api/projects/${projectIdNum}/gantt/tasks`
        const { data } = await axios.get(url)
        tasks.value = convertTasks(data)
      } catch (err) {
        console.error('fetchTasks error:', err)
        tasks.value = []
      } finally {
        tasksLoaded.value = true
      }
    }

    async function fetchSnapshots() {
      try {
        const { data } = await axios.get(`/api/projects/${projectIdNum}/gantt/snapshots`)
        snapshots.value = data
      } catch (err) {
        console.error('fetchSnapshots error:', err)
      }
    }

    async function fetchHolidays() {
      try {
        const { data } = await axios.get(`/api/projects/${projectIdNum}/gantt/holidays`)
        holidayData.value = transformHolidayData(data)
      } catch (err) {
        console.error('fetchHolidays error:', err)
      }
    }

    function convertTasks(rawList) {
      return rawList.map(item => {
        const progressPercent = item.progress ? Math.round(item.progress * 100) : 0
        return {
          id: Number(item.id),
          label: item.text || 'NoTitle',
          start: parseDateStartOfDay(item.start_date),
          end: parseDateEndOfDay(item.end_date),
          progress: progressPercent,
          parentId: item.parent_id || item.parent || null,
          dependentOn: item.depends || [],
          type: item.type || 'task'  // 新增對 type 的處理
        }
      })
    }

    function parseDateStartOfDay(str) {
      if (!str) {
        const now = new Date()
        now.setHours(0, 0, 0, 0)
        return now.getTime()
      }
      const dateStr = `${str}T00:00:00`
      const d = new Date(dateStr)
      return isNaN(d.getTime()) ? new Date().setHours(0,0,0,0) : d.getTime()
    }

    function parseDateEndOfDay(str) {
      if (!str) {
        const now = new Date()
        now.setHours(23, 59, 59, 999)
        return now.getTime()
      }
      const dateStr = `${str}T23:59:59.999`
      const d = new Date(dateStr)
      return isNaN(d.getTime()) ? new Date().setHours(23,59,59,999) : d.getTime()
    }

    function transformHolidayData(raw) {
      const cloned = { ...raw }
      cloned.holidaysStr = (cloned.holidays || []).join(',')
      cloned.specialWorkdaysStr = (cloned.special_workdays || []).join(',')
      cloned.workday_weekdaysStr = (cloned.workday_weekdays || []).join(',')
      return cloned
    }

    function loadSnapshot() {
      fetchTasks(selectedSnapshotDate.value)
    }

    async function createSnapshot() {
      if (!confirm('確定要建立今天的 Gantt 快照嗎？')) return
      try {
        const { data } = await axios.post(
          `/api/projects/${projectIdNum}/gantt/snapshots`,
          {}
        )
        alert(`已建立快照：${data.snapshot_date}`)
        fetchSnapshots()
      } catch (err) {
        console.error('createSnapshot error:', err)
      }
    }

    async function deleteSnapshot() {
      if (!selectedSnapshotDate.value) return
      if (!confirm(`確定要刪除 ${selectedSnapshotDate.value} 的快照？`)) return
      try {
        await axios.delete(
          `/api/projects/${projectIdNum}/gantt/snapshots/${selectedSnapshotDate.value}`
        )
        alert('已刪除。')
        selectedSnapshotDate.value = ''
        fetchSnapshots()
        fetchTasks('')
      } catch (err) {
        console.error('deleteSnapshot error:', err)
      }
    }

    async function updateHolidays() {
      if (!holidayData.value) return
      try {
        const body = {
          project_id: projectIdNum,
          holidays: parseStringToArr(holidayData.value.holidaysStr),
          special_workdays: parseStringToArr(holidayData.value.specialWorkdaysStr),
          workdays_per_week: holidayData.value.workdays_per_week || 5,
          workday_weekdays: parseNumArr(holidayData.value.workday_weekdaysStr)
        }
        await axios.put(`/api/projects/${projectIdNum}/gantt/holidays`, body)
        alert('假日設定已更新！')
        showHolidaysModal.value = false
      } catch (err) {
        console.error('updateHolidays error:', err)
      }
    }

    function parseStringToArr(str) {
      if (!str) return []
      return str.split(',').map(s => s.trim()).filter(Boolean)
    }
    function parseNumArr(str) {
      if (!str) return []
      return str.split(',').map(x => parseInt(x.trim(), 10)).filter(n => !isNaN(n))
    }

    function onAddTask() {
      currentEditTask.value = {}
      showEditTaskModal.value = true
    }

    async function clearAllTasks() {
      if (!confirm('確定要清空當前顯示的所有任務嗎？')) return
      try {
        let url = `/api/projects/${projectIdNum}/gantt/tasks/clear`
        if (selectedSnapshotDate.value) {
          url += `?snapshot_date=${selectedSnapshotDate.value}`
        }
        const res = await axios.delete(url)
        alert(res.data.message || '已清空完成')
        loadSnapshot()
      } catch (err) {
        console.error('clearAllTasks error:', err)
        alert('清空失敗：請查看 console log')
      }
    }

    // ★ 新增：重新分配ID
    async function reassignAllTaskIds() {
      if (!confirm('確定要重新分配任務ID？這將影響到所有任務的ID。')) return
      try {
        let url = `/api/projects/${projectIdNum}/gantt/tasks/reassign-ids`
        if (selectedSnapshotDate.value) {
          url += `?snapshot_date=${selectedSnapshotDate.value}`
        }
        await axios.post(url)
        alert('重新分配ID完成!')
        loadSnapshot()
      } catch (err) {
        console.error('reassignAllTaskIds error:', err)
        alert('操作失敗')
      }
    }

    function onTaskClick({ data }) {
      currentEditTask.value = data
      showEditTaskModal.value = true
    }

    function closeEditTaskModal() {
      showEditTaskModal.value = false
      currentEditTask.value = null
    }

    function onTaskSaved() {
      showEditTaskModal.value = false
      currentEditTask.value = null
      loadSnapshot()
    }

    const ganttOptions = {
      title: {
        label: `Project #${projectIdNum} Gantt`,
        html: false
      },
      taskList: {
        columns: [
          { id: 'col-id', label: 'ID', value: 'id', width: 40 },
          {
            id: 'col-label',
            label: '任務',
            value: 'label',
            width: 180,
            expander: true
          },
          {
            id: 'col-type',
            label: 'Type',
            value: 'type',   // ★ 顯示 type
            width: 80
          },
          {
            id: 'col-start',
            label: '開始',
            value: task => formatDate(task.start),
            width: 90
          },
          {
            id: 'col-end',
            label: '結束',
            value: task => formatDate(task.end),
            width: 90
          },
          {
            id: 'col-progress',
            label: '進度(%)',
            value: 'progress',
            width: 80
          }
        ]
      },
      chart: {
        progress: { bar: true },
        expander: { display: true }
      },
      scales: [
        {
          time: 'day',
          step: 1,
          name: 'Day',
          format: 'YYYY-MM-DD'
        }
      ],
      autoScale: false,
      minScale: 'day',
      maxScale: 'day',
      defaultZoom: 'day'
    }

    function formatDate(ts) {
      if (!ts) return ''
      const d = new Date(ts)
      const yyyy = d.getFullYear()
      const mm = String(d.getMonth() + 1).padStart(2, '0')
      const dd = String(d.getDate()).padStart(2, '0')
      return `${yyyy}-${mm}-${dd}`
    }

    return {
      projectInfo,
      tasks,
      tasksLoaded,
      snapshots,
      selectedSnapshotDate,
      holidayData,
      showHolidaysModal,
      showEditTaskModal,
      currentEditTask,

      projectId,
      projectIdNum,

      loadSnapshot,
      createSnapshot,
      deleteSnapshot,
      updateHolidays,
      onAddTask,
      clearAllTasks,
      reassignAllTaskIds,
      onTaskClick,
      closeEditTaskModal,
      onTaskSaved,
      ganttOptions
    }
  }
}
</script>

<style scoped>
.projects-gantt-view {
}

.gantt-container {
  background-color: #fff;
}

.modal {
  z-index: 1050;
}
.modal-backdrop {
  z-index: 1040;
}

.toolbar-section > * {
  margin-right: 0.5rem;
  margin-bottom: 0.5rem;
}
</style>

================================================================================

frontend/src/views/ProjectsView.vue

================================================================================
<template>
  <div class="container-fluid">
    <h1>All Projects</h1>
    <button class="btn btn-primary mb-4" @click="openCreateProjectDialog">
      Create New Project
    </button>

    <ProjectList
      :projects="projects"
      @refresh="fetchProjects"
      @edit-project="openEditProjectDialog"
    />

    <!-- Bootstrap Modal for Create/Edit Project -->
    <div
      class="modal"
      :class="{ fade: true, show: showProjectDialog }"
      :style="{ display: showProjectDialog ? 'block' : 'none' }"
      tabindex="-1"
      role="dialog"
      aria-modal="true"
      v-if="showProjectDialog"
      @click.self="closeProjectDialog"
    >
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              {{ editingProjectId ? 'Edit Project' : 'Create Project' }}
            </h5>
            <button
              type="button"
              class="btn-close"
              aria-label="Close"
              @click="closeProjectDialog"
            ></button>
          </div>
          <div class="modal-body">
            <ProjectForm
              :projectId="editingProjectId"
              @close="closeProjectDialog"
              @refresh="onProjectSaved"
            />
          </div>
        </div>
      </div>
    </div>

    <!-- Modal backdrop -->
    <div
      v-if="showProjectDialog"
      class="modal-backdrop fade show"
    ></div>
  </div>
</template>

<script>
import axios from 'axios'
import { ref, onMounted } from 'vue'
import ProjectList from '@/components/ProjectList.vue'
import ProjectForm from '@/components/ProjectForm.vue'

export default {
  name: 'ProjectsView',
  components: { ProjectList, ProjectForm },
  setup() {
    const projects = ref([])
    const showProjectDialog = ref(false)
    const editingProjectId = ref(null)

    const fetchProjects = async () => {
      try {
        const { data } = await axios.get('/api/projects/')
        projects.value = data
      } catch (err) {
        console.error(err)
      }
    }

    const openCreateProjectDialog = () => {
      editingProjectId.value = null
      showProjectDialog.value = true
    }

    const openEditProjectDialog = (id) => {
      editingProjectId.value = id
      showProjectDialog.value = true
    }

    const closeProjectDialog = () => {
      showProjectDialog.value = false
    }

    const onProjectSaved = () => {
      showProjectDialog.value = false
      fetchProjects()
    }

    onMounted(() => {
      fetchProjects()
    })

    return {
      projects,
      showProjectDialog,
      editingProjectId,
      fetchProjects,
      openCreateProjectDialog,
      openEditProjectDialog,
      closeProjectDialog,
      onProjectSaved
    }
  }
}
</script>

<style scoped>
.mb-4 {
  margin-bottom: 16px;
}

/* ★ 與 ProjectList.vue 相同的 z-index 設定，確保顯示優先順序正確 */
.modal {
  z-index: 1050;
}
.modal-backdrop {
  z-index: 1040;
}
</style>

================================================================================

frontend/src/views/SiteDiaryListView.vue

================================================================================
<template>
  <div class="container-fluid" style="max-width:2000px; margin:0 auto;">
    <h2>Site Diaries Management</h2>

    <div v-if="projectInfo" class="border p-3 mb-4">
      <h3>Project: {{ projectInfo.name }}</h3>
      <p>Owner: {{ projectInfo.owner }}</p>
    </div>

    <!-- 排序操作 -->
    <div class="d-flex align-items-center mb-3" style="gap: 1rem;">
      <div>
        <label>Sort By:</label>
        <select v-model="sortBy" class="form-select form-select-sm w-auto d-inline-block">
          <option value="report_date">Date</option>
          <option value="day_count">Day Count</option>
          <option value="updated_at">Last Edited</option>
        </select>
      </div>
      <div>
        <label>Order:</label>
        <select v-model.number="sortOrder" class="form-select form-select-sm w-auto d-inline-block">
          <option :value="1">ASC</option>
          <option :value="-1">DESC</option>
        </select>
      </div>
      <button class="btn btn-secondary btn-sm" @click="fetchSiteDiaries">Apply Sort</button>
    </div>

    <button class="btn btn-success mb-4" @click="openCreateDialog">NEW SITE DIARY</button>

    <!-- 多選下載操作區 -->
    <div class="mb-3 d-flex align-items-center" style="gap: 1rem;">
      <div class="form-check">
        <input
          class="form-check-input"
          type="checkbox"
          id="selectAll"
          :checked="isAllSelected"
          @change="toggleSelectAll"
        />
        <label class="form-check-label" for="selectAll">全選</label>
      </div>

      <!-- 改用非同步 + SSE 的下載按鈕 -->
      <button class="btn btn-outline-primary btn-sm" @click="downloadMultipleAsync('xlsx')">
        Download XLSX (多筆, SSE)
      </button>
      <button class="btn btn-outline-primary btn-sm" @click="downloadMultipleAsync('sheet1')">
        Download PDF(表1) (SSE)
      </button>
      <button class="btn btn-outline-primary btn-sm" @click="downloadMultipleAsync('sheet2')">
        Download PDF(表2) (SSE)
      </button>
    </div>

    <div class="table-responsive">
      <!-- 使用 table-sm 並在 :class="getRowClass(item)" 來標示星期天 -->
      <table class="table table-sm table-bordered table-hover mb-6">
        <thead>
          <tr>
            <th>#</th>
            <th>勾選</th>
            <th>日期</th>
            <th>天氣(早)</th>
            <th>天氣(中)</th>
            <th>日數</th>
            <th>Last Edited</th>
            <th>EDIT</th>
            <th>DELETE</th>
            <th>DOWNLOAD (Single)</th>
          </tr>
        </thead>
        <tbody>
          <tr
            v-for="(item, index) in siteDiaries"
            :key="item.id"
            :class="getRowClass(item)"
          >
            <td>{{ index + 1 }}</td>
            <td>
              <input
                type="checkbox"
                class="form-check-input"
                :value="item.id"
                v-model="selectedDiaryIds"
              />
            </td>
            <td>{{ item.report_date }}</td>
            <td>{{ item.weather_morning }}</td>
            <td>{{ item.weather_noon }}</td>
            <td>{{ item.day_count }}</td>
            <td>{{ item.updated_at || '' }}</td>
            <td>
              <button class="btn btn-warning btn-sm" @click="openEditDialog(item.id)">
                EDIT
              </button>
            </td>
            <td>
              <button class="btn btn-danger btn-sm" @click="deleteDiary(item.id)">
                DELETE
              </button>
            </td>
            <td>
              <div class="dropdown">
                <button
                  class="btn btn-info btn-sm dropdown-toggle"
                  type="button"
                  data-bs-toggle="dropdown"
                >
                  DOWNLOAD
                </button>
                <ul class="dropdown-menu">
                  <li>
                    <a
                      class="dropdown-item"
                      href="#"
                      @click.prevent="downloadReport(item.id, 'xlsx')"
                    >
                      Excel (XLSX)
                    </a>
                  </li>
                  <li>
                    <a
                      class="dropdown-item"
                      href="#"
                      @click.prevent="downloadReport(item.id, 'sheet1')"
                    >
                      PDF(表1)
                    </a>
                  </li>
                  <li>
                    <a
                      class="dropdown-item"
                      href="#"
                      @click.prevent="downloadReport(item.id, 'sheet2')"
                    >
                      PDF(表2)
                    </a>
                  </li>
                </ul>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Diary Form Modal -->
    <div
      class="modal"
      :class="{ fade: true, show: displayFormDialog }"
      :style="{ display: displayFormDialog ? 'block' : 'none' }"
      tabindex="-1"
      role="dialog"
      aria-modal="true"
      v-if="displayFormDialog"
    >
      <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
          <div class="modal-body">
            <SiteDiaryForm
              :projectId="projectIdNumber"
              :diaryId="editingDiaryId"
              @updated="onDiaryUpdated"
              @cancel="onDiaryCancelled"
            />
          </div>
        </div>
      </div>
    </div>

    <!-- Modal backdrop for form -->
    <div
      v-if="displayFormDialog"
      class="modal-backdrop fade show"
    ></div>

    <!-- SSE 進度 Modal -->
    <div
      class="modal"
      :class="{ fade: true, show: showProgressModal }"
      :style="{ display: showProgressModal ? 'block' : 'none' }"
      tabindex="-1"
      role="dialog"
      aria-modal="true"
      v-if="showProgressModal"
    >
      <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Export Progress</h5>
            <button
              type="button"
              class="btn-close"
              @click="abortSse"
            ></button>
          </div>
          <div class="modal-body text-center">
            <p v-if="progressStatus === 'error'" class="text-danger">
              Error: {{ progressErrorMsg }}
            </p>
            <p v-else-if="progressStatus === 'done'" class="text-success">
              All done!
            </p>
            <p v-else>
              Exporting... ({{ sseProgress }}%)
            </p>

            <!-- Bootstrap 進度條範例 -->
            <div class="progress" style="height: 24px;">
              <div
                class="progress-bar"
                role="progressbar"
                :style="{width: sseProgress + '%'}"
                :aria-valuenow="sseProgress"
                aria-valuemin="0"
                aria-valuemax="100"
              >
                {{ sseProgress }}%
              </div>
            </div>

          </div>
          <div class="modal-footer">
            <button
              v-if="progressStatus === 'done' || progressStatus === 'error'"
              type="button"
              class="btn btn-secondary"
              @click="closeProgressModal"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal backdrop for SSE progress -->
    <div
      v-if="showProgressModal"
      class="modal-backdrop fade show"
    ></div>
  </div>
</template>

<script>
import axios from 'axios'
import { ref, computed, onMounted } from 'vue'
import { useRoute } from 'vue-router'
import SiteDiaryForm from '@/components/SiteDiaryForm.vue'

export default {
  name: 'SiteDiaryListView',
  components: { SiteDiaryForm },
  setup() {
    const route = useRoute()
    const siteDiaries = ref([])
    const projectInfo = ref(null)
    const displayFormDialog = ref(false)
    const editingDiaryId = ref(null)

    // 多選勾選
    const selectedDiaryIds = ref([])

    // 排序
    const sortBy = ref('report_date')
    const sortOrder = ref(1)

    const projectIdNumber = computed(() => Number(route.params.projectId))

    // =============== SSE 相關的狀態 ===============
    const showProgressModal = ref(false)
    const sseProgress = ref(0)
    const progressStatus = ref('idle') // idle, in_progress, done, error
    const progressErrorMsg = ref('')
    let sse = null // 用於記錄 SSE 連線物件 (EventSource)

    // 取得專案資訊
    const fetchProjectInfo = async () => {
      try {
        const { data } = await axios.get(`/api/projects/${projectIdNumber.value}`)
        projectInfo.value = data
      } catch (error) {
        console.error(error)
      }
    }

    // 取得日報列表
    const fetchSiteDiaries = async () => {
      try {
        const { data } = await axios.get(
          `/api/projects/${projectIdNumber.value}/site_diaries`,
          { params: { sort_by: sortBy.value, sort_order: sortOrder.value } }
        )
        siteDiaries.value = data
        selectedDiaryIds.value = [] // 每次重新載入都清空勾選
      } catch (err) {
        console.error(err)
      }
    }

    // 開啟「新建」對話框
    const openCreateDialog = () => {
      editingDiaryId.value = null
      displayFormDialog.value = true
    }

    // 開啟「編輯」對話框
    const openEditDialog = (diaryId) => {
      editingDiaryId.value = diaryId
      displayFormDialog.value = true
    }

    // 刪除日報
    const deleteDiary = async (diaryId) => {
      if (!confirm('Are you sure you want to delete this Site Diary?')) return
      try {
        await axios.delete(`/api/projects/${projectIdNumber.value}/site_diaries/${diaryId}`)
        alert('Diary deleted.')
        fetchSiteDiaries()
      } catch (err) {
        console.error(err)
      }
    }

    // 單筆下載 (維持原狀)
    const downloadReport = async (diaryId, fileType) => {
      try {
        const response = await axios.get(
          `/api/projects/${projectIdNumber.value}/site_diaries/${diaryId}/download_report?file=${fileType}`,
          { responseType: 'blob' }
        )
        let filename
        if (fileType === 'xlsx') {
          filename = 'daily_report_filled.xlsx'
        } else if (fileType === 'sheet1') {
          filename = 'daily_report_sheet1.pdf'
        } else {
          filename = 'daily_report_sheet2.pdf'
        }

        // 嘗試從 headers 取得後端回傳檔名
        const cd = response.headers['content-disposition']
        if (cd) {
          const m = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(cd)
          if (m && m[1]) {
            filename = m[1].replace(/['"]/g, '')
          }
        }

        const blobUrl = window.URL.createObjectURL(response.data)
        const link = document.createElement('a')
        link.href = blobUrl
        link.setAttribute('download', filename)
        document.body.appendChild(link)
        link.click()
        link.remove()
        window.URL.revokeObjectURL(blobUrl)
      } catch (err) {
        console.error('Download failed:', err)
      }
    }

    // ================ 重新改寫多筆下載 (SSE 版本) ====================
    const downloadMultipleAsync = async (fileType) => {
      if (!selectedDiaryIds.value.length) {
        alert('請先勾選一筆以上的日報！')
        return
      }
      // 先呼叫非同步 API => 取得 job_id
      try {
        // 重置 SSE 狀態
        sseProgress.value = 0
        progressStatus.value = 'in_progress'
        progressErrorMsg.value = ''
        showProgressModal.value = true

        const payload = {
          diary_ids: selectedDiaryIds.value,
          file_type: fileType
        }
        const res = await axios.post(
          `/api/projects/${projectIdNumber.value}/site_diaries/multi_download_async`,
          payload
        )
        const { job_id } = res.data

        // 開始 SSE 監聽
        startSse(job_id)
      } catch (err) {
        console.error('multi_download_async error:', err)
        alert('多筆下載時發生錯誤。請查看 console log')
      }
    }

    function startSse(jobId) {
      const sseUrl = `/api/progress-sse/${jobId}`
      sse = new EventSource(sseUrl)

      sse.onmessage = (evt) => {
        const data = JSON.parse(evt.data) // { progress, status, error_msg? }
        sseProgress.value = data.progress
        progressStatus.value = data.status || 'unknown'

        if (data.status === 'error') {
          progressErrorMsg.value = data.error_msg || ''
          sse.close()
        } else if (data.status === 'done') {
          sse.close()

          // SSE 結束後，再下載最後 ZIP
          fetchFinalZip(jobId)
        }
      }

      sse.onerror = (err) => {
        console.error('SSE error:', err)
        if (sse) {
          sse.close()
        }
        progressStatus.value = 'error'
        progressErrorMsg.value = 'SSE 連線出錯'
      }
    }

    async function fetchFinalZip(jobId) {
      try {
        // 直接透過 window.location 下載
        //   GET /api/projects/:projectId/site_diaries/multi_download_result?job_id=xxx
        const finalUrl = `/api/projects/${projectIdNumber.value}/site_diaries/multi_download_result?job_id=${jobId}`
        window.location = finalUrl
      } catch (err) {
        console.error('fetchFinalZip error:', err)
        progressStatus.value = 'error'
        progressErrorMsg.value = String(err)
      }
    }

    // 讓使用者有機會手動關閉 SSE
    function abortSse() {
      if (sse) {
        sse.close()
      }
      progressStatus.value = 'error'
      progressErrorMsg.value = 'User aborted.'
    }

    // 關閉 SSE 進度視窗
    function closeProgressModal() {
      showProgressModal.value = false
    }

    // ===============================================

    // 點擊「儲存 / 更新」後 => 關閉表單並重整列表
    const onDiaryUpdated = () => {
      displayFormDialog.value = false
      fetchSiteDiaries()
    }

    // 點擊 Cancel => 僅關閉表單
    const onDiaryCancelled = () => {
      displayFormDialog.value = false
    }

    // 是否全選
    const isAllSelected = computed(() => {
      return siteDiaries.value.length > 0 &&
        selectedDiaryIds.value.length === siteDiaries.value.length
    })
    const toggleSelectAll = (e) => {
      if (e.target.checked) {
        selectedDiaryIds.value = siteDiaries.value.map(d => d.id)
      } else {
        selectedDiaryIds.value = []
      }
    }

    // 若是星期天 => 顯示特殊背景
    const getRowClass = (diary) => {
      if (!diary.report_date) return ''
      const d = new Date(diary.report_date)
      return d.getDay() === 0 ? 'sunday-row' : ''
    }

    onMounted(() => {
      fetchProjectInfo()
      fetchSiteDiaries()
    })

    return {
      siteDiaries,
      projectInfo,
      displayFormDialog,
      editingDiaryId,

      selectedDiaryIds,
      isAllSelected,
      toggleSelectAll,

      sortBy,
      sortOrder,
      projectIdNumber,

      fetchSiteDiaries,
      openCreateDialog,
      openEditDialog,
      deleteDiary,
      downloadReport,

      // 新增 SSE 相關
      downloadMultipleAsync,
      showProgressModal,
      sseProgress,
      progressStatus,
      progressErrorMsg,
      abortSse,
      closeProgressModal,

      onDiaryUpdated,
      onDiaryCancelled,
      getRowClass
    }
  }
}
</script>

<style scoped>
.mb-6 {
  margin-bottom: 24px;
}

/*  專門針對星期天列，套用底色 */
.sunday-row td {
  background-color: #e9e9e9 !important;
}

/*  更改 table-sm 的內補與行高 => 更緊湊的列高 */
.table-sm > :not(caption) > * > * {
  padding: 0.3rem 0.5rem !important;
  line-height: 1.1 !important;
}

/* Modal 層級調整 */
.modal {
  z-index: 1050;
}
.modal-backdrop {
  z-index: 1040;
}
</style>

================================================================================

frontend/src/views/StaffView.vue

================================================================================
<template>
  <div class="container">
    <h1>人員管理</h1>

    <table class="table table-bordered mb-6">
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Role</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="item in staffList" :key="item.id">
          <td>{{ item.id }}</td>
          <td>{{ item.name }}</td>
          <td>{{ item.role }}</td>
          <td>
            <button
              class="btn btn-danger btn-sm"
              @click="deleteStaff(item.id)"
            >
              Delete
            </button>
          </td>
        </tr>
      </tbody>
    </table>

    <h3>新增人員</h3>
    <div class="border p-3 mb-6">
      <div class="mb-3">
        <label class="form-label">姓名</label>
        <input
          type="text"
          v-model="name"
          class="form-control"
        />
      </div>
      <div class="mb-3">
        <label class="form-label">角色</label>
        <input
          type="text"
          v-model="role"
          class="form-control"
        />
      </div>
      <button class="btn btn-primary" @click="createStaff">
        新增
      </button>
    </div>
  </div>
</template>

<script>
import axios from 'axios'
import { ref, onMounted } from 'vue'

export default {
  name: 'StaffView',
  setup() {
    const staffList = ref([])
    const name = ref('')
    const role = ref('')

    const fetchStaff = async () => {
      try {
        const { data } = await axios.get('/api/staff')
        staffList.value = data
      } catch (err) {
        console.error(err)
      }
    }

    const createStaff = async () => {
      if (!name.value) {
        alert('請輸入姓名')
        return
      }
      try {
        await axios.post('/api/staff', { name: name.value, role: role.value })
        alert('人員已新增！')
        name.value = ''
        role.value = ''
        fetchStaff()
      } catch (err) {
        console.error(err)
      }
    }

    const deleteStaff = async (id) => {
      if (!confirm('是否確定要刪除此人員？')) return
      try {
        await axios.delete(`/api/staff/${id}`)
        alert('人員已刪除')
        fetchStaff()
      } catch (err) {
        console.error(err)
      }
    }

    onMounted(() => {
      fetchStaff()
    })

    return {
      staffList,
      name,
      role,
      createStaff,
      deleteStaff
    }
  }
}
</script>

<style scoped>
.mb-6 {
  margin-bottom: 24px;
}
</style>

================================================================================

frontend/src/vite-env.d.ts

================================================================================
/// <reference types="vite/client" />
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

export default defineConfig({
  plugins: [vue()],
  server: {
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:5000', // Flask 後端
        changeOrigin: true
      }
    }
  }
})

================================================================================

frontend/tsconfig.app.json

================================================================================
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "baseUrl": ".",
    "moduleResolution": "node",
    "types": [
      "node"
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================================================================================

frontend/tsconfig.json

================================================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================================================================================

frontend/tsconfig.node.json

================================================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================================================================================

frontend/vite.config.ts

================================================================================
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { fileURLToPath, URL } from 'node:url'

export default defineConfig({
  plugins: [vue()],
  // ★ 新增 resolve.alias 配置
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:5000',
        changeOrigin: true
      }
    }
  },
  build: {
    outDir: 'dist', // 打包後輸出位置
    emptyOutDir: true
  }
})

================================================================================

package.json

================================================================================
{
    "name": "work-project",
    "version": "1.0.0",
    "scripts": {
      "heroku-postbuild": "cd frontend && npm install && npm run build"
    }
  }
  
================================================================================

requirements.txt

================================================================================
Flask==3.1.0
Flask-PyMongo==3.0.1
pymongo==4.11.0
openpyxl==3.1.5
gunicorn==23.0.0